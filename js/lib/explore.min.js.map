{"version":3,"sources":["webpack:///explore.min.js","webpack:///webpack/bootstrap 440a5ed496a788c4c813","webpack:///./js/src/explore.js","webpack:///./js/components/sticky-nav.js","webpack:///./~/immutable/dist/immutable.js","webpack:///./js/components/eiti-bar.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","Immutable","EITIBar","window","scrollLeft","scrollTop","findScrollPositions","undefined","pageXOffset","document","documentElement","body","parentNode","pageYOffset","StickyNav","this","elems","sticky","querySelector","main","attrStickyOffset","getAttribute","attrOffsetBottom","parseInt","maxWidth","attrAbsolute","attrParent","parent","determineScreen","windowWidth","innerWidth","clientWidth","wasMobile","isMobile","isAbsolute","status","lastStatus","lastWidth","lastWindowWidth","prototype","setOffset","offset","offsetTop","offsetHeight","getPositions","height","clientHeight","width","windowBump","mainOffset","mainHeight","diffTop","diffBottom","needsUpdate","init","statusChange","sizeChange","updateNeeded","update","style","position","top","classList","remove","add","throttle","fn","threshhold","scope","last","deferTimer","context","now","Date","args","arguments","clearTimeout","setTimeout","apply","run","stickyNav","loadDelay","addEventListener","observer","MutationObserver","config","subtree","childList","observe","global","factory","createClass","ctor","superClass","Object","create","constructor","Iterable","value","isIterable","Seq","KeyedIterable","isKeyed","KeyedSeq","IndexedIterable","isIndexed","IndexedSeq","SetIterable","isAssociative","SetSeq","maybeIterable","IS_ITERABLE_SENTINEL","maybeKeyed","IS_KEYED_SENTINEL","maybeIndexed","IS_INDEXED_SENTINEL","maybeAssociative","isOrdered","maybeOrdered","IS_ORDERED_SENTINEL","MakeRef","ref","SetRef","OwnerID","arrCopy","arr","len","Math","max","length","newArr","Array","ii","ensureSize","iter","size","__iterate","returnTrue","wrapIndex","index","uint32Index","NaN","wholeSlice","begin","end","resolveBegin","resolveIndex","resolveEnd","defaultIndex","min","Iterator","next","iteratorValue","type","k","v","iteratorResult","done","iteratorDone","hasIterator","getIteratorFn","isIterator","maybeIterator","getIterator","iterable","iteratorFn","REAL_ITERATOR_SYMBOL","FAUX_ITERATOR_SYMBOL","isArrayLike","emptySequence","toSeq","seqFromValue","toKeyedSeq","fromEntrySeq","keyedSeqFromValue","entrySeq","toIndexedSeq","indexedSeqFromValue","toSetSeq","ArraySeq","array","_array","ObjectSeq","object","keys","_object","_keys","IterableSeq","_iterable","IteratorSeq","iterator","_iterator","_iteratorCache","isSeq","maybeSeq","IS_SEQ_SENTINEL","EMPTY_SEQ","seq","isArray","TypeError","maybeIndexedSeqFromValue","seqIterate","reverse","useKeys","cache","_cache","maxIndex","entry","__iterateUncached","seqIterator","__iteratorUncached","fromJS","json","converter","fromJSWith","","fromJSDefault","key","parentJSON","map","isPlainObj","toList","toMap","is","valueA","valueB","valueOf","equals","deepEqual","a","b","__hash","notAssociative","entries","every","flipped","cacheResult","_","allEqual","bSize","has","get","NOT_SET","Repeat","times","_value","Infinity","EMPTY_REPEAT","invariant","condition","error","Error","Range","start","step","abs","_start","_end","_step","ceil","EMPTY_RANGE","Collection","KeyedCollection","IndexedCollection","SetCollection","smi","i32","hash","o","h","STRING_HASH_CACHE_MIN_STRLEN","cachedHashString","hashString","hashCode","hashJSObj","toString","string","stringHashCache","STRING_HASH_CACHE_SIZE","STRING_HASH_CACHE_MAX_SIZE","charCodeAt","obj","usingWeakMap","weakMap","UID_HASH_KEY","canDefineProperty","propertyIsEnumerable","getIENodeHash","objHashUID","set","isExtensible","defineProperty","enumerable","configurable","writable","nodeType","node","uniqueID","assertNotInfinite","Map","emptyMap","isMap","withMutations","forEach","maybeMap","IS_MAP_SENTINEL","ArrayMapNode","ownerID","BitmapIndexedNode","bitmap","nodes","HashArrayMapNode","count","HashCollisionNode","keyHash","ValueNode","MapIterator","_type","_reverse","_stack","_root","mapIteratorFrame","mapIteratorValue","prev","__prev","makeMap","root","MapPrototype","__ownerID","__altered","EMPTY_MAP","updateMap","newRoot","newSize","didChangeSize","CHANGE_LENGTH","didAlter","DID_ALTER","updateNode","shift","isLeafNode","mergeIntoNode","newNode","idx1","MASK","idx2","SHIFT","createNodes","packNodes","excluding","packedII","packedNodes","bit","expandNodes","including","expandedNodes","SIZE","mergeIntoMapWith","merger","iterables","iters","push","mergeIntoCollectionWith","deepMerger","existing","mergeDeep","deepMergerWith","mergeDeepWith","nextValue","collection","filter","x","mergeIntoMap","updateInDeepMap","keyPathIter","notSetValue","updater","isNotSet","existingValue","newValue","nextExisting","nextUpdated","popCount","setIn","idx","val","canEdit","newArray","spliceIn","newLen","after","spliceOut","pop","List","empty","emptyList","isList","makeList","VNode","toArray","list","setSize","i","maybeList","IS_LIST_SENTINEL","iterateList","iterateNodeOrLeaf","level","iterateLeaf","iterateNode","tailPos","tail","from","left","to","right","DONE","values","_origin","_capacity","getTailOffset","_tail","_level","origin","capacity","ListPrototype","EMPTY_LIST","updateList","setListBounds","newTail","updateVNode","nodeHas","lowerNode","newLowerNode","editableVNode","slice","listNodeFor","rawIndex","owner","oldOrigin","oldCapacity","newOrigin","newCapacity","clear","newLevel","offsetShift","oldTailOffset","newTailOffset","oldTail","removeAfter","removeBefore","beginIndex","mergeIntoListWith","maxSize","OrderedMap","emptyOrderedMap","isOrderedMap","maybeOrderedMap","makeOrderedMap","omap","_map","_list","EMPTY_ORDERED_MAP","updateOrderedMap","newMap","newList","flip","ToKeyedSequence","indexed","_iter","_useKeys","ToIndexedSequence","ToSetSequence","FromEntriesSequence","flipFactory","flipSequence","makeSequence","reversedSequence","includes","cacheResultThrough","this$0","ITERATE_ENTRIES","__iterator","ITERATE_VALUES","ITERATE_KEYS","mapFactory","mapper","mappedSequence","reverseFactory","filterFactory","predicate","filterSequence","iterations","countByFactory","grouper","groups","asMutable","asImmutable","groupByFactory","isKeyedIter","coerce","iterableClass","reify","sliceFactory","originalSize","resolvedBegin","resolvedEnd","sliceSize","resolvedSize","sliceSeq","skipped","isSkipping","takeWhileFactory","takeSequence","iterating","skipWhileFactory","skipSequence","skipping","concatFactory","isKeyedIterable","concat","singleton","concatSeq","flatten","reduce","sum","flattenFactory","depth","flatSequence","flatDeep","currentDepth","stopped","stack","flatMapFactory","interposeFactory","separator","interposedSequence","sortFactory","comparator","defaultComparator","sort","maxFactory","maxCompare","comp","zipWithFactory","keyIter","zipper","zipSequence","iterators","isDone","steps","some","s","validateEntry","resolveSize","forceIterator","keyPath","Record","defaultValues","name","hasInitialized","RecordType","setProps","RecordTypePrototype","_name","_defaultValues","RecordPrototype","makeRecord","likeRecord","record","getPrototypeOf","recordName","names","setProp","bind","Set","emptySet","isSet","maybeSet","IS_SET_SENTINEL","updateSet","__empty","__make","makeSet","SetPrototype","EMPTY_SET","OrderedSet","emptyOrderedSet","isOrderedSet","maybeOrderedSet","makeOrderedSet","OrderedSetPrototype","EMPTY_ORDERED_SET","Stack","emptyStack","isStack","unshiftAll","maybeStack","IS_STACK_SENTINEL","makeStack","head","StackPrototype","_head","EMPTY_STACK","mixin","methods","keyCopier","getOwnPropertySymbols","keyMapper","entryMapper","not","neg","quoteString","JSON","stringify","defaultZipper","defaultNegComparator","hashIterable","ordered","keyed","hashMerge","murmurHashOfSize","imul","SLICE$0","Keyed","Indexed","DELETE","Symbol","ITERATOR_SYMBOL","KEYS","VALUES","ENTRIES","inspect","toSource","of","__toString","hasOwnProperty","searchValue","indexOf","lastIndexOf","other","possibleIndex","floor","offsetValue","d","e","WeakMap","updateIn","deleteIn","updatedValue","merge","mergeWith","mergeIn","mergeDeepIn","sortBy","mutable","wasAltered","__ensureOwner","iterate","removeIn","removed","exists","MAX_ARRAY_MAP_SIZE","isEditable","newEntries","keyHashFrag","MAX_BITMAP_INDEXED_SIZE","newBitmap","newNodes","newCount","MIN_HASH_ARRAY_MAP_SIZE","keyMatch","subNode","splice","insert","oldSize","unshift","originIndex","newChild","removingFirst","oldChild","editable","sizeIndex","valueSeq","indexedIterable","defaultVal","_empty","fromKeys","keySeq","union","intersect","originalSet","subtract","peek","pushAll","toJS","__toJS","toJSON","toObject","toOrderedMap","toOrderedSet","toSet","toStack","__toStringMapper","join","returnValue","find","findEntry","found","findLastEntry","sideEffect","joined","isFirst","reducer","initialReduction","reduction","useFirst","reduceRight","reversed","butLast","isEmpty","countBy","entriesSequence","filterNot","findLast","first","flatMap","searchKey","getIn","searchKeyPath","nested","groupBy","hasIn","isSubset","isSuperset","maxBy","minBy","rest","skip","amount","skipLast","skipWhile","skipUntil","take","takeLast","takeWhile","takeUntil","IterablePrototype","chain","contains","noLengthWarning","console","warn","findKey","findLastKey","keyOf","lastKeyOf","mapEntries","mapKeys","KeyedIterablePrototype","findIndex","removeNum","numArgs","spliced","findLastIndex","interpose","interleave","zipped","interleaved","zip","zipWith","getBar","klass","bar","getElementsByClassName","appendChild","createElement","setAttribute","render","force","_render","renderId","requestAnimationFrame","toggle","scale","zero","setProperty","EPSILON","removeProperty","genericProperty","parse","change","symbol","identity","numericProperty","_change","parseNumber","n","isNaN","Number","attributeChanged","attr","registerElement","HTMLElement","createdCallback","__bar","attachedCallback","attributes","attributeChangedCallback"],"mappings":"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","file":"explore.min.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t(function(exports) {\n\t  'use strict';\n\t\n\t  // FIXME: does this export anything?\n\t  __webpack_require__(1);\n\t\n\t  exports.Immutable = __webpack_require__(2);\n\t  exports.EITIBar = __webpack_require__(3);\n\t\n\t})(window);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t(function(exports) {\n\t\n\t  var scrollLeft,\n\t    scrollTop;\n\t\n\t  var findScrollPositions = function(){\n\t    scrollLeft = (window.pageXOffset !== undefined)\n\t      ? window.pageXOffset\n\t      : (document.documentElement\n\t        || document.body.parentNode\n\t        || document.body).scrollLeft;\n\t    scrollTop = (window.pageYOffset !== undefined)\n\t      ? window.pageYOffset\n\t      : (document.documentElement\n\t        || document.body.parentNode\n\t        || document.body).scrollTop;\n\t\n\t  };\n\t\n\t  var StickyNav = function() {\n\t\n\t    this.elems = {\n\t      sticky : document.querySelector('.sticky_nav'),\n\t      main: document.querySelector('main')\n\t    };\n\t\n\t    this.attrStickyOffset = this.elems.sticky.getAttribute('data-sticky-offset');\n\t    this.attrOffsetBottom = parseInt(this.elems.sticky.getAttribute('data-offset-bottom')) || 0;\n\t    this.maxWidth = this.elems.sticky.getAttribute('data-max-width');\n\t    var attrAbsolute = this.elems.sticky.getAttribute('data-absolute');\n\t\n\t    this.attrParent = this.elems.sticky.getAttribute('data-offset-parent');\n\t\n\t    this.elems.parent = this.elems.sticky.getAttribute('data-offset-parent')\n\t      ? this.elems.sticky.parentNode\n\t      : null;\n\t\n\t    this.determineScreen = function() {\n\t      var windowWidth = window.innerWidth || document.body.clientWidth;\n\t      this.wasMobile = this.isMobile;\n\t      this.isMobile = windowWidth < 768;\n\t    };\n\t\n\t    this.determineScreen();\n\t\n\t    this.isAbsolute = function() {\n\t\n\t      var isAbsolute = (attrAbsolute === 'true' && !this.isMobile)\n\t        ? true\n\t        : false;\n\t      return isAbsolute;\n\t    }\n\t\n\t\n\t\n\t\n\t    this.status;\n\t    this.lastStatus;\n\t    this.lastWidth;\n\t    this.lastWindowWidth;\n\t  };\n\t\n\t  StickyNav.prototype = {\n\t    setOffset: function () {\n\t      this.offset = this.attrStickyOffset\n\t        ? parseInt(this.attrStickyOffset)\n\t        : !this.elems.parent\n\t          ? this.elems.sticky.offsetTop\n\t          : ( this.attrParent === 'mobile' && this.isMobile )\n\t            ? this.elems.parent.offsetTop - this.elems.sticky.offsetHeight\n\t            : this.elems.sticky.offsetTop\n\t    },\n\t    getPositions: function () {\n\t\n\t      this.height = this.elems.sticky.clientHeight;\n\t\n\t      this.lastWidth = this.width || 'initial';\n\t      var windowWidth = window.innerWidth || document.body.clientWidth,\n\t        windowBump = windowWidth > 1044 || this.isMobile ? 0 : -20;\n\t      this.width = this.elems.parent\n\t        ? this.elems.parent.clientWidth + windowBump + 'px'\n\t        : this.maxWidth;\n\t\n\t      this.mainOffset = this.elems.main.offsetTop;\n\t      this.mainHeight = this.elems.main.clientHeight;\n\t\n\t      this.diffTop = scrollTop - this.mainOffset - this.offset;\n\t\n\t      this.diffBottom = scrollTop + this.height - this.mainHeight - this.mainOffset;\n\t      this.lastStatus = this.status;\n\t      if (this.diffTop >= 0){\n\t        this.status = 'fixed';\n\t        if (this.diffBottom >= 0){\n\t          this.status = 'absolute';\n\t        }\n\t      } else {\n\t        this.status = 'static';\n\t      }\n\t    },\n\t    needsUpdate: function(init) {\n\t      var statusChange = this.status !== this.lastStatus;\n\t      var sizeChange = this.width !== this.lastWidth;\n\t      var updateNeeded = undefined;\n\t      if (!statusChange && sizeChange) {\n\t        updateNeeded = 'size';\n\t      } else if (statusChange && !sizeChange) {\n\t        updateNeeded = 'status';\n\t      } else if (statusChange && sizeChange || init === 'init') {\n\t        updateNeeded = 'both';\n\t      }\n\t      return updateNeeded;\n\t    },\n\t    update: function(updateNeeded) {\n\t      if (!updateNeeded) {\n\t        return;\n\t      } else {\n\t        if (this.diffTop >= 0){\n\t          if (updateNeeded === 'status' || updateNeeded === 'both') {\n\t            this.elems.sticky.style.position = 'fixed';\n\t            this.elems.sticky.style.top = 0;\n\t            this.elems.sticky.classList.remove('js-transparent');\n\t            this.elems.sticky.classList.add('js-color');\n\t          }\n\t\n\t          if (updateNeeded === 'size' || updateNeeded === 'both') {\n\t            this.elems.sticky.style.width = this.width;\n\t          }\n\t\n\t          if (this.diffBottom >= 0){\n\t            if (updateNeeded === 'status' || updateNeeded === 'both') {\n\t              this.elems.sticky.style.position = 'absolute';\n\t\n\t              if ( this.attrParent === 'mobile' && this.isMobile ) {\n\t                this.elems.sticky.style.top = this.mainHeight - this.offset - this.height - this.attrOffsetBottom + 'px';\n\t              } else {\n\t                this.elems.sticky.style.top = this.mainHeight - this.height - this.attrOffsetBottom + 'px';\n\t              }\n\t            }\n\t          }\n\t        } else {\n\t          if (updateNeeded === 'status' || updateNeeded === 'both') {\n\t            this.elems.sticky.classList.remove('js-color');\n\t            this.elems.sticky.classList.add('js-transparent');\n\t            if (this.isAbsolute()) {\n\t              this.elems.sticky.style.position = 'absolute';\n\t            } else {\n\t              this.elems.sticky.style.position = 'static';\n\t            }\n\t          }\n\t\n\t          if (updateNeeded === 'size' || updateNeeded === 'both') {\n\t            this.elems.sticky.style.width = this.width;\n\t          }\n\t        }\n\t      }\n\t    },\n\t    throttle : function (fn, threshhold, scope) {\n\t      threshhold || (threshhold = 250);\n\t      var last,\n\t          deferTimer;\n\t      return function () {\n\t        var context = scope || this;\n\t\n\t        var now = +new Date,\n\t            args = arguments;\n\t        if (last && now < last + threshhold) {\n\t          // hold on to it\n\t          clearTimeout(deferTimer);\n\t          deferTimer = setTimeout(function () {\n\t            last = now;\n\t            fn.apply(context, args);\n\t          }, threshhold);\n\t        } else {\n\t          last = now;\n\t          fn.apply(context, args);\n\t        }\n\t      };\n\t    },\n\t    run: function(init) {\n\t      findScrollPositions();\n\t      if (init === 'init') {\n\t        this.setOffset();\n\t      }\n\t      this.getPositions();\n\t      this.update(this.needsUpdate(init));\n\t    }\n\t  };\n\t\n\t  var stickyNav = new StickyNav();\n\t\n\t  var loadDelay = stickyNav.elems.sticky.getAttribute('data-load-delay');\n\t  if (loadDelay) {\n\t    setTimeout(function() {\n\t      stickyNav.run('init');\n\t    }, parseInt(loadDelay));\n\t  } else {\n\t    stickyNav.run('init');\n\t  }\n\t\n\t\n\t\n\t  window.addEventListener('scroll', stickyNav.throttle(stickyNav.run, 130, stickyNav));\n\t\n\t  window.addEventListener('resize', stickyNav.throttle(stickyNav.run, 150, stickyNav));\n\t\n\t  // documentation: https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver\n\t  var observer = new MutationObserver(function () {\n\t    stickyNav.run();\n\t  });\n\t\n\t  // set up your configuration\n\t  // this will watch to see if you insert or remove any children\n\t  var config = { subtree: true, childList: true };\n\t\n\t  // start observing\n\t  observer.observe(stickyNav.elems.sticky, config);\n\t\n\t  // other potential elem listener\n\t  // http://www.backalleycoder.com/2013/03/18/cross-browser-event-based-element-resize-detection/\n\t\n\t  exports.stickyNav = stickyNav;\n\t\n\t\n\t})(this);\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t *  Copyright (c) 2014-2015, Facebook, Inc.\n\t *  All rights reserved.\n\t *\n\t *  This source code is licensed under the BSD-style license found in the\n\t *  LICENSE file in the root directory of this source tree. An additional grant\n\t *  of patent rights can be found in the PATENTS file in the same directory.\n\t */\n\t\n\t(function (global, factory) {\n\t   true ? module.exports = factory() :\n\t  typeof define === 'function' && define.amd ? define(factory) :\n\t  global.Immutable = factory();\n\t}(this, function () { 'use strict';var SLICE$0 = Array.prototype.slice;\n\t\n\t  function createClass(ctor, superClass) {\n\t    if (superClass) {\n\t      ctor.prototype = Object.create(superClass.prototype);\n\t    }\n\t    ctor.prototype.constructor = ctor;\n\t  }\n\t\n\t  function Iterable(value) {\n\t      return isIterable(value) ? value : Seq(value);\n\t    }\n\t\n\t\n\t  createClass(KeyedIterable, Iterable);\n\t    function KeyedIterable(value) {\n\t      return isKeyed(value) ? value : KeyedSeq(value);\n\t    }\n\t\n\t\n\t  createClass(IndexedIterable, Iterable);\n\t    function IndexedIterable(value) {\n\t      return isIndexed(value) ? value : IndexedSeq(value);\n\t    }\n\t\n\t\n\t  createClass(SetIterable, Iterable);\n\t    function SetIterable(value) {\n\t      return isIterable(value) && !isAssociative(value) ? value : SetSeq(value);\n\t    }\n\t\n\t\n\t\n\t  function isIterable(maybeIterable) {\n\t    return !!(maybeIterable && maybeIterable[IS_ITERABLE_SENTINEL]);\n\t  }\n\t\n\t  function isKeyed(maybeKeyed) {\n\t    return !!(maybeKeyed && maybeKeyed[IS_KEYED_SENTINEL]);\n\t  }\n\t\n\t  function isIndexed(maybeIndexed) {\n\t    return !!(maybeIndexed && maybeIndexed[IS_INDEXED_SENTINEL]);\n\t  }\n\t\n\t  function isAssociative(maybeAssociative) {\n\t    return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);\n\t  }\n\t\n\t  function isOrdered(maybeOrdered) {\n\t    return !!(maybeOrdered && maybeOrdered[IS_ORDERED_SENTINEL]);\n\t  }\n\t\n\t  Iterable.isIterable = isIterable;\n\t  Iterable.isKeyed = isKeyed;\n\t  Iterable.isIndexed = isIndexed;\n\t  Iterable.isAssociative = isAssociative;\n\t  Iterable.isOrdered = isOrdered;\n\t\n\t  Iterable.Keyed = KeyedIterable;\n\t  Iterable.Indexed = IndexedIterable;\n\t  Iterable.Set = SetIterable;\n\t\n\t\n\t  var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\n\t  var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\n\t  var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';\n\t  var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\n\t\n\t  // Used for setting prototype methods that IE8 chokes on.\n\t  var DELETE = 'delete';\n\t\n\t  // Constants describing the size of trie nodes.\n\t  var SHIFT = 5; // Resulted in best performance after ______?\n\t  var SIZE = 1 << SHIFT;\n\t  var MASK = SIZE - 1;\n\t\n\t  // A consistent shared value representing \"not set\" which equals nothing other\n\t  // than itself, and nothing that could be provided externally.\n\t  var NOT_SET = {};\n\t\n\t  // Boolean references, Rough equivalent of `bool &`.\n\t  var CHANGE_LENGTH = { value: false };\n\t  var DID_ALTER = { value: false };\n\t\n\t  function MakeRef(ref) {\n\t    ref.value = false;\n\t    return ref;\n\t  }\n\t\n\t  function SetRef(ref) {\n\t    ref && (ref.value = true);\n\t  }\n\t\n\t  // A function which returns a value representing an \"owner\" for transient writes\n\t  // to tries. The return value will only ever equal itself, and will not equal\n\t  // the return of any subsequent call of this function.\n\t  function OwnerID() {}\n\t\n\t  // http://jsperf.com/copy-array-inline\n\t  function arrCopy(arr, offset) {\n\t    offset = offset || 0;\n\t    var len = Math.max(0, arr.length - offset);\n\t    var newArr = new Array(len);\n\t    for (var ii = 0; ii < len; ii++) {\n\t      newArr[ii] = arr[ii + offset];\n\t    }\n\t    return newArr;\n\t  }\n\t\n\t  function ensureSize(iter) {\n\t    if (iter.size === undefined) {\n\t      iter.size = iter.__iterate(returnTrue);\n\t    }\n\t    return iter.size;\n\t  }\n\t\n\t  function wrapIndex(iter, index) {\n\t    // This implements \"is array index\" which the ECMAString spec defines as:\n\t    //\n\t    //     A String property name P is an array index if and only if\n\t    //     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal\n\t    //     to 2^32−1.\n\t    //\n\t    // http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects\n\t    if (typeof index !== 'number') {\n\t      var uint32Index = index >>> 0; // N >>> 0 is shorthand for ToUint32\n\t      if ('' + uint32Index !== index || uint32Index === 4294967295) {\n\t        return NaN;\n\t      }\n\t      index = uint32Index;\n\t    }\n\t    return index < 0 ? ensureSize(iter) + index : index;\n\t  }\n\t\n\t  function returnTrue() {\n\t    return true;\n\t  }\n\t\n\t  function wholeSlice(begin, end, size) {\n\t    return (begin === 0 || (size !== undefined && begin <= -size)) &&\n\t      (end === undefined || (size !== undefined && end >= size));\n\t  }\n\t\n\t  function resolveBegin(begin, size) {\n\t    return resolveIndex(begin, size, 0);\n\t  }\n\t\n\t  function resolveEnd(end, size) {\n\t    return resolveIndex(end, size, size);\n\t  }\n\t\n\t  function resolveIndex(index, size, defaultIndex) {\n\t    return index === undefined ?\n\t      defaultIndex :\n\t      index < 0 ?\n\t        Math.max(0, size + index) :\n\t        size === undefined ?\n\t          index :\n\t          Math.min(size, index);\n\t  }\n\t\n\t  /* global Symbol */\n\t\n\t  var ITERATE_KEYS = 0;\n\t  var ITERATE_VALUES = 1;\n\t  var ITERATE_ENTRIES = 2;\n\t\n\t  var REAL_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n\t  var FAUX_ITERATOR_SYMBOL = '@@iterator';\n\t\n\t  var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;\n\t\n\t\n\t  function Iterator(next) {\n\t      this.next = next;\n\t    }\n\t\n\t    Iterator.prototype.toString = function() {\n\t      return '[Iterator]';\n\t    };\n\t\n\t\n\t  Iterator.KEYS = ITERATE_KEYS;\n\t  Iterator.VALUES = ITERATE_VALUES;\n\t  Iterator.ENTRIES = ITERATE_ENTRIES;\n\t\n\t  Iterator.prototype.inspect =\n\t  Iterator.prototype.toSource = function () { return this.toString(); }\n\t  Iterator.prototype[ITERATOR_SYMBOL] = function () {\n\t    return this;\n\t  };\n\t\n\t\n\t  function iteratorValue(type, k, v, iteratorResult) {\n\t    var value = type === 0 ? k : type === 1 ? v : [k, v];\n\t    iteratorResult ? (iteratorResult.value = value) : (iteratorResult = {\n\t      value: value, done: false\n\t    });\n\t    return iteratorResult;\n\t  }\n\t\n\t  function iteratorDone() {\n\t    return { value: undefined, done: true };\n\t  }\n\t\n\t  function hasIterator(maybeIterable) {\n\t    return !!getIteratorFn(maybeIterable);\n\t  }\n\t\n\t  function isIterator(maybeIterator) {\n\t    return maybeIterator && typeof maybeIterator.next === 'function';\n\t  }\n\t\n\t  function getIterator(iterable) {\n\t    var iteratorFn = getIteratorFn(iterable);\n\t    return iteratorFn && iteratorFn.call(iterable);\n\t  }\n\t\n\t  function getIteratorFn(iterable) {\n\t    var iteratorFn = iterable && (\n\t      (REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL]) ||\n\t      iterable[FAUX_ITERATOR_SYMBOL]\n\t    );\n\t    if (typeof iteratorFn === 'function') {\n\t      return iteratorFn;\n\t    }\n\t  }\n\t\n\t  function isArrayLike(value) {\n\t    return value && typeof value.length === 'number';\n\t  }\n\t\n\t  createClass(Seq, Iterable);\n\t    function Seq(value) {\n\t      return value === null || value === undefined ? emptySequence() :\n\t        isIterable(value) ? value.toSeq() : seqFromValue(value);\n\t    }\n\t\n\t    Seq.of = function(/*...values*/) {\n\t      return Seq(arguments);\n\t    };\n\t\n\t    Seq.prototype.toSeq = function() {\n\t      return this;\n\t    };\n\t\n\t    Seq.prototype.toString = function() {\n\t      return this.__toString('Seq {', '}');\n\t    };\n\t\n\t    Seq.prototype.cacheResult = function() {\n\t      if (!this._cache && this.__iterateUncached) {\n\t        this._cache = this.entrySeq().toArray();\n\t        this.size = this._cache.length;\n\t      }\n\t      return this;\n\t    };\n\t\n\t    // abstract __iterateUncached(fn, reverse)\n\t\n\t    Seq.prototype.__iterate = function(fn, reverse) {\n\t      return seqIterate(this, fn, reverse, true);\n\t    };\n\t\n\t    // abstract __iteratorUncached(type, reverse)\n\t\n\t    Seq.prototype.__iterator = function(type, reverse) {\n\t      return seqIterator(this, type, reverse, true);\n\t    };\n\t\n\t\n\t\n\t  createClass(KeyedSeq, Seq);\n\t    function KeyedSeq(value) {\n\t      return value === null || value === undefined ?\n\t        emptySequence().toKeyedSeq() :\n\t        isIterable(value) ?\n\t          (isKeyed(value) ? value.toSeq() : value.fromEntrySeq()) :\n\t          keyedSeqFromValue(value);\n\t    }\n\t\n\t    KeyedSeq.prototype.toKeyedSeq = function() {\n\t      return this;\n\t    };\n\t\n\t\n\t\n\t  createClass(IndexedSeq, Seq);\n\t    function IndexedSeq(value) {\n\t      return value === null || value === undefined ? emptySequence() :\n\t        !isIterable(value) ? indexedSeqFromValue(value) :\n\t        isKeyed(value) ? value.entrySeq() : value.toIndexedSeq();\n\t    }\n\t\n\t    IndexedSeq.of = function(/*...values*/) {\n\t      return IndexedSeq(arguments);\n\t    };\n\t\n\t    IndexedSeq.prototype.toIndexedSeq = function() {\n\t      return this;\n\t    };\n\t\n\t    IndexedSeq.prototype.toString = function() {\n\t      return this.__toString('Seq [', ']');\n\t    };\n\t\n\t    IndexedSeq.prototype.__iterate = function(fn, reverse) {\n\t      return seqIterate(this, fn, reverse, false);\n\t    };\n\t\n\t    IndexedSeq.prototype.__iterator = function(type, reverse) {\n\t      return seqIterator(this, type, reverse, false);\n\t    };\n\t\n\t\n\t\n\t  createClass(SetSeq, Seq);\n\t    function SetSeq(value) {\n\t      return (\n\t        value === null || value === undefined ? emptySequence() :\n\t        !isIterable(value) ? indexedSeqFromValue(value) :\n\t        isKeyed(value) ? value.entrySeq() : value\n\t      ).toSetSeq();\n\t    }\n\t\n\t    SetSeq.of = function(/*...values*/) {\n\t      return SetSeq(arguments);\n\t    };\n\t\n\t    SetSeq.prototype.toSetSeq = function() {\n\t      return this;\n\t    };\n\t\n\t\n\t\n\t  Seq.isSeq = isSeq;\n\t  Seq.Keyed = KeyedSeq;\n\t  Seq.Set = SetSeq;\n\t  Seq.Indexed = IndexedSeq;\n\t\n\t  var IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';\n\t\n\t  Seq.prototype[IS_SEQ_SENTINEL] = true;\n\t\n\t\n\t\n\t  createClass(ArraySeq, IndexedSeq);\n\t    function ArraySeq(array) {\n\t      this._array = array;\n\t      this.size = array.length;\n\t    }\n\t\n\t    ArraySeq.prototype.get = function(index, notSetValue) {\n\t      return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;\n\t    };\n\t\n\t    ArraySeq.prototype.__iterate = function(fn, reverse) {\n\t      var array = this._array;\n\t      var maxIndex = array.length - 1;\n\t      for (var ii = 0; ii <= maxIndex; ii++) {\n\t        if (fn(array[reverse ? maxIndex - ii : ii], ii, this) === false) {\n\t          return ii + 1;\n\t        }\n\t      }\n\t      return ii;\n\t    };\n\t\n\t    ArraySeq.prototype.__iterator = function(type, reverse) {\n\t      var array = this._array;\n\t      var maxIndex = array.length - 1;\n\t      var ii = 0;\n\t      return new Iterator(function() \n\t        {return ii > maxIndex ?\n\t          iteratorDone() :\n\t          iteratorValue(type, ii, array[reverse ? maxIndex - ii++ : ii++])}\n\t      );\n\t    };\n\t\n\t\n\t\n\t  createClass(ObjectSeq, KeyedSeq);\n\t    function ObjectSeq(object) {\n\t      var keys = Object.keys(object);\n\t      this._object = object;\n\t      this._keys = keys;\n\t      this.size = keys.length;\n\t    }\n\t\n\t    ObjectSeq.prototype.get = function(key, notSetValue) {\n\t      if (notSetValue !== undefined && !this.has(key)) {\n\t        return notSetValue;\n\t      }\n\t      return this._object[key];\n\t    };\n\t\n\t    ObjectSeq.prototype.has = function(key) {\n\t      return this._object.hasOwnProperty(key);\n\t    };\n\t\n\t    ObjectSeq.prototype.__iterate = function(fn, reverse) {\n\t      var object = this._object;\n\t      var keys = this._keys;\n\t      var maxIndex = keys.length - 1;\n\t      for (var ii = 0; ii <= maxIndex; ii++) {\n\t        var key = keys[reverse ? maxIndex - ii : ii];\n\t        if (fn(object[key], key, this) === false) {\n\t          return ii + 1;\n\t        }\n\t      }\n\t      return ii;\n\t    };\n\t\n\t    ObjectSeq.prototype.__iterator = function(type, reverse) {\n\t      var object = this._object;\n\t      var keys = this._keys;\n\t      var maxIndex = keys.length - 1;\n\t      var ii = 0;\n\t      return new Iterator(function()  {\n\t        var key = keys[reverse ? maxIndex - ii : ii];\n\t        return ii++ > maxIndex ?\n\t          iteratorDone() :\n\t          iteratorValue(type, key, object[key]);\n\t      });\n\t    };\n\t\n\t  ObjectSeq.prototype[IS_ORDERED_SENTINEL] = true;\n\t\n\t\n\t  createClass(IterableSeq, IndexedSeq);\n\t    function IterableSeq(iterable) {\n\t      this._iterable = iterable;\n\t      this.size = iterable.length || iterable.size;\n\t    }\n\t\n\t    IterableSeq.prototype.__iterateUncached = function(fn, reverse) {\n\t      if (reverse) {\n\t        return this.cacheResult().__iterate(fn, reverse);\n\t      }\n\t      var iterable = this._iterable;\n\t      var iterator = getIterator(iterable);\n\t      var iterations = 0;\n\t      if (isIterator(iterator)) {\n\t        var step;\n\t        while (!(step = iterator.next()).done) {\n\t          if (fn(step.value, iterations++, this) === false) {\n\t            break;\n\t          }\n\t        }\n\t      }\n\t      return iterations;\n\t    };\n\t\n\t    IterableSeq.prototype.__iteratorUncached = function(type, reverse) {\n\t      if (reverse) {\n\t        return this.cacheResult().__iterator(type, reverse);\n\t      }\n\t      var iterable = this._iterable;\n\t      var iterator = getIterator(iterable);\n\t      if (!isIterator(iterator)) {\n\t        return new Iterator(iteratorDone);\n\t      }\n\t      var iterations = 0;\n\t      return new Iterator(function()  {\n\t        var step = iterator.next();\n\t        return step.done ? step : iteratorValue(type, iterations++, step.value);\n\t      });\n\t    };\n\t\n\t\n\t\n\t  createClass(IteratorSeq, IndexedSeq);\n\t    function IteratorSeq(iterator) {\n\t      this._iterator = iterator;\n\t      this._iteratorCache = [];\n\t    }\n\t\n\t    IteratorSeq.prototype.__iterateUncached = function(fn, reverse) {\n\t      if (reverse) {\n\t        return this.cacheResult().__iterate(fn, reverse);\n\t      }\n\t      var iterator = this._iterator;\n\t      var cache = this._iteratorCache;\n\t      var iterations = 0;\n\t      while (iterations < cache.length) {\n\t        if (fn(cache[iterations], iterations++, this) === false) {\n\t          return iterations;\n\t        }\n\t      }\n\t      var step;\n\t      while (!(step = iterator.next()).done) {\n\t        var val = step.value;\n\t        cache[iterations] = val;\n\t        if (fn(val, iterations++, this) === false) {\n\t          break;\n\t        }\n\t      }\n\t      return iterations;\n\t    };\n\t\n\t    IteratorSeq.prototype.__iteratorUncached = function(type, reverse) {\n\t      if (reverse) {\n\t        return this.cacheResult().__iterator(type, reverse);\n\t      }\n\t      var iterator = this._iterator;\n\t      var cache = this._iteratorCache;\n\t      var iterations = 0;\n\t      return new Iterator(function()  {\n\t        if (iterations >= cache.length) {\n\t          var step = iterator.next();\n\t          if (step.done) {\n\t            return step;\n\t          }\n\t          cache[iterations] = step.value;\n\t        }\n\t        return iteratorValue(type, iterations, cache[iterations++]);\n\t      });\n\t    };\n\t\n\t\n\t\n\t\n\t  // # pragma Helper functions\n\t\n\t  function isSeq(maybeSeq) {\n\t    return !!(maybeSeq && maybeSeq[IS_SEQ_SENTINEL]);\n\t  }\n\t\n\t  var EMPTY_SEQ;\n\t\n\t  function emptySequence() {\n\t    return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));\n\t  }\n\t\n\t  function keyedSeqFromValue(value) {\n\t    var seq =\n\t      Array.isArray(value) ? new ArraySeq(value).fromEntrySeq() :\n\t      isIterator(value) ? new IteratorSeq(value).fromEntrySeq() :\n\t      hasIterator(value) ? new IterableSeq(value).fromEntrySeq() :\n\t      typeof value === 'object' ? new ObjectSeq(value) :\n\t      undefined;\n\t    if (!seq) {\n\t      throw new TypeError(\n\t        'Expected Array or iterable object of [k, v] entries, '+\n\t        'or keyed object: ' + value\n\t      );\n\t    }\n\t    return seq;\n\t  }\n\t\n\t  function indexedSeqFromValue(value) {\n\t    var seq = maybeIndexedSeqFromValue(value);\n\t    if (!seq) {\n\t      throw new TypeError(\n\t        'Expected Array or iterable object of values: ' + value\n\t      );\n\t    }\n\t    return seq;\n\t  }\n\t\n\t  function seqFromValue(value) {\n\t    var seq = maybeIndexedSeqFromValue(value) ||\n\t      (typeof value === 'object' && new ObjectSeq(value));\n\t    if (!seq) {\n\t      throw new TypeError(\n\t        'Expected Array or iterable object of values, or keyed object: ' + value\n\t      );\n\t    }\n\t    return seq;\n\t  }\n\t\n\t  function maybeIndexedSeqFromValue(value) {\n\t    return (\n\t      isArrayLike(value) ? new ArraySeq(value) :\n\t      isIterator(value) ? new IteratorSeq(value) :\n\t      hasIterator(value) ? new IterableSeq(value) :\n\t      undefined\n\t    );\n\t  }\n\t\n\t  function seqIterate(seq, fn, reverse, useKeys) {\n\t    var cache = seq._cache;\n\t    if (cache) {\n\t      var maxIndex = cache.length - 1;\n\t      for (var ii = 0; ii <= maxIndex; ii++) {\n\t        var entry = cache[reverse ? maxIndex - ii : ii];\n\t        if (fn(entry[1], useKeys ? entry[0] : ii, seq) === false) {\n\t          return ii + 1;\n\t        }\n\t      }\n\t      return ii;\n\t    }\n\t    return seq.__iterateUncached(fn, reverse);\n\t  }\n\t\n\t  function seqIterator(seq, type, reverse, useKeys) {\n\t    var cache = seq._cache;\n\t    if (cache) {\n\t      var maxIndex = cache.length - 1;\n\t      var ii = 0;\n\t      return new Iterator(function()  {\n\t        var entry = cache[reverse ? maxIndex - ii : ii];\n\t        return ii++ > maxIndex ?\n\t          iteratorDone() :\n\t          iteratorValue(type, useKeys ? entry[0] : ii - 1, entry[1]);\n\t      });\n\t    }\n\t    return seq.__iteratorUncached(type, reverse);\n\t  }\n\t\n\t  function fromJS(json, converter) {\n\t    return converter ?\n\t      fromJSWith(converter, json, '', {'': json}) :\n\t      fromJSDefault(json);\n\t  }\n\t\n\t  function fromJSWith(converter, json, key, parentJSON) {\n\t    if (Array.isArray(json)) {\n\t      return converter.call(parentJSON, key, IndexedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));\n\t    }\n\t    if (isPlainObj(json)) {\n\t      return converter.call(parentJSON, key, KeyedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));\n\t    }\n\t    return json;\n\t  }\n\t\n\t  function fromJSDefault(json) {\n\t    if (Array.isArray(json)) {\n\t      return IndexedSeq(json).map(fromJSDefault).toList();\n\t    }\n\t    if (isPlainObj(json)) {\n\t      return KeyedSeq(json).map(fromJSDefault).toMap();\n\t    }\n\t    return json;\n\t  }\n\t\n\t  function isPlainObj(value) {\n\t    return value && (value.constructor === Object || value.constructor === undefined);\n\t  }\n\t\n\t  /**\n\t   * An extension of the \"same-value\" algorithm as [described for use by ES6 Map\n\t   * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)\n\t   *\n\t   * NaN is considered the same as NaN, however -0 and 0 are considered the same\n\t   * value, which is different from the algorithm described by\n\t   * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n\t   *\n\t   * This is extended further to allow Objects to describe the values they\n\t   * represent, by way of `valueOf` or `equals` (and `hashCode`).\n\t   *\n\t   * Note: because of this extension, the key equality of Immutable.Map and the\n\t   * value equality of Immutable.Set will differ from ES6 Map and Set.\n\t   *\n\t   * ### Defining custom values\n\t   *\n\t   * The easiest way to describe the value an object represents is by implementing\n\t   * `valueOf`. For example, `Date` represents a value by returning a unix\n\t   * timestamp for `valueOf`:\n\t   *\n\t   *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...\n\t   *     var date2 = new Date(1234567890000);\n\t   *     date1.valueOf(); // 1234567890000\n\t   *     assert( date1 !== date2 );\n\t   *     assert( Immutable.is( date1, date2 ) );\n\t   *\n\t   * Note: overriding `valueOf` may have other implications if you use this object\n\t   * where JavaScript expects a primitive, such as implicit string coercion.\n\t   *\n\t   * For more complex types, especially collections, implementing `valueOf` may\n\t   * not be performant. An alternative is to implement `equals` and `hashCode`.\n\t   *\n\t   * `equals` takes another object, presumably of similar type, and returns true\n\t   * if the it is equal. Equality is symmetrical, so the same result should be\n\t   * returned if this and the argument are flipped.\n\t   *\n\t   *     assert( a.equals(b) === b.equals(a) );\n\t   *\n\t   * `hashCode` returns a 32bit integer number representing the object which will\n\t   * be used to determine how to store the value object in a Map or Set. You must\n\t   * provide both or neither methods, one must not exist without the other.\n\t   *\n\t   * Also, an important relationship between these methods must be upheld: if two\n\t   * values are equal, they *must* return the same hashCode. If the values are not\n\t   * equal, they might have the same hashCode; this is called a hash collision,\n\t   * and while undesirable for performance reasons, it is acceptable.\n\t   *\n\t   *     if (a.equals(b)) {\n\t   *       assert( a.hashCode() === b.hashCode() );\n\t   *     }\n\t   *\n\t   * All Immutable collections implement `equals` and `hashCode`.\n\t   *\n\t   */\n\t  function is(valueA, valueB) {\n\t    if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n\t      return true;\n\t    }\n\t    if (!valueA || !valueB) {\n\t      return false;\n\t    }\n\t    if (typeof valueA.valueOf === 'function' &&\n\t        typeof valueB.valueOf === 'function') {\n\t      valueA = valueA.valueOf();\n\t      valueB = valueB.valueOf();\n\t      if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n\t        return true;\n\t      }\n\t      if (!valueA || !valueB) {\n\t        return false;\n\t      }\n\t    }\n\t    if (typeof valueA.equals === 'function' &&\n\t        typeof valueB.equals === 'function' &&\n\t        valueA.equals(valueB)) {\n\t      return true;\n\t    }\n\t    return false;\n\t  }\n\t\n\t  function deepEqual(a, b) {\n\t    if (a === b) {\n\t      return true;\n\t    }\n\t\n\t    if (\n\t      !isIterable(b) ||\n\t      a.size !== undefined && b.size !== undefined && a.size !== b.size ||\n\t      a.__hash !== undefined && b.__hash !== undefined && a.__hash !== b.__hash ||\n\t      isKeyed(a) !== isKeyed(b) ||\n\t      isIndexed(a) !== isIndexed(b) ||\n\t      isOrdered(a) !== isOrdered(b)\n\t    ) {\n\t      return false;\n\t    }\n\t\n\t    if (a.size === 0 && b.size === 0) {\n\t      return true;\n\t    }\n\t\n\t    var notAssociative = !isAssociative(a);\n\t\n\t    if (isOrdered(a)) {\n\t      var entries = a.entries();\n\t      return b.every(function(v, k)  {\n\t        var entry = entries.next().value;\n\t        return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));\n\t      }) && entries.next().done;\n\t    }\n\t\n\t    var flipped = false;\n\t\n\t    if (a.size === undefined) {\n\t      if (b.size === undefined) {\n\t        if (typeof a.cacheResult === 'function') {\n\t          a.cacheResult();\n\t        }\n\t      } else {\n\t        flipped = true;\n\t        var _ = a;\n\t        a = b;\n\t        b = _;\n\t      }\n\t    }\n\t\n\t    var allEqual = true;\n\t    var bSize = b.__iterate(function(v, k)  {\n\t      if (notAssociative ? !a.has(v) :\n\t          flipped ? !is(v, a.get(k, NOT_SET)) : !is(a.get(k, NOT_SET), v)) {\n\t        allEqual = false;\n\t        return false;\n\t      }\n\t    });\n\t\n\t    return allEqual && a.size === bSize;\n\t  }\n\t\n\t  createClass(Repeat, IndexedSeq);\n\t\n\t    function Repeat(value, times) {\n\t      if (!(this instanceof Repeat)) {\n\t        return new Repeat(value, times);\n\t      }\n\t      this._value = value;\n\t      this.size = times === undefined ? Infinity : Math.max(0, times);\n\t      if (this.size === 0) {\n\t        if (EMPTY_REPEAT) {\n\t          return EMPTY_REPEAT;\n\t        }\n\t        EMPTY_REPEAT = this;\n\t      }\n\t    }\n\t\n\t    Repeat.prototype.toString = function() {\n\t      if (this.size === 0) {\n\t        return 'Repeat []';\n\t      }\n\t      return 'Repeat [ ' + this._value + ' ' + this.size + ' times ]';\n\t    };\n\t\n\t    Repeat.prototype.get = function(index, notSetValue) {\n\t      return this.has(index) ? this._value : notSetValue;\n\t    };\n\t\n\t    Repeat.prototype.includes = function(searchValue) {\n\t      return is(this._value, searchValue);\n\t    };\n\t\n\t    Repeat.prototype.slice = function(begin, end) {\n\t      var size = this.size;\n\t      return wholeSlice(begin, end, size) ? this :\n\t        new Repeat(this._value, resolveEnd(end, size) - resolveBegin(begin, size));\n\t    };\n\t\n\t    Repeat.prototype.reverse = function() {\n\t      return this;\n\t    };\n\t\n\t    Repeat.prototype.indexOf = function(searchValue) {\n\t      if (is(this._value, searchValue)) {\n\t        return 0;\n\t      }\n\t      return -1;\n\t    };\n\t\n\t    Repeat.prototype.lastIndexOf = function(searchValue) {\n\t      if (is(this._value, searchValue)) {\n\t        return this.size;\n\t      }\n\t      return -1;\n\t    };\n\t\n\t    Repeat.prototype.__iterate = function(fn, reverse) {\n\t      for (var ii = 0; ii < this.size; ii++) {\n\t        if (fn(this._value, ii, this) === false) {\n\t          return ii + 1;\n\t        }\n\t      }\n\t      return ii;\n\t    };\n\t\n\t    Repeat.prototype.__iterator = function(type, reverse) {var this$0 = this;\n\t      var ii = 0;\n\t      return new Iterator(function() \n\t        {return ii < this$0.size ? iteratorValue(type, ii++, this$0._value) : iteratorDone()}\n\t      );\n\t    };\n\t\n\t    Repeat.prototype.equals = function(other) {\n\t      return other instanceof Repeat ?\n\t        is(this._value, other._value) :\n\t        deepEqual(other);\n\t    };\n\t\n\t\n\t  var EMPTY_REPEAT;\n\t\n\t  function invariant(condition, error) {\n\t    if (!condition) throw new Error(error);\n\t  }\n\t\n\t  createClass(Range, IndexedSeq);\n\t\n\t    function Range(start, end, step) {\n\t      if (!(this instanceof Range)) {\n\t        return new Range(start, end, step);\n\t      }\n\t      invariant(step !== 0, 'Cannot step a Range by 0');\n\t      start = start || 0;\n\t      if (end === undefined) {\n\t        end = Infinity;\n\t      }\n\t      step = step === undefined ? 1 : Math.abs(step);\n\t      if (end < start) {\n\t        step = -step;\n\t      }\n\t      this._start = start;\n\t      this._end = end;\n\t      this._step = step;\n\t      this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);\n\t      if (this.size === 0) {\n\t        if (EMPTY_RANGE) {\n\t          return EMPTY_RANGE;\n\t        }\n\t        EMPTY_RANGE = this;\n\t      }\n\t    }\n\t\n\t    Range.prototype.toString = function() {\n\t      if (this.size === 0) {\n\t        return 'Range []';\n\t      }\n\t      return 'Range [ ' +\n\t        this._start + '...' + this._end +\n\t        (this._step > 1 ? ' by ' + this._step : '') +\n\t      ' ]';\n\t    };\n\t\n\t    Range.prototype.get = function(index, notSetValue) {\n\t      return this.has(index) ?\n\t        this._start + wrapIndex(this, index) * this._step :\n\t        notSetValue;\n\t    };\n\t\n\t    Range.prototype.includes = function(searchValue) {\n\t      var possibleIndex = (searchValue - this._start) / this._step;\n\t      return possibleIndex >= 0 &&\n\t        possibleIndex < this.size &&\n\t        possibleIndex === Math.floor(possibleIndex);\n\t    };\n\t\n\t    Range.prototype.slice = function(begin, end) {\n\t      if (wholeSlice(begin, end, this.size)) {\n\t        return this;\n\t      }\n\t      begin = resolveBegin(begin, this.size);\n\t      end = resolveEnd(end, this.size);\n\t      if (end <= begin) {\n\t        return new Range(0, 0);\n\t      }\n\t      return new Range(this.get(begin, this._end), this.get(end, this._end), this._step);\n\t    };\n\t\n\t    Range.prototype.indexOf = function(searchValue) {\n\t      var offsetValue = searchValue - this._start;\n\t      if (offsetValue % this._step === 0) {\n\t        var index = offsetValue / this._step;\n\t        if (index >= 0 && index < this.size) {\n\t          return index\n\t        }\n\t      }\n\t      return -1;\n\t    };\n\t\n\t    Range.prototype.lastIndexOf = function(searchValue) {\n\t      return this.indexOf(searchValue);\n\t    };\n\t\n\t    Range.prototype.__iterate = function(fn, reverse) {\n\t      var maxIndex = this.size - 1;\n\t      var step = this._step;\n\t      var value = reverse ? this._start + maxIndex * step : this._start;\n\t      for (var ii = 0; ii <= maxIndex; ii++) {\n\t        if (fn(value, ii, this) === false) {\n\t          return ii + 1;\n\t        }\n\t        value += reverse ? -step : step;\n\t      }\n\t      return ii;\n\t    };\n\t\n\t    Range.prototype.__iterator = function(type, reverse) {\n\t      var maxIndex = this.size - 1;\n\t      var step = this._step;\n\t      var value = reverse ? this._start + maxIndex * step : this._start;\n\t      var ii = 0;\n\t      return new Iterator(function()  {\n\t        var v = value;\n\t        value += reverse ? -step : step;\n\t        return ii > maxIndex ? iteratorDone() : iteratorValue(type, ii++, v);\n\t      });\n\t    };\n\t\n\t    Range.prototype.equals = function(other) {\n\t      return other instanceof Range ?\n\t        this._start === other._start &&\n\t        this._end === other._end &&\n\t        this._step === other._step :\n\t        deepEqual(this, other);\n\t    };\n\t\n\t\n\t  var EMPTY_RANGE;\n\t\n\t  createClass(Collection, Iterable);\n\t    function Collection() {\n\t      throw TypeError('Abstract');\n\t    }\n\t\n\t\n\t  createClass(KeyedCollection, Collection);function KeyedCollection() {}\n\t\n\t  createClass(IndexedCollection, Collection);function IndexedCollection() {}\n\t\n\t  createClass(SetCollection, Collection);function SetCollection() {}\n\t\n\t\n\t  Collection.Keyed = KeyedCollection;\n\t  Collection.Indexed = IndexedCollection;\n\t  Collection.Set = SetCollection;\n\t\n\t  var imul =\n\t    typeof Math.imul === 'function' && Math.imul(0xffffffff, 2) === -2 ?\n\t    Math.imul :\n\t    function imul(a, b) {\n\t      a = a | 0; // int\n\t      b = b | 0; // int\n\t      var c = a & 0xffff;\n\t      var d = b & 0xffff;\n\t      // Shift by 0 fixes the sign on the high part.\n\t      return (c * d) + ((((a >>> 16) * d + c * (b >>> 16)) << 16) >>> 0) | 0; // int\n\t    };\n\t\n\t  // v8 has an optimization for storing 31-bit signed numbers.\n\t  // Values which have either 00 or 11 as the high order bits qualify.\n\t  // This function drops the highest order bit in a signed number, maintaining\n\t  // the sign bit.\n\t  function smi(i32) {\n\t    return ((i32 >>> 1) & 0x40000000) | (i32 & 0xBFFFFFFF);\n\t  }\n\t\n\t  function hash(o) {\n\t    if (o === false || o === null || o === undefined) {\n\t      return 0;\n\t    }\n\t    if (typeof o.valueOf === 'function') {\n\t      o = o.valueOf();\n\t      if (o === false || o === null || o === undefined) {\n\t        return 0;\n\t      }\n\t    }\n\t    if (o === true) {\n\t      return 1;\n\t    }\n\t    var type = typeof o;\n\t    if (type === 'number') {\n\t      var h = o | 0;\n\t      if (h !== o) {\n\t        h ^= o * 0xFFFFFFFF;\n\t      }\n\t      while (o > 0xFFFFFFFF) {\n\t        o /= 0xFFFFFFFF;\n\t        h ^= o;\n\t      }\n\t      return smi(h);\n\t    }\n\t    if (type === 'string') {\n\t      return o.length > STRING_HASH_CACHE_MIN_STRLEN ? cachedHashString(o) : hashString(o);\n\t    }\n\t    if (typeof o.hashCode === 'function') {\n\t      return o.hashCode();\n\t    }\n\t    if (type === 'object') {\n\t      return hashJSObj(o);\n\t    }\n\t    if (typeof o.toString === 'function') {\n\t      return hashString(o.toString());\n\t    }\n\t    throw new Error('Value type ' + type + ' cannot be hashed.');\n\t  }\n\t\n\t  function cachedHashString(string) {\n\t    var hash = stringHashCache[string];\n\t    if (hash === undefined) {\n\t      hash = hashString(string);\n\t      if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {\n\t        STRING_HASH_CACHE_SIZE = 0;\n\t        stringHashCache = {};\n\t      }\n\t      STRING_HASH_CACHE_SIZE++;\n\t      stringHashCache[string] = hash;\n\t    }\n\t    return hash;\n\t  }\n\t\n\t  // http://jsperf.com/hashing-strings\n\t  function hashString(string) {\n\t    // This is the hash from JVM\n\t    // The hash code for a string is computed as\n\t    // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],\n\t    // where s[i] is the ith character of the string and n is the length of\n\t    // the string. We \"mod\" the result to make it between 0 (inclusive) and 2^31\n\t    // (exclusive) by dropping high bits.\n\t    var hash = 0;\n\t    for (var ii = 0; ii < string.length; ii++) {\n\t      hash = 31 * hash + string.charCodeAt(ii) | 0;\n\t    }\n\t    return smi(hash);\n\t  }\n\t\n\t  function hashJSObj(obj) {\n\t    var hash;\n\t    if (usingWeakMap) {\n\t      hash = weakMap.get(obj);\n\t      if (hash !== undefined) {\n\t        return hash;\n\t      }\n\t    }\n\t\n\t    hash = obj[UID_HASH_KEY];\n\t    if (hash !== undefined) {\n\t      return hash;\n\t    }\n\t\n\t    if (!canDefineProperty) {\n\t      hash = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];\n\t      if (hash !== undefined) {\n\t        return hash;\n\t      }\n\t\n\t      hash = getIENodeHash(obj);\n\t      if (hash !== undefined) {\n\t        return hash;\n\t      }\n\t    }\n\t\n\t    hash = ++objHashUID;\n\t    if (objHashUID & 0x40000000) {\n\t      objHashUID = 0;\n\t    }\n\t\n\t    if (usingWeakMap) {\n\t      weakMap.set(obj, hash);\n\t    } else if (isExtensible !== undefined && isExtensible(obj) === false) {\n\t      throw new Error('Non-extensible objects are not allowed as keys.');\n\t    } else if (canDefineProperty) {\n\t      Object.defineProperty(obj, UID_HASH_KEY, {\n\t        'enumerable': false,\n\t        'configurable': false,\n\t        'writable': false,\n\t        'value': hash\n\t      });\n\t    } else if (obj.propertyIsEnumerable !== undefined &&\n\t               obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable) {\n\t      // Since we can't define a non-enumerable property on the object\n\t      // we'll hijack one of the less-used non-enumerable properties to\n\t      // save our hash on it. Since this is a function it will not show up in\n\t      // `JSON.stringify` which is what we want.\n\t      obj.propertyIsEnumerable = function() {\n\t        return this.constructor.prototype.propertyIsEnumerable.apply(this, arguments);\n\t      };\n\t      obj.propertyIsEnumerable[UID_HASH_KEY] = hash;\n\t    } else if (obj.nodeType !== undefined) {\n\t      // At this point we couldn't get the IE `uniqueID` to use as a hash\n\t      // and we couldn't use a non-enumerable property to exploit the\n\t      // dontEnum bug so we simply add the `UID_HASH_KEY` on the node\n\t      // itself.\n\t      obj[UID_HASH_KEY] = hash;\n\t    } else {\n\t      throw new Error('Unable to set a non-enumerable property on object.');\n\t    }\n\t\n\t    return hash;\n\t  }\n\t\n\t  // Get references to ES5 object methods.\n\t  var isExtensible = Object.isExtensible;\n\t\n\t  // True if Object.defineProperty works as expected. IE8 fails this test.\n\t  var canDefineProperty = (function() {\n\t    try {\n\t      Object.defineProperty({}, '@', {});\n\t      return true;\n\t    } catch (e) {\n\t      return false;\n\t    }\n\t  }());\n\t\n\t  // IE has a `uniqueID` property on DOM nodes. We can construct the hash from it\n\t  // and avoid memory leaks from the IE cloneNode bug.\n\t  function getIENodeHash(node) {\n\t    if (node && node.nodeType > 0) {\n\t      switch (node.nodeType) {\n\t        case 1: // Element\n\t          return node.uniqueID;\n\t        case 9: // Document\n\t          return node.documentElement && node.documentElement.uniqueID;\n\t      }\n\t    }\n\t  }\n\t\n\t  // If possible, use a WeakMap.\n\t  var usingWeakMap = typeof WeakMap === 'function';\n\t  var weakMap;\n\t  if (usingWeakMap) {\n\t    weakMap = new WeakMap();\n\t  }\n\t\n\t  var objHashUID = 0;\n\t\n\t  var UID_HASH_KEY = '__immutablehash__';\n\t  if (typeof Symbol === 'function') {\n\t    UID_HASH_KEY = Symbol(UID_HASH_KEY);\n\t  }\n\t\n\t  var STRING_HASH_CACHE_MIN_STRLEN = 16;\n\t  var STRING_HASH_CACHE_MAX_SIZE = 255;\n\t  var STRING_HASH_CACHE_SIZE = 0;\n\t  var stringHashCache = {};\n\t\n\t  function assertNotInfinite(size) {\n\t    invariant(\n\t      size !== Infinity,\n\t      'Cannot perform this action with an infinite size.'\n\t    );\n\t  }\n\t\n\t  createClass(Map, KeyedCollection);\n\t\n\t    // @pragma Construction\n\t\n\t    function Map(value) {\n\t      return value === null || value === undefined ? emptyMap() :\n\t        isMap(value) && !isOrdered(value) ? value :\n\t        emptyMap().withMutations(function(map ) {\n\t          var iter = KeyedIterable(value);\n\t          assertNotInfinite(iter.size);\n\t          iter.forEach(function(v, k)  {return map.set(k, v)});\n\t        });\n\t    }\n\t\n\t    Map.prototype.toString = function() {\n\t      return this.__toString('Map {', '}');\n\t    };\n\t\n\t    // @pragma Access\n\t\n\t    Map.prototype.get = function(k, notSetValue) {\n\t      return this._root ?\n\t        this._root.get(0, undefined, k, notSetValue) :\n\t        notSetValue;\n\t    };\n\t\n\t    // @pragma Modification\n\t\n\t    Map.prototype.set = function(k, v) {\n\t      return updateMap(this, k, v);\n\t    };\n\t\n\t    Map.prototype.setIn = function(keyPath, v) {\n\t      return this.updateIn(keyPath, NOT_SET, function()  {return v});\n\t    };\n\t\n\t    Map.prototype.remove = function(k) {\n\t      return updateMap(this, k, NOT_SET);\n\t    };\n\t\n\t    Map.prototype.deleteIn = function(keyPath) {\n\t      return this.updateIn(keyPath, function()  {return NOT_SET});\n\t    };\n\t\n\t    Map.prototype.update = function(k, notSetValue, updater) {\n\t      return arguments.length === 1 ?\n\t        k(this) :\n\t        this.updateIn([k], notSetValue, updater);\n\t    };\n\t\n\t    Map.prototype.updateIn = function(keyPath, notSetValue, updater) {\n\t      if (!updater) {\n\t        updater = notSetValue;\n\t        notSetValue = undefined;\n\t      }\n\t      var updatedValue = updateInDeepMap(\n\t        this,\n\t        forceIterator(keyPath),\n\t        notSetValue,\n\t        updater\n\t      );\n\t      return updatedValue === NOT_SET ? undefined : updatedValue;\n\t    };\n\t\n\t    Map.prototype.clear = function() {\n\t      if (this.size === 0) {\n\t        return this;\n\t      }\n\t      if (this.__ownerID) {\n\t        this.size = 0;\n\t        this._root = null;\n\t        this.__hash = undefined;\n\t        this.__altered = true;\n\t        return this;\n\t      }\n\t      return emptyMap();\n\t    };\n\t\n\t    // @pragma Composition\n\t\n\t    Map.prototype.merge = function(/*...iters*/) {\n\t      return mergeIntoMapWith(this, undefined, arguments);\n\t    };\n\t\n\t    Map.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n\t      return mergeIntoMapWith(this, merger, iters);\n\t    };\n\t\n\t    Map.prototype.mergeIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);\n\t      return this.updateIn(\n\t        keyPath,\n\t        emptyMap(),\n\t        function(m ) {return typeof m.merge === 'function' ?\n\t          m.merge.apply(m, iters) :\n\t          iters[iters.length - 1]}\n\t      );\n\t    };\n\t\n\t    Map.prototype.mergeDeep = function(/*...iters*/) {\n\t      return mergeIntoMapWith(this, deepMerger, arguments);\n\t    };\n\t\n\t    Map.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n\t      return mergeIntoMapWith(this, deepMergerWith(merger), iters);\n\t    };\n\t\n\t    Map.prototype.mergeDeepIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);\n\t      return this.updateIn(\n\t        keyPath,\n\t        emptyMap(),\n\t        function(m ) {return typeof m.mergeDeep === 'function' ?\n\t          m.mergeDeep.apply(m, iters) :\n\t          iters[iters.length - 1]}\n\t      );\n\t    };\n\t\n\t    Map.prototype.sort = function(comparator) {\n\t      // Late binding\n\t      return OrderedMap(sortFactory(this, comparator));\n\t    };\n\t\n\t    Map.prototype.sortBy = function(mapper, comparator) {\n\t      // Late binding\n\t      return OrderedMap(sortFactory(this, comparator, mapper));\n\t    };\n\t\n\t    // @pragma Mutability\n\t\n\t    Map.prototype.withMutations = function(fn) {\n\t      var mutable = this.asMutable();\n\t      fn(mutable);\n\t      return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;\n\t    };\n\t\n\t    Map.prototype.asMutable = function() {\n\t      return this.__ownerID ? this : this.__ensureOwner(new OwnerID());\n\t    };\n\t\n\t    Map.prototype.asImmutable = function() {\n\t      return this.__ensureOwner();\n\t    };\n\t\n\t    Map.prototype.wasAltered = function() {\n\t      return this.__altered;\n\t    };\n\t\n\t    Map.prototype.__iterator = function(type, reverse) {\n\t      return new MapIterator(this, type, reverse);\n\t    };\n\t\n\t    Map.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n\t      var iterations = 0;\n\t      this._root && this._root.iterate(function(entry ) {\n\t        iterations++;\n\t        return fn(entry[1], entry[0], this$0);\n\t      }, reverse);\n\t      return iterations;\n\t    };\n\t\n\t    Map.prototype.__ensureOwner = function(ownerID) {\n\t      if (ownerID === this.__ownerID) {\n\t        return this;\n\t      }\n\t      if (!ownerID) {\n\t        this.__ownerID = ownerID;\n\t        this.__altered = false;\n\t        return this;\n\t      }\n\t      return makeMap(this.size, this._root, ownerID, this.__hash);\n\t    };\n\t\n\t\n\t  function isMap(maybeMap) {\n\t    return !!(maybeMap && maybeMap[IS_MAP_SENTINEL]);\n\t  }\n\t\n\t  Map.isMap = isMap;\n\t\n\t  var IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';\n\t\n\t  var MapPrototype = Map.prototype;\n\t  MapPrototype[IS_MAP_SENTINEL] = true;\n\t  MapPrototype[DELETE] = MapPrototype.remove;\n\t  MapPrototype.removeIn = MapPrototype.deleteIn;\n\t\n\t\n\t  // #pragma Trie Nodes\n\t\n\t\n\t\n\t    function ArrayMapNode(ownerID, entries) {\n\t      this.ownerID = ownerID;\n\t      this.entries = entries;\n\t    }\n\t\n\t    ArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n\t      var entries = this.entries;\n\t      for (var ii = 0, len = entries.length; ii < len; ii++) {\n\t        if (is(key, entries[ii][0])) {\n\t          return entries[ii][1];\n\t        }\n\t      }\n\t      return notSetValue;\n\t    };\n\t\n\t    ArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n\t      var removed = value === NOT_SET;\n\t\n\t      var entries = this.entries;\n\t      var idx = 0;\n\t      for (var len = entries.length; idx < len; idx++) {\n\t        if (is(key, entries[idx][0])) {\n\t          break;\n\t        }\n\t      }\n\t      var exists = idx < len;\n\t\n\t      if (exists ? entries[idx][1] === value : removed) {\n\t        return this;\n\t      }\n\t\n\t      SetRef(didAlter);\n\t      (removed || !exists) && SetRef(didChangeSize);\n\t\n\t      if (removed && entries.length === 1) {\n\t        return; // undefined\n\t      }\n\t\n\t      if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {\n\t        return createNodes(ownerID, entries, key, value);\n\t      }\n\t\n\t      var isEditable = ownerID && ownerID === this.ownerID;\n\t      var newEntries = isEditable ? entries : arrCopy(entries);\n\t\n\t      if (exists) {\n\t        if (removed) {\n\t          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());\n\t        } else {\n\t          newEntries[idx] = [key, value];\n\t        }\n\t      } else {\n\t        newEntries.push([key, value]);\n\t      }\n\t\n\t      if (isEditable) {\n\t        this.entries = newEntries;\n\t        return this;\n\t      }\n\t\n\t      return new ArrayMapNode(ownerID, newEntries);\n\t    };\n\t\n\t\n\t\n\t\n\t    function BitmapIndexedNode(ownerID, bitmap, nodes) {\n\t      this.ownerID = ownerID;\n\t      this.bitmap = bitmap;\n\t      this.nodes = nodes;\n\t    }\n\t\n\t    BitmapIndexedNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n\t      if (keyHash === undefined) {\n\t        keyHash = hash(key);\n\t      }\n\t      var bit = (1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK));\n\t      var bitmap = this.bitmap;\n\t      return (bitmap & bit) === 0 ? notSetValue :\n\t        this.nodes[popCount(bitmap & (bit - 1))].get(shift + SHIFT, keyHash, key, notSetValue);\n\t    };\n\t\n\t    BitmapIndexedNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n\t      if (keyHash === undefined) {\n\t        keyHash = hash(key);\n\t      }\n\t      var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\t      var bit = 1 << keyHashFrag;\n\t      var bitmap = this.bitmap;\n\t      var exists = (bitmap & bit) !== 0;\n\t\n\t      if (!exists && value === NOT_SET) {\n\t        return this;\n\t      }\n\t\n\t      var idx = popCount(bitmap & (bit - 1));\n\t      var nodes = this.nodes;\n\t      var node = exists ? nodes[idx] : undefined;\n\t      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);\n\t\n\t      if (newNode === node) {\n\t        return this;\n\t      }\n\t\n\t      if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {\n\t        return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);\n\t      }\n\t\n\t      if (exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1])) {\n\t        return nodes[idx ^ 1];\n\t      }\n\t\n\t      if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {\n\t        return newNode;\n\t      }\n\t\n\t      var isEditable = ownerID && ownerID === this.ownerID;\n\t      var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;\n\t      var newNodes = exists ? newNode ?\n\t        setIn(nodes, idx, newNode, isEditable) :\n\t        spliceOut(nodes, idx, isEditable) :\n\t        spliceIn(nodes, idx, newNode, isEditable);\n\t\n\t      if (isEditable) {\n\t        this.bitmap = newBitmap;\n\t        this.nodes = newNodes;\n\t        return this;\n\t      }\n\t\n\t      return new BitmapIndexedNode(ownerID, newBitmap, newNodes);\n\t    };\n\t\n\t\n\t\n\t\n\t    function HashArrayMapNode(ownerID, count, nodes) {\n\t      this.ownerID = ownerID;\n\t      this.count = count;\n\t      this.nodes = nodes;\n\t    }\n\t\n\t    HashArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n\t      if (keyHash === undefined) {\n\t        keyHash = hash(key);\n\t      }\n\t      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\t      var node = this.nodes[idx];\n\t      return node ? node.get(shift + SHIFT, keyHash, key, notSetValue) : notSetValue;\n\t    };\n\t\n\t    HashArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n\t      if (keyHash === undefined) {\n\t        keyHash = hash(key);\n\t      }\n\t      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\t      var removed = value === NOT_SET;\n\t      var nodes = this.nodes;\n\t      var node = nodes[idx];\n\t\n\t      if (removed && !node) {\n\t        return this;\n\t      }\n\t\n\t      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);\n\t      if (newNode === node) {\n\t        return this;\n\t      }\n\t\n\t      var newCount = this.count;\n\t      if (!node) {\n\t        newCount++;\n\t      } else if (!newNode) {\n\t        newCount--;\n\t        if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {\n\t          return packNodes(ownerID, nodes, newCount, idx);\n\t        }\n\t      }\n\t\n\t      var isEditable = ownerID && ownerID === this.ownerID;\n\t      var newNodes = setIn(nodes, idx, newNode, isEditable);\n\t\n\t      if (isEditable) {\n\t        this.count = newCount;\n\t        this.nodes = newNodes;\n\t        return this;\n\t      }\n\t\n\t      return new HashArrayMapNode(ownerID, newCount, newNodes);\n\t    };\n\t\n\t\n\t\n\t\n\t    function HashCollisionNode(ownerID, keyHash, entries) {\n\t      this.ownerID = ownerID;\n\t      this.keyHash = keyHash;\n\t      this.entries = entries;\n\t    }\n\t\n\t    HashCollisionNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n\t      var entries = this.entries;\n\t      for (var ii = 0, len = entries.length; ii < len; ii++) {\n\t        if (is(key, entries[ii][0])) {\n\t          return entries[ii][1];\n\t        }\n\t      }\n\t      return notSetValue;\n\t    };\n\t\n\t    HashCollisionNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n\t      if (keyHash === undefined) {\n\t        keyHash = hash(key);\n\t      }\n\t\n\t      var removed = value === NOT_SET;\n\t\n\t      if (keyHash !== this.keyHash) {\n\t        if (removed) {\n\t          return this;\n\t        }\n\t        SetRef(didAlter);\n\t        SetRef(didChangeSize);\n\t        return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);\n\t      }\n\t\n\t      var entries = this.entries;\n\t      var idx = 0;\n\t      for (var len = entries.length; idx < len; idx++) {\n\t        if (is(key, entries[idx][0])) {\n\t          break;\n\t        }\n\t      }\n\t      var exists = idx < len;\n\t\n\t      if (exists ? entries[idx][1] === value : removed) {\n\t        return this;\n\t      }\n\t\n\t      SetRef(didAlter);\n\t      (removed || !exists) && SetRef(didChangeSize);\n\t\n\t      if (removed && len === 2) {\n\t        return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);\n\t      }\n\t\n\t      var isEditable = ownerID && ownerID === this.ownerID;\n\t      var newEntries = isEditable ? entries : arrCopy(entries);\n\t\n\t      if (exists) {\n\t        if (removed) {\n\t          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());\n\t        } else {\n\t          newEntries[idx] = [key, value];\n\t        }\n\t      } else {\n\t        newEntries.push([key, value]);\n\t      }\n\t\n\t      if (isEditable) {\n\t        this.entries = newEntries;\n\t        return this;\n\t      }\n\t\n\t      return new HashCollisionNode(ownerID, this.keyHash, newEntries);\n\t    };\n\t\n\t\n\t\n\t\n\t    function ValueNode(ownerID, keyHash, entry) {\n\t      this.ownerID = ownerID;\n\t      this.keyHash = keyHash;\n\t      this.entry = entry;\n\t    }\n\t\n\t    ValueNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n\t      return is(key, this.entry[0]) ? this.entry[1] : notSetValue;\n\t    };\n\t\n\t    ValueNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n\t      var removed = value === NOT_SET;\n\t      var keyMatch = is(key, this.entry[0]);\n\t      if (keyMatch ? value === this.entry[1] : removed) {\n\t        return this;\n\t      }\n\t\n\t      SetRef(didAlter);\n\t\n\t      if (removed) {\n\t        SetRef(didChangeSize);\n\t        return; // undefined\n\t      }\n\t\n\t      if (keyMatch) {\n\t        if (ownerID && ownerID === this.ownerID) {\n\t          this.entry[1] = value;\n\t          return this;\n\t        }\n\t        return new ValueNode(ownerID, this.keyHash, [key, value]);\n\t      }\n\t\n\t      SetRef(didChangeSize);\n\t      return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);\n\t    };\n\t\n\t\n\t\n\t  // #pragma Iterators\n\t\n\t  ArrayMapNode.prototype.iterate =\n\t  HashCollisionNode.prototype.iterate = function (fn, reverse) {\n\t    var entries = this.entries;\n\t    for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {\n\t      if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {\n\t        return false;\n\t      }\n\t    }\n\t  }\n\t\n\t  BitmapIndexedNode.prototype.iterate =\n\t  HashArrayMapNode.prototype.iterate = function (fn, reverse) {\n\t    var nodes = this.nodes;\n\t    for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {\n\t      var node = nodes[reverse ? maxIndex - ii : ii];\n\t      if (node && node.iterate(fn, reverse) === false) {\n\t        return false;\n\t      }\n\t    }\n\t  }\n\t\n\t  ValueNode.prototype.iterate = function (fn, reverse) {\n\t    return fn(this.entry);\n\t  }\n\t\n\t  createClass(MapIterator, Iterator);\n\t\n\t    function MapIterator(map, type, reverse) {\n\t      this._type = type;\n\t      this._reverse = reverse;\n\t      this._stack = map._root && mapIteratorFrame(map._root);\n\t    }\n\t\n\t    MapIterator.prototype.next = function() {\n\t      var type = this._type;\n\t      var stack = this._stack;\n\t      while (stack) {\n\t        var node = stack.node;\n\t        var index = stack.index++;\n\t        var maxIndex;\n\t        if (node.entry) {\n\t          if (index === 0) {\n\t            return mapIteratorValue(type, node.entry);\n\t          }\n\t        } else if (node.entries) {\n\t          maxIndex = node.entries.length - 1;\n\t          if (index <= maxIndex) {\n\t            return mapIteratorValue(type, node.entries[this._reverse ? maxIndex - index : index]);\n\t          }\n\t        } else {\n\t          maxIndex = node.nodes.length - 1;\n\t          if (index <= maxIndex) {\n\t            var subNode = node.nodes[this._reverse ? maxIndex - index : index];\n\t            if (subNode) {\n\t              if (subNode.entry) {\n\t                return mapIteratorValue(type, subNode.entry);\n\t              }\n\t              stack = this._stack = mapIteratorFrame(subNode, stack);\n\t            }\n\t            continue;\n\t          }\n\t        }\n\t        stack = this._stack = this._stack.__prev;\n\t      }\n\t      return iteratorDone();\n\t    };\n\t\n\t\n\t  function mapIteratorValue(type, entry) {\n\t    return iteratorValue(type, entry[0], entry[1]);\n\t  }\n\t\n\t  function mapIteratorFrame(node, prev) {\n\t    return {\n\t      node: node,\n\t      index: 0,\n\t      __prev: prev\n\t    };\n\t  }\n\t\n\t  function makeMap(size, root, ownerID, hash) {\n\t    var map = Object.create(MapPrototype);\n\t    map.size = size;\n\t    map._root = root;\n\t    map.__ownerID = ownerID;\n\t    map.__hash = hash;\n\t    map.__altered = false;\n\t    return map;\n\t  }\n\t\n\t  var EMPTY_MAP;\n\t  function emptyMap() {\n\t    return EMPTY_MAP || (EMPTY_MAP = makeMap(0));\n\t  }\n\t\n\t  function updateMap(map, k, v) {\n\t    var newRoot;\n\t    var newSize;\n\t    if (!map._root) {\n\t      if (v === NOT_SET) {\n\t        return map;\n\t      }\n\t      newSize = 1;\n\t      newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);\n\t    } else {\n\t      var didChangeSize = MakeRef(CHANGE_LENGTH);\n\t      var didAlter = MakeRef(DID_ALTER);\n\t      newRoot = updateNode(map._root, map.__ownerID, 0, undefined, k, v, didChangeSize, didAlter);\n\t      if (!didAlter.value) {\n\t        return map;\n\t      }\n\t      newSize = map.size + (didChangeSize.value ? v === NOT_SET ? -1 : 1 : 0);\n\t    }\n\t    if (map.__ownerID) {\n\t      map.size = newSize;\n\t      map._root = newRoot;\n\t      map.__hash = undefined;\n\t      map.__altered = true;\n\t      return map;\n\t    }\n\t    return newRoot ? makeMap(newSize, newRoot) : emptyMap();\n\t  }\n\t\n\t  function updateNode(node, ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n\t    if (!node) {\n\t      if (value === NOT_SET) {\n\t        return node;\n\t      }\n\t      SetRef(didAlter);\n\t      SetRef(didChangeSize);\n\t      return new ValueNode(ownerID, keyHash, [key, value]);\n\t    }\n\t    return node.update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter);\n\t  }\n\t\n\t  function isLeafNode(node) {\n\t    return node.constructor === ValueNode || node.constructor === HashCollisionNode;\n\t  }\n\t\n\t  function mergeIntoNode(node, ownerID, shift, keyHash, entry) {\n\t    if (node.keyHash === keyHash) {\n\t      return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);\n\t    }\n\t\n\t    var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;\n\t    var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\t\n\t    var newNode;\n\t    var nodes = idx1 === idx2 ?\n\t      [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)] :\n\t      ((newNode = new ValueNode(ownerID, keyHash, entry)), idx1 < idx2 ? [node, newNode] : [newNode, node]);\n\t\n\t    return new BitmapIndexedNode(ownerID, (1 << idx1) | (1 << idx2), nodes);\n\t  }\n\t\n\t  function createNodes(ownerID, entries, key, value) {\n\t    if (!ownerID) {\n\t      ownerID = new OwnerID();\n\t    }\n\t    var node = new ValueNode(ownerID, hash(key), [key, value]);\n\t    for (var ii = 0; ii < entries.length; ii++) {\n\t      var entry = entries[ii];\n\t      node = node.update(ownerID, 0, undefined, entry[0], entry[1]);\n\t    }\n\t    return node;\n\t  }\n\t\n\t  function packNodes(ownerID, nodes, count, excluding) {\n\t    var bitmap = 0;\n\t    var packedII = 0;\n\t    var packedNodes = new Array(count);\n\t    for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {\n\t      var node = nodes[ii];\n\t      if (node !== undefined && ii !== excluding) {\n\t        bitmap |= bit;\n\t        packedNodes[packedII++] = node;\n\t      }\n\t    }\n\t    return new BitmapIndexedNode(ownerID, bitmap, packedNodes);\n\t  }\n\t\n\t  function expandNodes(ownerID, nodes, bitmap, including, node) {\n\t    var count = 0;\n\t    var expandedNodes = new Array(SIZE);\n\t    for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {\n\t      expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;\n\t    }\n\t    expandedNodes[including] = node;\n\t    return new HashArrayMapNode(ownerID, count + 1, expandedNodes);\n\t  }\n\t\n\t  function mergeIntoMapWith(map, merger, iterables) {\n\t    var iters = [];\n\t    for (var ii = 0; ii < iterables.length; ii++) {\n\t      var value = iterables[ii];\n\t      var iter = KeyedIterable(value);\n\t      if (!isIterable(value)) {\n\t        iter = iter.map(function(v ) {return fromJS(v)});\n\t      }\n\t      iters.push(iter);\n\t    }\n\t    return mergeIntoCollectionWith(map, merger, iters);\n\t  }\n\t\n\t  function deepMerger(existing, value, key) {\n\t    return existing && existing.mergeDeep && isIterable(value) ?\n\t      existing.mergeDeep(value) :\n\t      is(existing, value) ? existing : value;\n\t  }\n\t\n\t  function deepMergerWith(merger) {\n\t    return function(existing, value, key)  {\n\t      if (existing && existing.mergeDeepWith && isIterable(value)) {\n\t        return existing.mergeDeepWith(merger, value);\n\t      }\n\t      var nextValue = merger(existing, value, key);\n\t      return is(existing, nextValue) ? existing : nextValue;\n\t    };\n\t  }\n\t\n\t  function mergeIntoCollectionWith(collection, merger, iters) {\n\t    iters = iters.filter(function(x ) {return x.size !== 0});\n\t    if (iters.length === 0) {\n\t      return collection;\n\t    }\n\t    if (collection.size === 0 && !collection.__ownerID && iters.length === 1) {\n\t      return collection.constructor(iters[0]);\n\t    }\n\t    return collection.withMutations(function(collection ) {\n\t      var mergeIntoMap = merger ?\n\t        function(value, key)  {\n\t          collection.update(key, NOT_SET, function(existing )\n\t            {return existing === NOT_SET ? value : merger(existing, value, key)}\n\t          );\n\t        } :\n\t        function(value, key)  {\n\t          collection.set(key, value);\n\t        }\n\t      for (var ii = 0; ii < iters.length; ii++) {\n\t        iters[ii].forEach(mergeIntoMap);\n\t      }\n\t    });\n\t  }\n\t\n\t  function updateInDeepMap(existing, keyPathIter, notSetValue, updater) {\n\t    var isNotSet = existing === NOT_SET;\n\t    var step = keyPathIter.next();\n\t    if (step.done) {\n\t      var existingValue = isNotSet ? notSetValue : existing;\n\t      var newValue = updater(existingValue);\n\t      return newValue === existingValue ? existing : newValue;\n\t    }\n\t    invariant(\n\t      isNotSet || (existing && existing.set),\n\t      'invalid keyPath'\n\t    );\n\t    var key = step.value;\n\t    var nextExisting = isNotSet ? NOT_SET : existing.get(key, NOT_SET);\n\t    var nextUpdated = updateInDeepMap(\n\t      nextExisting,\n\t      keyPathIter,\n\t      notSetValue,\n\t      updater\n\t    );\n\t    return nextUpdated === nextExisting ? existing :\n\t      nextUpdated === NOT_SET ? existing.remove(key) :\n\t      (isNotSet ? emptyMap() : existing).set(key, nextUpdated);\n\t  }\n\t\n\t  function popCount(x) {\n\t    x = x - ((x >> 1) & 0x55555555);\n\t    x = (x & 0x33333333) + ((x >> 2) & 0x33333333);\n\t    x = (x + (x >> 4)) & 0x0f0f0f0f;\n\t    x = x + (x >> 8);\n\t    x = x + (x >> 16);\n\t    return x & 0x7f;\n\t  }\n\t\n\t  function setIn(array, idx, val, canEdit) {\n\t    var newArray = canEdit ? array : arrCopy(array);\n\t    newArray[idx] = val;\n\t    return newArray;\n\t  }\n\t\n\t  function spliceIn(array, idx, val, canEdit) {\n\t    var newLen = array.length + 1;\n\t    if (canEdit && idx + 1 === newLen) {\n\t      array[idx] = val;\n\t      return array;\n\t    }\n\t    var newArray = new Array(newLen);\n\t    var after = 0;\n\t    for (var ii = 0; ii < newLen; ii++) {\n\t      if (ii === idx) {\n\t        newArray[ii] = val;\n\t        after = -1;\n\t      } else {\n\t        newArray[ii] = array[ii + after];\n\t      }\n\t    }\n\t    return newArray;\n\t  }\n\t\n\t  function spliceOut(array, idx, canEdit) {\n\t    var newLen = array.length - 1;\n\t    if (canEdit && idx === newLen) {\n\t      array.pop();\n\t      return array;\n\t    }\n\t    var newArray = new Array(newLen);\n\t    var after = 0;\n\t    for (var ii = 0; ii < newLen; ii++) {\n\t      if (ii === idx) {\n\t        after = 1;\n\t      }\n\t      newArray[ii] = array[ii + after];\n\t    }\n\t    return newArray;\n\t  }\n\t\n\t  var MAX_ARRAY_MAP_SIZE = SIZE / 4;\n\t  var MAX_BITMAP_INDEXED_SIZE = SIZE / 2;\n\t  var MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;\n\t\n\t  createClass(List, IndexedCollection);\n\t\n\t    // @pragma Construction\n\t\n\t    function List(value) {\n\t      var empty = emptyList();\n\t      if (value === null || value === undefined) {\n\t        return empty;\n\t      }\n\t      if (isList(value)) {\n\t        return value;\n\t      }\n\t      var iter = IndexedIterable(value);\n\t      var size = iter.size;\n\t      if (size === 0) {\n\t        return empty;\n\t      }\n\t      assertNotInfinite(size);\n\t      if (size > 0 && size < SIZE) {\n\t        return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));\n\t      }\n\t      return empty.withMutations(function(list ) {\n\t        list.setSize(size);\n\t        iter.forEach(function(v, i)  {return list.set(i, v)});\n\t      });\n\t    }\n\t\n\t    List.of = function(/*...values*/) {\n\t      return this(arguments);\n\t    };\n\t\n\t    List.prototype.toString = function() {\n\t      return this.__toString('List [', ']');\n\t    };\n\t\n\t    // @pragma Access\n\t\n\t    List.prototype.get = function(index, notSetValue) {\n\t      index = wrapIndex(this, index);\n\t      if (index >= 0 && index < this.size) {\n\t        index += this._origin;\n\t        var node = listNodeFor(this, index);\n\t        return node && node.array[index & MASK];\n\t      }\n\t      return notSetValue;\n\t    };\n\t\n\t    // @pragma Modification\n\t\n\t    List.prototype.set = function(index, value) {\n\t      return updateList(this, index, value);\n\t    };\n\t\n\t    List.prototype.remove = function(index) {\n\t      return !this.has(index) ? this :\n\t        index === 0 ? this.shift() :\n\t        index === this.size - 1 ? this.pop() :\n\t        this.splice(index, 1);\n\t    };\n\t\n\t    List.prototype.insert = function(index, value) {\n\t      return this.splice(index, 0, value);\n\t    };\n\t\n\t    List.prototype.clear = function() {\n\t      if (this.size === 0) {\n\t        return this;\n\t      }\n\t      if (this.__ownerID) {\n\t        this.size = this._origin = this._capacity = 0;\n\t        this._level = SHIFT;\n\t        this._root = this._tail = null;\n\t        this.__hash = undefined;\n\t        this.__altered = true;\n\t        return this;\n\t      }\n\t      return emptyList();\n\t    };\n\t\n\t    List.prototype.push = function(/*...values*/) {\n\t      var values = arguments;\n\t      var oldSize = this.size;\n\t      return this.withMutations(function(list ) {\n\t        setListBounds(list, 0, oldSize + values.length);\n\t        for (var ii = 0; ii < values.length; ii++) {\n\t          list.set(oldSize + ii, values[ii]);\n\t        }\n\t      });\n\t    };\n\t\n\t    List.prototype.pop = function() {\n\t      return setListBounds(this, 0, -1);\n\t    };\n\t\n\t    List.prototype.unshift = function(/*...values*/) {\n\t      var values = arguments;\n\t      return this.withMutations(function(list ) {\n\t        setListBounds(list, -values.length);\n\t        for (var ii = 0; ii < values.length; ii++) {\n\t          list.set(ii, values[ii]);\n\t        }\n\t      });\n\t    };\n\t\n\t    List.prototype.shift = function() {\n\t      return setListBounds(this, 1);\n\t    };\n\t\n\t    // @pragma Composition\n\t\n\t    List.prototype.merge = function(/*...iters*/) {\n\t      return mergeIntoListWith(this, undefined, arguments);\n\t    };\n\t\n\t    List.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n\t      return mergeIntoListWith(this, merger, iters);\n\t    };\n\t\n\t    List.prototype.mergeDeep = function(/*...iters*/) {\n\t      return mergeIntoListWith(this, deepMerger, arguments);\n\t    };\n\t\n\t    List.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n\t      return mergeIntoListWith(this, deepMergerWith(merger), iters);\n\t    };\n\t\n\t    List.prototype.setSize = function(size) {\n\t      return setListBounds(this, 0, size);\n\t    };\n\t\n\t    // @pragma Iteration\n\t\n\t    List.prototype.slice = function(begin, end) {\n\t      var size = this.size;\n\t      if (wholeSlice(begin, end, size)) {\n\t        return this;\n\t      }\n\t      return setListBounds(\n\t        this,\n\t        resolveBegin(begin, size),\n\t        resolveEnd(end, size)\n\t      );\n\t    };\n\t\n\t    List.prototype.__iterator = function(type, reverse) {\n\t      var index = 0;\n\t      var values = iterateList(this, reverse);\n\t      return new Iterator(function()  {\n\t        var value = values();\n\t        return value === DONE ?\n\t          iteratorDone() :\n\t          iteratorValue(type, index++, value);\n\t      });\n\t    };\n\t\n\t    List.prototype.__iterate = function(fn, reverse) {\n\t      var index = 0;\n\t      var values = iterateList(this, reverse);\n\t      var value;\n\t      while ((value = values()) !== DONE) {\n\t        if (fn(value, index++, this) === false) {\n\t          break;\n\t        }\n\t      }\n\t      return index;\n\t    };\n\t\n\t    List.prototype.__ensureOwner = function(ownerID) {\n\t      if (ownerID === this.__ownerID) {\n\t        return this;\n\t      }\n\t      if (!ownerID) {\n\t        this.__ownerID = ownerID;\n\t        return this;\n\t      }\n\t      return makeList(this._origin, this._capacity, this._level, this._root, this._tail, ownerID, this.__hash);\n\t    };\n\t\n\t\n\t  function isList(maybeList) {\n\t    return !!(maybeList && maybeList[IS_LIST_SENTINEL]);\n\t  }\n\t\n\t  List.isList = isList;\n\t\n\t  var IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';\n\t\n\t  var ListPrototype = List.prototype;\n\t  ListPrototype[IS_LIST_SENTINEL] = true;\n\t  ListPrototype[DELETE] = ListPrototype.remove;\n\t  ListPrototype.setIn = MapPrototype.setIn;\n\t  ListPrototype.deleteIn =\n\t  ListPrototype.removeIn = MapPrototype.removeIn;\n\t  ListPrototype.update = MapPrototype.update;\n\t  ListPrototype.updateIn = MapPrototype.updateIn;\n\t  ListPrototype.mergeIn = MapPrototype.mergeIn;\n\t  ListPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;\n\t  ListPrototype.withMutations = MapPrototype.withMutations;\n\t  ListPrototype.asMutable = MapPrototype.asMutable;\n\t  ListPrototype.asImmutable = MapPrototype.asImmutable;\n\t  ListPrototype.wasAltered = MapPrototype.wasAltered;\n\t\n\t\n\t\n\t    function VNode(array, ownerID) {\n\t      this.array = array;\n\t      this.ownerID = ownerID;\n\t    }\n\t\n\t    // TODO: seems like these methods are very similar\n\t\n\t    VNode.prototype.removeBefore = function(ownerID, level, index) {\n\t      if (index === level ? 1 << level : 0 || this.array.length === 0) {\n\t        return this;\n\t      }\n\t      var originIndex = (index >>> level) & MASK;\n\t      if (originIndex >= this.array.length) {\n\t        return new VNode([], ownerID);\n\t      }\n\t      var removingFirst = originIndex === 0;\n\t      var newChild;\n\t      if (level > 0) {\n\t        var oldChild = this.array[originIndex];\n\t        newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);\n\t        if (newChild === oldChild && removingFirst) {\n\t          return this;\n\t        }\n\t      }\n\t      if (removingFirst && !newChild) {\n\t        return this;\n\t      }\n\t      var editable = editableVNode(this, ownerID);\n\t      if (!removingFirst) {\n\t        for (var ii = 0; ii < originIndex; ii++) {\n\t          editable.array[ii] = undefined;\n\t        }\n\t      }\n\t      if (newChild) {\n\t        editable.array[originIndex] = newChild;\n\t      }\n\t      return editable;\n\t    };\n\t\n\t    VNode.prototype.removeAfter = function(ownerID, level, index) {\n\t      if (index === (level ? 1 << level : 0) || this.array.length === 0) {\n\t        return this;\n\t      }\n\t      var sizeIndex = ((index - 1) >>> level) & MASK;\n\t      if (sizeIndex >= this.array.length) {\n\t        return this;\n\t      }\n\t\n\t      var newChild;\n\t      if (level > 0) {\n\t        var oldChild = this.array[sizeIndex];\n\t        newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);\n\t        if (newChild === oldChild && sizeIndex === this.array.length - 1) {\n\t          return this;\n\t        }\n\t      }\n\t\n\t      var editable = editableVNode(this, ownerID);\n\t      editable.array.splice(sizeIndex + 1);\n\t      if (newChild) {\n\t        editable.array[sizeIndex] = newChild;\n\t      }\n\t      return editable;\n\t    };\n\t\n\t\n\t\n\t  var DONE = {};\n\t\n\t  function iterateList(list, reverse) {\n\t    var left = list._origin;\n\t    var right = list._capacity;\n\t    var tailPos = getTailOffset(right);\n\t    var tail = list._tail;\n\t\n\t    return iterateNodeOrLeaf(list._root, list._level, 0);\n\t\n\t    function iterateNodeOrLeaf(node, level, offset) {\n\t      return level === 0 ?\n\t        iterateLeaf(node, offset) :\n\t        iterateNode(node, level, offset);\n\t    }\n\t\n\t    function iterateLeaf(node, offset) {\n\t      var array = offset === tailPos ? tail && tail.array : node && node.array;\n\t      var from = offset > left ? 0 : left - offset;\n\t      var to = right - offset;\n\t      if (to > SIZE) {\n\t        to = SIZE;\n\t      }\n\t      return function()  {\n\t        if (from === to) {\n\t          return DONE;\n\t        }\n\t        var idx = reverse ? --to : from++;\n\t        return array && array[idx];\n\t      };\n\t    }\n\t\n\t    function iterateNode(node, level, offset) {\n\t      var values;\n\t      var array = node && node.array;\n\t      var from = offset > left ? 0 : (left - offset) >> level;\n\t      var to = ((right - offset) >> level) + 1;\n\t      if (to > SIZE) {\n\t        to = SIZE;\n\t      }\n\t      return function()  {\n\t        do {\n\t          if (values) {\n\t            var value = values();\n\t            if (value !== DONE) {\n\t              return value;\n\t            }\n\t            values = null;\n\t          }\n\t          if (from === to) {\n\t            return DONE;\n\t          }\n\t          var idx = reverse ? --to : from++;\n\t          values = iterateNodeOrLeaf(\n\t            array && array[idx], level - SHIFT, offset + (idx << level)\n\t          );\n\t        } while (true);\n\t      };\n\t    }\n\t  }\n\t\n\t  function makeList(origin, capacity, level, root, tail, ownerID, hash) {\n\t    var list = Object.create(ListPrototype);\n\t    list.size = capacity - origin;\n\t    list._origin = origin;\n\t    list._capacity = capacity;\n\t    list._level = level;\n\t    list._root = root;\n\t    list._tail = tail;\n\t    list.__ownerID = ownerID;\n\t    list.__hash = hash;\n\t    list.__altered = false;\n\t    return list;\n\t  }\n\t\n\t  var EMPTY_LIST;\n\t  function emptyList() {\n\t    return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));\n\t  }\n\t\n\t  function updateList(list, index, value) {\n\t    index = wrapIndex(list, index);\n\t\n\t    if (index !== index) {\n\t      return list;\n\t    }\n\t\n\t    if (index >= list.size || index < 0) {\n\t      return list.withMutations(function(list ) {\n\t        index < 0 ?\n\t          setListBounds(list, index).set(0, value) :\n\t          setListBounds(list, 0, index + 1).set(index, value)\n\t      });\n\t    }\n\t\n\t    index += list._origin;\n\t\n\t    var newTail = list._tail;\n\t    var newRoot = list._root;\n\t    var didAlter = MakeRef(DID_ALTER);\n\t    if (index >= getTailOffset(list._capacity)) {\n\t      newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);\n\t    } else {\n\t      newRoot = updateVNode(newRoot, list.__ownerID, list._level, index, value, didAlter);\n\t    }\n\t\n\t    if (!didAlter.value) {\n\t      return list;\n\t    }\n\t\n\t    if (list.__ownerID) {\n\t      list._root = newRoot;\n\t      list._tail = newTail;\n\t      list.__hash = undefined;\n\t      list.__altered = true;\n\t      return list;\n\t    }\n\t    return makeList(list._origin, list._capacity, list._level, newRoot, newTail);\n\t  }\n\t\n\t  function updateVNode(node, ownerID, level, index, value, didAlter) {\n\t    var idx = (index >>> level) & MASK;\n\t    var nodeHas = node && idx < node.array.length;\n\t    if (!nodeHas && value === undefined) {\n\t      return node;\n\t    }\n\t\n\t    var newNode;\n\t\n\t    if (level > 0) {\n\t      var lowerNode = node && node.array[idx];\n\t      var newLowerNode = updateVNode(lowerNode, ownerID, level - SHIFT, index, value, didAlter);\n\t      if (newLowerNode === lowerNode) {\n\t        return node;\n\t      }\n\t      newNode = editableVNode(node, ownerID);\n\t      newNode.array[idx] = newLowerNode;\n\t      return newNode;\n\t    }\n\t\n\t    if (nodeHas && node.array[idx] === value) {\n\t      return node;\n\t    }\n\t\n\t    SetRef(didAlter);\n\t\n\t    newNode = editableVNode(node, ownerID);\n\t    if (value === undefined && idx === newNode.array.length - 1) {\n\t      newNode.array.pop();\n\t    } else {\n\t      newNode.array[idx] = value;\n\t    }\n\t    return newNode;\n\t  }\n\t\n\t  function editableVNode(node, ownerID) {\n\t    if (ownerID && node && ownerID === node.ownerID) {\n\t      return node;\n\t    }\n\t    return new VNode(node ? node.array.slice() : [], ownerID);\n\t  }\n\t\n\t  function listNodeFor(list, rawIndex) {\n\t    if (rawIndex >= getTailOffset(list._capacity)) {\n\t      return list._tail;\n\t    }\n\t    if (rawIndex < 1 << (list._level + SHIFT)) {\n\t      var node = list._root;\n\t      var level = list._level;\n\t      while (node && level > 0) {\n\t        node = node.array[(rawIndex >>> level) & MASK];\n\t        level -= SHIFT;\n\t      }\n\t      return node;\n\t    }\n\t  }\n\t\n\t  function setListBounds(list, begin, end) {\n\t    // Sanitize begin & end using this shorthand for ToInt32(argument)\n\t    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n\t    if (begin !== undefined) {\n\t      begin = begin | 0;\n\t    }\n\t    if (end !== undefined) {\n\t      end = end | 0;\n\t    }\n\t    var owner = list.__ownerID || new OwnerID();\n\t    var oldOrigin = list._origin;\n\t    var oldCapacity = list._capacity;\n\t    var newOrigin = oldOrigin + begin;\n\t    var newCapacity = end === undefined ? oldCapacity : end < 0 ? oldCapacity + end : oldOrigin + end;\n\t    if (newOrigin === oldOrigin && newCapacity === oldCapacity) {\n\t      return list;\n\t    }\n\t\n\t    // If it's going to end after it starts, it's empty.\n\t    if (newOrigin >= newCapacity) {\n\t      return list.clear();\n\t    }\n\t\n\t    var newLevel = list._level;\n\t    var newRoot = list._root;\n\t\n\t    // New origin might need creating a higher root.\n\t    var offsetShift = 0;\n\t    while (newOrigin + offsetShift < 0) {\n\t      newRoot = new VNode(newRoot && newRoot.array.length ? [undefined, newRoot] : [], owner);\n\t      newLevel += SHIFT;\n\t      offsetShift += 1 << newLevel;\n\t    }\n\t    if (offsetShift) {\n\t      newOrigin += offsetShift;\n\t      oldOrigin += offsetShift;\n\t      newCapacity += offsetShift;\n\t      oldCapacity += offsetShift;\n\t    }\n\t\n\t    var oldTailOffset = getTailOffset(oldCapacity);\n\t    var newTailOffset = getTailOffset(newCapacity);\n\t\n\t    // New size might need creating a higher root.\n\t    while (newTailOffset >= 1 << (newLevel + SHIFT)) {\n\t      newRoot = new VNode(newRoot && newRoot.array.length ? [newRoot] : [], owner);\n\t      newLevel += SHIFT;\n\t    }\n\t\n\t    // Locate or create the new tail.\n\t    var oldTail = list._tail;\n\t    var newTail = newTailOffset < oldTailOffset ?\n\t      listNodeFor(list, newCapacity - 1) :\n\t      newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;\n\t\n\t    // Merge Tail into tree.\n\t    if (oldTail && newTailOffset > oldTailOffset && newOrigin < oldCapacity && oldTail.array.length) {\n\t      newRoot = editableVNode(newRoot, owner);\n\t      var node = newRoot;\n\t      for (var level = newLevel; level > SHIFT; level -= SHIFT) {\n\t        var idx = (oldTailOffset >>> level) & MASK;\n\t        node = node.array[idx] = editableVNode(node.array[idx], owner);\n\t      }\n\t      node.array[(oldTailOffset >>> SHIFT) & MASK] = oldTail;\n\t    }\n\t\n\t    // If the size has been reduced, there's a chance the tail needs to be trimmed.\n\t    if (newCapacity < oldCapacity) {\n\t      newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);\n\t    }\n\t\n\t    // If the new origin is within the tail, then we do not need a root.\n\t    if (newOrigin >= newTailOffset) {\n\t      newOrigin -= newTailOffset;\n\t      newCapacity -= newTailOffset;\n\t      newLevel = SHIFT;\n\t      newRoot = null;\n\t      newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);\n\t\n\t    // Otherwise, if the root has been trimmed, garbage collect.\n\t    } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {\n\t      offsetShift = 0;\n\t\n\t      // Identify the new top root node of the subtree of the old root.\n\t      while (newRoot) {\n\t        var beginIndex = (newOrigin >>> newLevel) & MASK;\n\t        if (beginIndex !== (newTailOffset >>> newLevel) & MASK) {\n\t          break;\n\t        }\n\t        if (beginIndex) {\n\t          offsetShift += (1 << newLevel) * beginIndex;\n\t        }\n\t        newLevel -= SHIFT;\n\t        newRoot = newRoot.array[beginIndex];\n\t      }\n\t\n\t      // Trim the new sides of the new root.\n\t      if (newRoot && newOrigin > oldOrigin) {\n\t        newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);\n\t      }\n\t      if (newRoot && newTailOffset < oldTailOffset) {\n\t        newRoot = newRoot.removeAfter(owner, newLevel, newTailOffset - offsetShift);\n\t      }\n\t      if (offsetShift) {\n\t        newOrigin -= offsetShift;\n\t        newCapacity -= offsetShift;\n\t      }\n\t    }\n\t\n\t    if (list.__ownerID) {\n\t      list.size = newCapacity - newOrigin;\n\t      list._origin = newOrigin;\n\t      list._capacity = newCapacity;\n\t      list._level = newLevel;\n\t      list._root = newRoot;\n\t      list._tail = newTail;\n\t      list.__hash = undefined;\n\t      list.__altered = true;\n\t      return list;\n\t    }\n\t    return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);\n\t  }\n\t\n\t  function mergeIntoListWith(list, merger, iterables) {\n\t    var iters = [];\n\t    var maxSize = 0;\n\t    for (var ii = 0; ii < iterables.length; ii++) {\n\t      var value = iterables[ii];\n\t      var iter = IndexedIterable(value);\n\t      if (iter.size > maxSize) {\n\t        maxSize = iter.size;\n\t      }\n\t      if (!isIterable(value)) {\n\t        iter = iter.map(function(v ) {return fromJS(v)});\n\t      }\n\t      iters.push(iter);\n\t    }\n\t    if (maxSize > list.size) {\n\t      list = list.setSize(maxSize);\n\t    }\n\t    return mergeIntoCollectionWith(list, merger, iters);\n\t  }\n\t\n\t  function getTailOffset(size) {\n\t    return size < SIZE ? 0 : (((size - 1) >>> SHIFT) << SHIFT);\n\t  }\n\t\n\t  createClass(OrderedMap, Map);\n\t\n\t    // @pragma Construction\n\t\n\t    function OrderedMap(value) {\n\t      return value === null || value === undefined ? emptyOrderedMap() :\n\t        isOrderedMap(value) ? value :\n\t        emptyOrderedMap().withMutations(function(map ) {\n\t          var iter = KeyedIterable(value);\n\t          assertNotInfinite(iter.size);\n\t          iter.forEach(function(v, k)  {return map.set(k, v)});\n\t        });\n\t    }\n\t\n\t    OrderedMap.of = function(/*...values*/) {\n\t      return this(arguments);\n\t    };\n\t\n\t    OrderedMap.prototype.toString = function() {\n\t      return this.__toString('OrderedMap {', '}');\n\t    };\n\t\n\t    // @pragma Access\n\t\n\t    OrderedMap.prototype.get = function(k, notSetValue) {\n\t      var index = this._map.get(k);\n\t      return index !== undefined ? this._list.get(index)[1] : notSetValue;\n\t    };\n\t\n\t    // @pragma Modification\n\t\n\t    OrderedMap.prototype.clear = function() {\n\t      if (this.size === 0) {\n\t        return this;\n\t      }\n\t      if (this.__ownerID) {\n\t        this.size = 0;\n\t        this._map.clear();\n\t        this._list.clear();\n\t        return this;\n\t      }\n\t      return emptyOrderedMap();\n\t    };\n\t\n\t    OrderedMap.prototype.set = function(k, v) {\n\t      return updateOrderedMap(this, k, v);\n\t    };\n\t\n\t    OrderedMap.prototype.remove = function(k) {\n\t      return updateOrderedMap(this, k, NOT_SET);\n\t    };\n\t\n\t    OrderedMap.prototype.wasAltered = function() {\n\t      return this._map.wasAltered() || this._list.wasAltered();\n\t    };\n\t\n\t    OrderedMap.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n\t      return this._list.__iterate(\n\t        function(entry ) {return entry && fn(entry[1], entry[0], this$0)},\n\t        reverse\n\t      );\n\t    };\n\t\n\t    OrderedMap.prototype.__iterator = function(type, reverse) {\n\t      return this._list.fromEntrySeq().__iterator(type, reverse);\n\t    };\n\t\n\t    OrderedMap.prototype.__ensureOwner = function(ownerID) {\n\t      if (ownerID === this.__ownerID) {\n\t        return this;\n\t      }\n\t      var newMap = this._map.__ensureOwner(ownerID);\n\t      var newList = this._list.__ensureOwner(ownerID);\n\t      if (!ownerID) {\n\t        this.__ownerID = ownerID;\n\t        this._map = newMap;\n\t        this._list = newList;\n\t        return this;\n\t      }\n\t      return makeOrderedMap(newMap, newList, ownerID, this.__hash);\n\t    };\n\t\n\t\n\t  function isOrderedMap(maybeOrderedMap) {\n\t    return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);\n\t  }\n\t\n\t  OrderedMap.isOrderedMap = isOrderedMap;\n\t\n\t  OrderedMap.prototype[IS_ORDERED_SENTINEL] = true;\n\t  OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;\n\t\n\t\n\t\n\t  function makeOrderedMap(map, list, ownerID, hash) {\n\t    var omap = Object.create(OrderedMap.prototype);\n\t    omap.size = map ? map.size : 0;\n\t    omap._map = map;\n\t    omap._list = list;\n\t    omap.__ownerID = ownerID;\n\t    omap.__hash = hash;\n\t    return omap;\n\t  }\n\t\n\t  var EMPTY_ORDERED_MAP;\n\t  function emptyOrderedMap() {\n\t    return EMPTY_ORDERED_MAP || (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()));\n\t  }\n\t\n\t  function updateOrderedMap(omap, k, v) {\n\t    var map = omap._map;\n\t    var list = omap._list;\n\t    var i = map.get(k);\n\t    var has = i !== undefined;\n\t    var newMap;\n\t    var newList;\n\t    if (v === NOT_SET) { // removed\n\t      if (!has) {\n\t        return omap;\n\t      }\n\t      if (list.size >= SIZE && list.size >= map.size * 2) {\n\t        newList = list.filter(function(entry, idx)  {return entry !== undefined && i !== idx});\n\t        newMap = newList.toKeyedSeq().map(function(entry ) {return entry[0]}).flip().toMap();\n\t        if (omap.__ownerID) {\n\t          newMap.__ownerID = newList.__ownerID = omap.__ownerID;\n\t        }\n\t      } else {\n\t        newMap = map.remove(k);\n\t        newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);\n\t      }\n\t    } else {\n\t      if (has) {\n\t        if (v === list.get(i)[1]) {\n\t          return omap;\n\t        }\n\t        newMap = map;\n\t        newList = list.set(i, [k, v]);\n\t      } else {\n\t        newMap = map.set(k, list.size);\n\t        newList = list.set(list.size, [k, v]);\n\t      }\n\t    }\n\t    if (omap.__ownerID) {\n\t      omap.size = newMap.size;\n\t      omap._map = newMap;\n\t      omap._list = newList;\n\t      omap.__hash = undefined;\n\t      return omap;\n\t    }\n\t    return makeOrderedMap(newMap, newList);\n\t  }\n\t\n\t  createClass(ToKeyedSequence, KeyedSeq);\n\t    function ToKeyedSequence(indexed, useKeys) {\n\t      this._iter = indexed;\n\t      this._useKeys = useKeys;\n\t      this.size = indexed.size;\n\t    }\n\t\n\t    ToKeyedSequence.prototype.get = function(key, notSetValue) {\n\t      return this._iter.get(key, notSetValue);\n\t    };\n\t\n\t    ToKeyedSequence.prototype.has = function(key) {\n\t      return this._iter.has(key);\n\t    };\n\t\n\t    ToKeyedSequence.prototype.valueSeq = function() {\n\t      return this._iter.valueSeq();\n\t    };\n\t\n\t    ToKeyedSequence.prototype.reverse = function() {var this$0 = this;\n\t      var reversedSequence = reverseFactory(this, true);\n\t      if (!this._useKeys) {\n\t        reversedSequence.valueSeq = function()  {return this$0._iter.toSeq().reverse()};\n\t      }\n\t      return reversedSequence;\n\t    };\n\t\n\t    ToKeyedSequence.prototype.map = function(mapper, context) {var this$0 = this;\n\t      var mappedSequence = mapFactory(this, mapper, context);\n\t      if (!this._useKeys) {\n\t        mappedSequence.valueSeq = function()  {return this$0._iter.toSeq().map(mapper, context)};\n\t      }\n\t      return mappedSequence;\n\t    };\n\t\n\t    ToKeyedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n\t      var ii;\n\t      return this._iter.__iterate(\n\t        this._useKeys ?\n\t          function(v, k)  {return fn(v, k, this$0)} :\n\t          ((ii = reverse ? resolveSize(this) : 0),\n\t            function(v ) {return fn(v, reverse ? --ii : ii++, this$0)}),\n\t        reverse\n\t      );\n\t    };\n\t\n\t    ToKeyedSequence.prototype.__iterator = function(type, reverse) {\n\t      if (this._useKeys) {\n\t        return this._iter.__iterator(type, reverse);\n\t      }\n\t      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n\t      var ii = reverse ? resolveSize(this) : 0;\n\t      return new Iterator(function()  {\n\t        var step = iterator.next();\n\t        return step.done ? step :\n\t          iteratorValue(type, reverse ? --ii : ii++, step.value, step);\n\t      });\n\t    };\n\t\n\t  ToKeyedSequence.prototype[IS_ORDERED_SENTINEL] = true;\n\t\n\t\n\t  createClass(ToIndexedSequence, IndexedSeq);\n\t    function ToIndexedSequence(iter) {\n\t      this._iter = iter;\n\t      this.size = iter.size;\n\t    }\n\t\n\t    ToIndexedSequence.prototype.includes = function(value) {\n\t      return this._iter.includes(value);\n\t    };\n\t\n\t    ToIndexedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n\t      var iterations = 0;\n\t      return this._iter.__iterate(function(v ) {return fn(v, iterations++, this$0)}, reverse);\n\t    };\n\t\n\t    ToIndexedSequence.prototype.__iterator = function(type, reverse) {\n\t      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n\t      var iterations = 0;\n\t      return new Iterator(function()  {\n\t        var step = iterator.next();\n\t        return step.done ? step :\n\t          iteratorValue(type, iterations++, step.value, step)\n\t      });\n\t    };\n\t\n\t\n\t\n\t  createClass(ToSetSequence, SetSeq);\n\t    function ToSetSequence(iter) {\n\t      this._iter = iter;\n\t      this.size = iter.size;\n\t    }\n\t\n\t    ToSetSequence.prototype.has = function(key) {\n\t      return this._iter.includes(key);\n\t    };\n\t\n\t    ToSetSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n\t      return this._iter.__iterate(function(v ) {return fn(v, v, this$0)}, reverse);\n\t    };\n\t\n\t    ToSetSequence.prototype.__iterator = function(type, reverse) {\n\t      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n\t      return new Iterator(function()  {\n\t        var step = iterator.next();\n\t        return step.done ? step :\n\t          iteratorValue(type, step.value, step.value, step);\n\t      });\n\t    };\n\t\n\t\n\t\n\t  createClass(FromEntriesSequence, KeyedSeq);\n\t    function FromEntriesSequence(entries) {\n\t      this._iter = entries;\n\t      this.size = entries.size;\n\t    }\n\t\n\t    FromEntriesSequence.prototype.entrySeq = function() {\n\t      return this._iter.toSeq();\n\t    };\n\t\n\t    FromEntriesSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n\t      return this._iter.__iterate(function(entry ) {\n\t        // Check if entry exists first so array access doesn't throw for holes\n\t        // in the parent iteration.\n\t        if (entry) {\n\t          validateEntry(entry);\n\t          var indexedIterable = isIterable(entry);\n\t          return fn(\n\t            indexedIterable ? entry.get(1) : entry[1],\n\t            indexedIterable ? entry.get(0) : entry[0],\n\t            this$0\n\t          );\n\t        }\n\t      }, reverse);\n\t    };\n\t\n\t    FromEntriesSequence.prototype.__iterator = function(type, reverse) {\n\t      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n\t      return new Iterator(function()  {\n\t        while (true) {\n\t          var step = iterator.next();\n\t          if (step.done) {\n\t            return step;\n\t          }\n\t          var entry = step.value;\n\t          // Check if entry exists first so array access doesn't throw for holes\n\t          // in the parent iteration.\n\t          if (entry) {\n\t            validateEntry(entry);\n\t            var indexedIterable = isIterable(entry);\n\t            return iteratorValue(\n\t              type,\n\t              indexedIterable ? entry.get(0) : entry[0],\n\t              indexedIterable ? entry.get(1) : entry[1],\n\t              step\n\t            );\n\t          }\n\t        }\n\t      });\n\t    };\n\t\n\t\n\t  ToIndexedSequence.prototype.cacheResult =\n\t  ToKeyedSequence.prototype.cacheResult =\n\t  ToSetSequence.prototype.cacheResult =\n\t  FromEntriesSequence.prototype.cacheResult =\n\t    cacheResultThrough;\n\t\n\t\n\t  function flipFactory(iterable) {\n\t    var flipSequence = makeSequence(iterable);\n\t    flipSequence._iter = iterable;\n\t    flipSequence.size = iterable.size;\n\t    flipSequence.flip = function()  {return iterable};\n\t    flipSequence.reverse = function () {\n\t      var reversedSequence = iterable.reverse.apply(this); // super.reverse()\n\t      reversedSequence.flip = function()  {return iterable.reverse()};\n\t      return reversedSequence;\n\t    };\n\t    flipSequence.has = function(key ) {return iterable.includes(key)};\n\t    flipSequence.includes = function(key ) {return iterable.has(key)};\n\t    flipSequence.cacheResult = cacheResultThrough;\n\t    flipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n\t      return iterable.__iterate(function(v, k)  {return fn(k, v, this$0) !== false}, reverse);\n\t    }\n\t    flipSequence.__iteratorUncached = function(type, reverse) {\n\t      if (type === ITERATE_ENTRIES) {\n\t        var iterator = iterable.__iterator(type, reverse);\n\t        return new Iterator(function()  {\n\t          var step = iterator.next();\n\t          if (!step.done) {\n\t            var k = step.value[0];\n\t            step.value[0] = step.value[1];\n\t            step.value[1] = k;\n\t          }\n\t          return step;\n\t        });\n\t      }\n\t      return iterable.__iterator(\n\t        type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,\n\t        reverse\n\t      );\n\t    }\n\t    return flipSequence;\n\t  }\n\t\n\t\n\t  function mapFactory(iterable, mapper, context) {\n\t    var mappedSequence = makeSequence(iterable);\n\t    mappedSequence.size = iterable.size;\n\t    mappedSequence.has = function(key ) {return iterable.has(key)};\n\t    mappedSequence.get = function(key, notSetValue)  {\n\t      var v = iterable.get(key, NOT_SET);\n\t      return v === NOT_SET ?\n\t        notSetValue :\n\t        mapper.call(context, v, key, iterable);\n\t    };\n\t    mappedSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n\t      return iterable.__iterate(\n\t        function(v, k, c)  {return fn(mapper.call(context, v, k, c), k, this$0) !== false},\n\t        reverse\n\t      );\n\t    }\n\t    mappedSequence.__iteratorUncached = function (type, reverse) {\n\t      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n\t      return new Iterator(function()  {\n\t        var step = iterator.next();\n\t        if (step.done) {\n\t          return step;\n\t        }\n\t        var entry = step.value;\n\t        var key = entry[0];\n\t        return iteratorValue(\n\t          type,\n\t          key,\n\t          mapper.call(context, entry[1], key, iterable),\n\t          step\n\t        );\n\t      });\n\t    }\n\t    return mappedSequence;\n\t  }\n\t\n\t\n\t  function reverseFactory(iterable, useKeys) {\n\t    var reversedSequence = makeSequence(iterable);\n\t    reversedSequence._iter = iterable;\n\t    reversedSequence.size = iterable.size;\n\t    reversedSequence.reverse = function()  {return iterable};\n\t    if (iterable.flip) {\n\t      reversedSequence.flip = function () {\n\t        var flipSequence = flipFactory(iterable);\n\t        flipSequence.reverse = function()  {return iterable.flip()};\n\t        return flipSequence;\n\t      };\n\t    }\n\t    reversedSequence.get = function(key, notSetValue) \n\t      {return iterable.get(useKeys ? key : -1 - key, notSetValue)};\n\t    reversedSequence.has = function(key )\n\t      {return iterable.has(useKeys ? key : -1 - key)};\n\t    reversedSequence.includes = function(value ) {return iterable.includes(value)};\n\t    reversedSequence.cacheResult = cacheResultThrough;\n\t    reversedSequence.__iterate = function (fn, reverse) {var this$0 = this;\n\t      return iterable.__iterate(function(v, k)  {return fn(v, k, this$0)}, !reverse);\n\t    };\n\t    reversedSequence.__iterator =\n\t      function(type, reverse)  {return iterable.__iterator(type, !reverse)};\n\t    return reversedSequence;\n\t  }\n\t\n\t\n\t  function filterFactory(iterable, predicate, context, useKeys) {\n\t    var filterSequence = makeSequence(iterable);\n\t    if (useKeys) {\n\t      filterSequence.has = function(key ) {\n\t        var v = iterable.get(key, NOT_SET);\n\t        return v !== NOT_SET && !!predicate.call(context, v, key, iterable);\n\t      };\n\t      filterSequence.get = function(key, notSetValue)  {\n\t        var v = iterable.get(key, NOT_SET);\n\t        return v !== NOT_SET && predicate.call(context, v, key, iterable) ?\n\t          v : notSetValue;\n\t      };\n\t    }\n\t    filterSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n\t      var iterations = 0;\n\t      iterable.__iterate(function(v, k, c)  {\n\t        if (predicate.call(context, v, k, c)) {\n\t          iterations++;\n\t          return fn(v, useKeys ? k : iterations - 1, this$0);\n\t        }\n\t      }, reverse);\n\t      return iterations;\n\t    };\n\t    filterSequence.__iteratorUncached = function (type, reverse) {\n\t      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n\t      var iterations = 0;\n\t      return new Iterator(function()  {\n\t        while (true) {\n\t          var step = iterator.next();\n\t          if (step.done) {\n\t            return step;\n\t          }\n\t          var entry = step.value;\n\t          var key = entry[0];\n\t          var value = entry[1];\n\t          if (predicate.call(context, value, key, iterable)) {\n\t            return iteratorValue(type, useKeys ? key : iterations++, value, step);\n\t          }\n\t        }\n\t      });\n\t    }\n\t    return filterSequence;\n\t  }\n\t\n\t\n\t  function countByFactory(iterable, grouper, context) {\n\t    var groups = Map().asMutable();\n\t    iterable.__iterate(function(v, k)  {\n\t      groups.update(\n\t        grouper.call(context, v, k, iterable),\n\t        0,\n\t        function(a ) {return a + 1}\n\t      );\n\t    });\n\t    return groups.asImmutable();\n\t  }\n\t\n\t\n\t  function groupByFactory(iterable, grouper, context) {\n\t    var isKeyedIter = isKeyed(iterable);\n\t    var groups = (isOrdered(iterable) ? OrderedMap() : Map()).asMutable();\n\t    iterable.__iterate(function(v, k)  {\n\t      groups.update(\n\t        grouper.call(context, v, k, iterable),\n\t        function(a ) {return (a = a || [], a.push(isKeyedIter ? [k, v] : v), a)}\n\t      );\n\t    });\n\t    var coerce = iterableClass(iterable);\n\t    return groups.map(function(arr ) {return reify(iterable, coerce(arr))});\n\t  }\n\t\n\t\n\t  function sliceFactory(iterable, begin, end, useKeys) {\n\t    var originalSize = iterable.size;\n\t\n\t    // Sanitize begin & end using this shorthand for ToInt32(argument)\n\t    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n\t    if (begin !== undefined) {\n\t      begin = begin | 0;\n\t    }\n\t    if (end !== undefined) {\n\t      end = end | 0;\n\t    }\n\t\n\t    if (wholeSlice(begin, end, originalSize)) {\n\t      return iterable;\n\t    }\n\t\n\t    var resolvedBegin = resolveBegin(begin, originalSize);\n\t    var resolvedEnd = resolveEnd(end, originalSize);\n\t\n\t    // begin or end will be NaN if they were provided as negative numbers and\n\t    // this iterable's size is unknown. In that case, cache first so there is\n\t    // a known size and these do not resolve to NaN.\n\t    if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {\n\t      return sliceFactory(iterable.toSeq().cacheResult(), begin, end, useKeys);\n\t    }\n\t\n\t    // Note: resolvedEnd is undefined when the original sequence's length is\n\t    // unknown and this slice did not supply an end and should contain all\n\t    // elements after resolvedBegin.\n\t    // In that case, resolvedSize will be NaN and sliceSize will remain undefined.\n\t    var resolvedSize = resolvedEnd - resolvedBegin;\n\t    var sliceSize;\n\t    if (resolvedSize === resolvedSize) {\n\t      sliceSize = resolvedSize < 0 ? 0 : resolvedSize;\n\t    }\n\t\n\t    var sliceSeq = makeSequence(iterable);\n\t\n\t    // If iterable.size is undefined, the size of the realized sliceSeq is\n\t    // unknown at this point unless the number of items to slice is 0\n\t    sliceSeq.size = sliceSize === 0 ? sliceSize : iterable.size && sliceSize || undefined;\n\t\n\t    if (!useKeys && isSeq(iterable) && sliceSize >= 0) {\n\t      sliceSeq.get = function (index, notSetValue) {\n\t        index = wrapIndex(this, index);\n\t        return index >= 0 && index < sliceSize ?\n\t          iterable.get(index + resolvedBegin, notSetValue) :\n\t          notSetValue;\n\t      }\n\t    }\n\t\n\t    sliceSeq.__iterateUncached = function(fn, reverse) {var this$0 = this;\n\t      if (sliceSize === 0) {\n\t        return 0;\n\t      }\n\t      if (reverse) {\n\t        return this.cacheResult().__iterate(fn, reverse);\n\t      }\n\t      var skipped = 0;\n\t      var isSkipping = true;\n\t      var iterations = 0;\n\t      iterable.__iterate(function(v, k)  {\n\t        if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {\n\t          iterations++;\n\t          return fn(v, useKeys ? k : iterations - 1, this$0) !== false &&\n\t                 iterations !== sliceSize;\n\t        }\n\t      });\n\t      return iterations;\n\t    };\n\t\n\t    sliceSeq.__iteratorUncached = function(type, reverse) {\n\t      if (sliceSize !== 0 && reverse) {\n\t        return this.cacheResult().__iterator(type, reverse);\n\t      }\n\t      // Don't bother instantiating parent iterator if taking 0.\n\t      var iterator = sliceSize !== 0 && iterable.__iterator(type, reverse);\n\t      var skipped = 0;\n\t      var iterations = 0;\n\t      return new Iterator(function()  {\n\t        while (skipped++ < resolvedBegin) {\n\t          iterator.next();\n\t        }\n\t        if (++iterations > sliceSize) {\n\t          return iteratorDone();\n\t        }\n\t        var step = iterator.next();\n\t        if (useKeys || type === ITERATE_VALUES) {\n\t          return step;\n\t        } else if (type === ITERATE_KEYS) {\n\t          return iteratorValue(type, iterations - 1, undefined, step);\n\t        } else {\n\t          return iteratorValue(type, iterations - 1, step.value[1], step);\n\t        }\n\t      });\n\t    }\n\t\n\t    return sliceSeq;\n\t  }\n\t\n\t\n\t  function takeWhileFactory(iterable, predicate, context) {\n\t    var takeSequence = makeSequence(iterable);\n\t    takeSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;\n\t      if (reverse) {\n\t        return this.cacheResult().__iterate(fn, reverse);\n\t      }\n\t      var iterations = 0;\n\t      iterable.__iterate(function(v, k, c) \n\t        {return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$0)}\n\t      );\n\t      return iterations;\n\t    };\n\t    takeSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;\n\t      if (reverse) {\n\t        return this.cacheResult().__iterator(type, reverse);\n\t      }\n\t      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n\t      var iterating = true;\n\t      return new Iterator(function()  {\n\t        if (!iterating) {\n\t          return iteratorDone();\n\t        }\n\t        var step = iterator.next();\n\t        if (step.done) {\n\t          return step;\n\t        }\n\t        var entry = step.value;\n\t        var k = entry[0];\n\t        var v = entry[1];\n\t        if (!predicate.call(context, v, k, this$0)) {\n\t          iterating = false;\n\t          return iteratorDone();\n\t        }\n\t        return type === ITERATE_ENTRIES ? step :\n\t          iteratorValue(type, k, v, step);\n\t      });\n\t    };\n\t    return takeSequence;\n\t  }\n\t\n\t\n\t  function skipWhileFactory(iterable, predicate, context, useKeys) {\n\t    var skipSequence = makeSequence(iterable);\n\t    skipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n\t      if (reverse) {\n\t        return this.cacheResult().__iterate(fn, reverse);\n\t      }\n\t      var isSkipping = true;\n\t      var iterations = 0;\n\t      iterable.__iterate(function(v, k, c)  {\n\t        if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {\n\t          iterations++;\n\t          return fn(v, useKeys ? k : iterations - 1, this$0);\n\t        }\n\t      });\n\t      return iterations;\n\t    };\n\t    skipSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;\n\t      if (reverse) {\n\t        return this.cacheResult().__iterator(type, reverse);\n\t      }\n\t      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n\t      var skipping = true;\n\t      var iterations = 0;\n\t      return new Iterator(function()  {\n\t        var step, k, v;\n\t        do {\n\t          step = iterator.next();\n\t          if (step.done) {\n\t            if (useKeys || type === ITERATE_VALUES) {\n\t              return step;\n\t            } else if (type === ITERATE_KEYS) {\n\t              return iteratorValue(type, iterations++, undefined, step);\n\t            } else {\n\t              return iteratorValue(type, iterations++, step.value[1], step);\n\t            }\n\t          }\n\t          var entry = step.value;\n\t          k = entry[0];\n\t          v = entry[1];\n\t          skipping && (skipping = predicate.call(context, v, k, this$0));\n\t        } while (skipping);\n\t        return type === ITERATE_ENTRIES ? step :\n\t          iteratorValue(type, k, v, step);\n\t      });\n\t    };\n\t    return skipSequence;\n\t  }\n\t\n\t\n\t  function concatFactory(iterable, values) {\n\t    var isKeyedIterable = isKeyed(iterable);\n\t    var iters = [iterable].concat(values).map(function(v ) {\n\t      if (!isIterable(v)) {\n\t        v = isKeyedIterable ?\n\t          keyedSeqFromValue(v) :\n\t          indexedSeqFromValue(Array.isArray(v) ? v : [v]);\n\t      } else if (isKeyedIterable) {\n\t        v = KeyedIterable(v);\n\t      }\n\t      return v;\n\t    }).filter(function(v ) {return v.size !== 0});\n\t\n\t    if (iters.length === 0) {\n\t      return iterable;\n\t    }\n\t\n\t    if (iters.length === 1) {\n\t      var singleton = iters[0];\n\t      if (singleton === iterable ||\n\t          isKeyedIterable && isKeyed(singleton) ||\n\t          isIndexed(iterable) && isIndexed(singleton)) {\n\t        return singleton;\n\t      }\n\t    }\n\t\n\t    var concatSeq = new ArraySeq(iters);\n\t    if (isKeyedIterable) {\n\t      concatSeq = concatSeq.toKeyedSeq();\n\t    } else if (!isIndexed(iterable)) {\n\t      concatSeq = concatSeq.toSetSeq();\n\t    }\n\t    concatSeq = concatSeq.flatten(true);\n\t    concatSeq.size = iters.reduce(\n\t      function(sum, seq)  {\n\t        if (sum !== undefined) {\n\t          var size = seq.size;\n\t          if (size !== undefined) {\n\t            return sum + size;\n\t          }\n\t        }\n\t      },\n\t      0\n\t    );\n\t    return concatSeq;\n\t  }\n\t\n\t\n\t  function flattenFactory(iterable, depth, useKeys) {\n\t    var flatSequence = makeSequence(iterable);\n\t    flatSequence.__iterateUncached = function(fn, reverse) {\n\t      var iterations = 0;\n\t      var stopped = false;\n\t      function flatDeep(iter, currentDepth) {var this$0 = this;\n\t        iter.__iterate(function(v, k)  {\n\t          if ((!depth || currentDepth < depth) && isIterable(v)) {\n\t            flatDeep(v, currentDepth + 1);\n\t          } else if (fn(v, useKeys ? k : iterations++, this$0) === false) {\n\t            stopped = true;\n\t          }\n\t          return !stopped;\n\t        }, reverse);\n\t      }\n\t      flatDeep(iterable, 0);\n\t      return iterations;\n\t    }\n\t    flatSequence.__iteratorUncached = function(type, reverse) {\n\t      var iterator = iterable.__iterator(type, reverse);\n\t      var stack = [];\n\t      var iterations = 0;\n\t      return new Iterator(function()  {\n\t        while (iterator) {\n\t          var step = iterator.next();\n\t          if (step.done !== false) {\n\t            iterator = stack.pop();\n\t            continue;\n\t          }\n\t          var v = step.value;\n\t          if (type === ITERATE_ENTRIES) {\n\t            v = v[1];\n\t          }\n\t          if ((!depth || stack.length < depth) && isIterable(v)) {\n\t            stack.push(iterator);\n\t            iterator = v.__iterator(type, reverse);\n\t          } else {\n\t            return useKeys ? step : iteratorValue(type, iterations++, v, step);\n\t          }\n\t        }\n\t        return iteratorDone();\n\t      });\n\t    }\n\t    return flatSequence;\n\t  }\n\t\n\t\n\t  function flatMapFactory(iterable, mapper, context) {\n\t    var coerce = iterableClass(iterable);\n\t    return iterable.toSeq().map(\n\t      function(v, k)  {return coerce(mapper.call(context, v, k, iterable))}\n\t    ).flatten(true);\n\t  }\n\t\n\t\n\t  function interposeFactory(iterable, separator) {\n\t    var interposedSequence = makeSequence(iterable);\n\t    interposedSequence.size = iterable.size && iterable.size * 2 -1;\n\t    interposedSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;\n\t      var iterations = 0;\n\t      iterable.__iterate(function(v, k) \n\t        {return (!iterations || fn(separator, iterations++, this$0) !== false) &&\n\t        fn(v, iterations++, this$0) !== false},\n\t        reverse\n\t      );\n\t      return iterations;\n\t    };\n\t    interposedSequence.__iteratorUncached = function(type, reverse) {\n\t      var iterator = iterable.__iterator(ITERATE_VALUES, reverse);\n\t      var iterations = 0;\n\t      var step;\n\t      return new Iterator(function()  {\n\t        if (!step || iterations % 2) {\n\t          step = iterator.next();\n\t          if (step.done) {\n\t            return step;\n\t          }\n\t        }\n\t        return iterations % 2 ?\n\t          iteratorValue(type, iterations++, separator) :\n\t          iteratorValue(type, iterations++, step.value, step);\n\t      });\n\t    };\n\t    return interposedSequence;\n\t  }\n\t\n\t\n\t  function sortFactory(iterable, comparator, mapper) {\n\t    if (!comparator) {\n\t      comparator = defaultComparator;\n\t    }\n\t    var isKeyedIterable = isKeyed(iterable);\n\t    var index = 0;\n\t    var entries = iterable.toSeq().map(\n\t      function(v, k)  {return [k, v, index++, mapper ? mapper(v, k, iterable) : v]}\n\t    ).toArray();\n\t    entries.sort(function(a, b)  {return comparator(a[3], b[3]) || a[2] - b[2]}).forEach(\n\t      isKeyedIterable ?\n\t      function(v, i)  { entries[i].length = 2; } :\n\t      function(v, i)  { entries[i] = v[1]; }\n\t    );\n\t    return isKeyedIterable ? KeyedSeq(entries) :\n\t      isIndexed(iterable) ? IndexedSeq(entries) :\n\t      SetSeq(entries);\n\t  }\n\t\n\t\n\t  function maxFactory(iterable, comparator, mapper) {\n\t    if (!comparator) {\n\t      comparator = defaultComparator;\n\t    }\n\t    if (mapper) {\n\t      var entry = iterable.toSeq()\n\t        .map(function(v, k)  {return [v, mapper(v, k, iterable)]})\n\t        .reduce(function(a, b)  {return maxCompare(comparator, a[1], b[1]) ? b : a});\n\t      return entry && entry[0];\n\t    } else {\n\t      return iterable.reduce(function(a, b)  {return maxCompare(comparator, a, b) ? b : a});\n\t    }\n\t  }\n\t\n\t  function maxCompare(comparator, a, b) {\n\t    var comp = comparator(b, a);\n\t    // b is considered the new max if the comparator declares them equal, but\n\t    // they are not equal and b is in fact a nullish value.\n\t    return (comp === 0 && b !== a && (b === undefined || b === null || b !== b)) || comp > 0;\n\t  }\n\t\n\t\n\t  function zipWithFactory(keyIter, zipper, iters) {\n\t    var zipSequence = makeSequence(keyIter);\n\t    zipSequence.size = new ArraySeq(iters).map(function(i ) {return i.size}).min();\n\t    // Note: this a generic base implementation of __iterate in terms of\n\t    // __iterator which may be more generically useful in the future.\n\t    zipSequence.__iterate = function(fn, reverse) {\n\t      /* generic:\n\t      var iterator = this.__iterator(ITERATE_ENTRIES, reverse);\n\t      var step;\n\t      var iterations = 0;\n\t      while (!(step = iterator.next()).done) {\n\t        iterations++;\n\t        if (fn(step.value[1], step.value[0], this) === false) {\n\t          break;\n\t        }\n\t      }\n\t      return iterations;\n\t      */\n\t      // indexed:\n\t      var iterator = this.__iterator(ITERATE_VALUES, reverse);\n\t      var step;\n\t      var iterations = 0;\n\t      while (!(step = iterator.next()).done) {\n\t        if (fn(step.value, iterations++, this) === false) {\n\t          break;\n\t        }\n\t      }\n\t      return iterations;\n\t    };\n\t    zipSequence.__iteratorUncached = function(type, reverse) {\n\t      var iterators = iters.map(function(i )\n\t        {return (i = Iterable(i), getIterator(reverse ? i.reverse() : i))}\n\t      );\n\t      var iterations = 0;\n\t      var isDone = false;\n\t      return new Iterator(function()  {\n\t        var steps;\n\t        if (!isDone) {\n\t          steps = iterators.map(function(i ) {return i.next()});\n\t          isDone = steps.some(function(s ) {return s.done});\n\t        }\n\t        if (isDone) {\n\t          return iteratorDone();\n\t        }\n\t        return iteratorValue(\n\t          type,\n\t          iterations++,\n\t          zipper.apply(null, steps.map(function(s ) {return s.value}))\n\t        );\n\t      });\n\t    };\n\t    return zipSequence\n\t  }\n\t\n\t\n\t  // #pragma Helper Functions\n\t\n\t  function reify(iter, seq) {\n\t    return isSeq(iter) ? seq : iter.constructor(seq);\n\t  }\n\t\n\t  function validateEntry(entry) {\n\t    if (entry !== Object(entry)) {\n\t      throw new TypeError('Expected [K, V] tuple: ' + entry);\n\t    }\n\t  }\n\t\n\t  function resolveSize(iter) {\n\t    assertNotInfinite(iter.size);\n\t    return ensureSize(iter);\n\t  }\n\t\n\t  function iterableClass(iterable) {\n\t    return isKeyed(iterable) ? KeyedIterable :\n\t      isIndexed(iterable) ? IndexedIterable :\n\t      SetIterable;\n\t  }\n\t\n\t  function makeSequence(iterable) {\n\t    return Object.create(\n\t      (\n\t        isKeyed(iterable) ? KeyedSeq :\n\t        isIndexed(iterable) ? IndexedSeq :\n\t        SetSeq\n\t      ).prototype\n\t    );\n\t  }\n\t\n\t  function cacheResultThrough() {\n\t    if (this._iter.cacheResult) {\n\t      this._iter.cacheResult();\n\t      this.size = this._iter.size;\n\t      return this;\n\t    } else {\n\t      return Seq.prototype.cacheResult.call(this);\n\t    }\n\t  }\n\t\n\t  function defaultComparator(a, b) {\n\t    return a > b ? 1 : a < b ? -1 : 0;\n\t  }\n\t\n\t  function forceIterator(keyPath) {\n\t    var iter = getIterator(keyPath);\n\t    if (!iter) {\n\t      // Array might not be iterable in this environment, so we need a fallback\n\t      // to our wrapped type.\n\t      if (!isArrayLike(keyPath)) {\n\t        throw new TypeError('Expected iterable or array-like: ' + keyPath);\n\t      }\n\t      iter = getIterator(Iterable(keyPath));\n\t    }\n\t    return iter;\n\t  }\n\t\n\t  createClass(Record, KeyedCollection);\n\t\n\t    function Record(defaultValues, name) {\n\t      var hasInitialized;\n\t\n\t      var RecordType = function Record(values) {\n\t        if (values instanceof RecordType) {\n\t          return values;\n\t        }\n\t        if (!(this instanceof RecordType)) {\n\t          return new RecordType(values);\n\t        }\n\t        if (!hasInitialized) {\n\t          hasInitialized = true;\n\t          var keys = Object.keys(defaultValues);\n\t          setProps(RecordTypePrototype, keys);\n\t          RecordTypePrototype.size = keys.length;\n\t          RecordTypePrototype._name = name;\n\t          RecordTypePrototype._keys = keys;\n\t          RecordTypePrototype._defaultValues = defaultValues;\n\t        }\n\t        this._map = Map(values);\n\t      };\n\t\n\t      var RecordTypePrototype = RecordType.prototype = Object.create(RecordPrototype);\n\t      RecordTypePrototype.constructor = RecordType;\n\t\n\t      return RecordType;\n\t    }\n\t\n\t    Record.prototype.toString = function() {\n\t      return this.__toString(recordName(this) + ' {', '}');\n\t    };\n\t\n\t    // @pragma Access\n\t\n\t    Record.prototype.has = function(k) {\n\t      return this._defaultValues.hasOwnProperty(k);\n\t    };\n\t\n\t    Record.prototype.get = function(k, notSetValue) {\n\t      if (!this.has(k)) {\n\t        return notSetValue;\n\t      }\n\t      var defaultVal = this._defaultValues[k];\n\t      return this._map ? this._map.get(k, defaultVal) : defaultVal;\n\t    };\n\t\n\t    // @pragma Modification\n\t\n\t    Record.prototype.clear = function() {\n\t      if (this.__ownerID) {\n\t        this._map && this._map.clear();\n\t        return this;\n\t      }\n\t      var RecordType = this.constructor;\n\t      return RecordType._empty || (RecordType._empty = makeRecord(this, emptyMap()));\n\t    };\n\t\n\t    Record.prototype.set = function(k, v) {\n\t      if (!this.has(k)) {\n\t        throw new Error('Cannot set unknown key \"' + k + '\" on ' + recordName(this));\n\t      }\n\t      var newMap = this._map && this._map.set(k, v);\n\t      if (this.__ownerID || newMap === this._map) {\n\t        return this;\n\t      }\n\t      return makeRecord(this, newMap);\n\t    };\n\t\n\t    Record.prototype.remove = function(k) {\n\t      if (!this.has(k)) {\n\t        return this;\n\t      }\n\t      var newMap = this._map && this._map.remove(k);\n\t      if (this.__ownerID || newMap === this._map) {\n\t        return this;\n\t      }\n\t      return makeRecord(this, newMap);\n\t    };\n\t\n\t    Record.prototype.wasAltered = function() {\n\t      return this._map.wasAltered();\n\t    };\n\t\n\t    Record.prototype.__iterator = function(type, reverse) {var this$0 = this;\n\t      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterator(type, reverse);\n\t    };\n\t\n\t    Record.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n\t      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterate(fn, reverse);\n\t    };\n\t\n\t    Record.prototype.__ensureOwner = function(ownerID) {\n\t      if (ownerID === this.__ownerID) {\n\t        return this;\n\t      }\n\t      var newMap = this._map && this._map.__ensureOwner(ownerID);\n\t      if (!ownerID) {\n\t        this.__ownerID = ownerID;\n\t        this._map = newMap;\n\t        return this;\n\t      }\n\t      return makeRecord(this, newMap, ownerID);\n\t    };\n\t\n\t\n\t  var RecordPrototype = Record.prototype;\n\t  RecordPrototype[DELETE] = RecordPrototype.remove;\n\t  RecordPrototype.deleteIn =\n\t  RecordPrototype.removeIn = MapPrototype.removeIn;\n\t  RecordPrototype.merge = MapPrototype.merge;\n\t  RecordPrototype.mergeWith = MapPrototype.mergeWith;\n\t  RecordPrototype.mergeIn = MapPrototype.mergeIn;\n\t  RecordPrototype.mergeDeep = MapPrototype.mergeDeep;\n\t  RecordPrototype.mergeDeepWith = MapPrototype.mergeDeepWith;\n\t  RecordPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;\n\t  RecordPrototype.setIn = MapPrototype.setIn;\n\t  RecordPrototype.update = MapPrototype.update;\n\t  RecordPrototype.updateIn = MapPrototype.updateIn;\n\t  RecordPrototype.withMutations = MapPrototype.withMutations;\n\t  RecordPrototype.asMutable = MapPrototype.asMutable;\n\t  RecordPrototype.asImmutable = MapPrototype.asImmutable;\n\t\n\t\n\t  function makeRecord(likeRecord, map, ownerID) {\n\t    var record = Object.create(Object.getPrototypeOf(likeRecord));\n\t    record._map = map;\n\t    record.__ownerID = ownerID;\n\t    return record;\n\t  }\n\t\n\t  function recordName(record) {\n\t    return record._name || record.constructor.name || 'Record';\n\t  }\n\t\n\t  function setProps(prototype, names) {\n\t    try {\n\t      names.forEach(setProp.bind(undefined, prototype));\n\t    } catch (error) {\n\t      // Object.defineProperty failed. Probably IE8.\n\t    }\n\t  }\n\t\n\t  function setProp(prototype, name) {\n\t    Object.defineProperty(prototype, name, {\n\t      get: function() {\n\t        return this.get(name);\n\t      },\n\t      set: function(value) {\n\t        invariant(this.__ownerID, 'Cannot set on an immutable record.');\n\t        this.set(name, value);\n\t      }\n\t    });\n\t  }\n\t\n\t  createClass(Set, SetCollection);\n\t\n\t    // @pragma Construction\n\t\n\t    function Set(value) {\n\t      return value === null || value === undefined ? emptySet() :\n\t        isSet(value) && !isOrdered(value) ? value :\n\t        emptySet().withMutations(function(set ) {\n\t          var iter = SetIterable(value);\n\t          assertNotInfinite(iter.size);\n\t          iter.forEach(function(v ) {return set.add(v)});\n\t        });\n\t    }\n\t\n\t    Set.of = function(/*...values*/) {\n\t      return this(arguments);\n\t    };\n\t\n\t    Set.fromKeys = function(value) {\n\t      return this(KeyedIterable(value).keySeq());\n\t    };\n\t\n\t    Set.prototype.toString = function() {\n\t      return this.__toString('Set {', '}');\n\t    };\n\t\n\t    // @pragma Access\n\t\n\t    Set.prototype.has = function(value) {\n\t      return this._map.has(value);\n\t    };\n\t\n\t    // @pragma Modification\n\t\n\t    Set.prototype.add = function(value) {\n\t      return updateSet(this, this._map.set(value, true));\n\t    };\n\t\n\t    Set.prototype.remove = function(value) {\n\t      return updateSet(this, this._map.remove(value));\n\t    };\n\t\n\t    Set.prototype.clear = function() {\n\t      return updateSet(this, this._map.clear());\n\t    };\n\t\n\t    // @pragma Composition\n\t\n\t    Set.prototype.union = function() {var iters = SLICE$0.call(arguments, 0);\n\t      iters = iters.filter(function(x ) {return x.size !== 0});\n\t      if (iters.length === 0) {\n\t        return this;\n\t      }\n\t      if (this.size === 0 && !this.__ownerID && iters.length === 1) {\n\t        return this.constructor(iters[0]);\n\t      }\n\t      return this.withMutations(function(set ) {\n\t        for (var ii = 0; ii < iters.length; ii++) {\n\t          SetIterable(iters[ii]).forEach(function(value ) {return set.add(value)});\n\t        }\n\t      });\n\t    };\n\t\n\t    Set.prototype.intersect = function() {var iters = SLICE$0.call(arguments, 0);\n\t      if (iters.length === 0) {\n\t        return this;\n\t      }\n\t      iters = iters.map(function(iter ) {return SetIterable(iter)});\n\t      var originalSet = this;\n\t      return this.withMutations(function(set ) {\n\t        originalSet.forEach(function(value ) {\n\t          if (!iters.every(function(iter ) {return iter.includes(value)})) {\n\t            set.remove(value);\n\t          }\n\t        });\n\t      });\n\t    };\n\t\n\t    Set.prototype.subtract = function() {var iters = SLICE$0.call(arguments, 0);\n\t      if (iters.length === 0) {\n\t        return this;\n\t      }\n\t      iters = iters.map(function(iter ) {return SetIterable(iter)});\n\t      var originalSet = this;\n\t      return this.withMutations(function(set ) {\n\t        originalSet.forEach(function(value ) {\n\t          if (iters.some(function(iter ) {return iter.includes(value)})) {\n\t            set.remove(value);\n\t          }\n\t        });\n\t      });\n\t    };\n\t\n\t    Set.prototype.merge = function() {\n\t      return this.union.apply(this, arguments);\n\t    };\n\t\n\t    Set.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n\t      return this.union.apply(this, iters);\n\t    };\n\t\n\t    Set.prototype.sort = function(comparator) {\n\t      // Late binding\n\t      return OrderedSet(sortFactory(this, comparator));\n\t    };\n\t\n\t    Set.prototype.sortBy = function(mapper, comparator) {\n\t      // Late binding\n\t      return OrderedSet(sortFactory(this, comparator, mapper));\n\t    };\n\t\n\t    Set.prototype.wasAltered = function() {\n\t      return this._map.wasAltered();\n\t    };\n\t\n\t    Set.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n\t      return this._map.__iterate(function(_, k)  {return fn(k, k, this$0)}, reverse);\n\t    };\n\t\n\t    Set.prototype.__iterator = function(type, reverse) {\n\t      return this._map.map(function(_, k)  {return k}).__iterator(type, reverse);\n\t    };\n\t\n\t    Set.prototype.__ensureOwner = function(ownerID) {\n\t      if (ownerID === this.__ownerID) {\n\t        return this;\n\t      }\n\t      var newMap = this._map.__ensureOwner(ownerID);\n\t      if (!ownerID) {\n\t        this.__ownerID = ownerID;\n\t        this._map = newMap;\n\t        return this;\n\t      }\n\t      return this.__make(newMap, ownerID);\n\t    };\n\t\n\t\n\t  function isSet(maybeSet) {\n\t    return !!(maybeSet && maybeSet[IS_SET_SENTINEL]);\n\t  }\n\t\n\t  Set.isSet = isSet;\n\t\n\t  var IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';\n\t\n\t  var SetPrototype = Set.prototype;\n\t  SetPrototype[IS_SET_SENTINEL] = true;\n\t  SetPrototype[DELETE] = SetPrototype.remove;\n\t  SetPrototype.mergeDeep = SetPrototype.merge;\n\t  SetPrototype.mergeDeepWith = SetPrototype.mergeWith;\n\t  SetPrototype.withMutations = MapPrototype.withMutations;\n\t  SetPrototype.asMutable = MapPrototype.asMutable;\n\t  SetPrototype.asImmutable = MapPrototype.asImmutable;\n\t\n\t  SetPrototype.__empty = emptySet;\n\t  SetPrototype.__make = makeSet;\n\t\n\t  function updateSet(set, newMap) {\n\t    if (set.__ownerID) {\n\t      set.size = newMap.size;\n\t      set._map = newMap;\n\t      return set;\n\t    }\n\t    return newMap === set._map ? set :\n\t      newMap.size === 0 ? set.__empty() :\n\t      set.__make(newMap);\n\t  }\n\t\n\t  function makeSet(map, ownerID) {\n\t    var set = Object.create(SetPrototype);\n\t    set.size = map ? map.size : 0;\n\t    set._map = map;\n\t    set.__ownerID = ownerID;\n\t    return set;\n\t  }\n\t\n\t  var EMPTY_SET;\n\t  function emptySet() {\n\t    return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));\n\t  }\n\t\n\t  createClass(OrderedSet, Set);\n\t\n\t    // @pragma Construction\n\t\n\t    function OrderedSet(value) {\n\t      return value === null || value === undefined ? emptyOrderedSet() :\n\t        isOrderedSet(value) ? value :\n\t        emptyOrderedSet().withMutations(function(set ) {\n\t          var iter = SetIterable(value);\n\t          assertNotInfinite(iter.size);\n\t          iter.forEach(function(v ) {return set.add(v)});\n\t        });\n\t    }\n\t\n\t    OrderedSet.of = function(/*...values*/) {\n\t      return this(arguments);\n\t    };\n\t\n\t    OrderedSet.fromKeys = function(value) {\n\t      return this(KeyedIterable(value).keySeq());\n\t    };\n\t\n\t    OrderedSet.prototype.toString = function() {\n\t      return this.__toString('OrderedSet {', '}');\n\t    };\n\t\n\t\n\t  function isOrderedSet(maybeOrderedSet) {\n\t    return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);\n\t  }\n\t\n\t  OrderedSet.isOrderedSet = isOrderedSet;\n\t\n\t  var OrderedSetPrototype = OrderedSet.prototype;\n\t  OrderedSetPrototype[IS_ORDERED_SENTINEL] = true;\n\t\n\t  OrderedSetPrototype.__empty = emptyOrderedSet;\n\t  OrderedSetPrototype.__make = makeOrderedSet;\n\t\n\t  function makeOrderedSet(map, ownerID) {\n\t    var set = Object.create(OrderedSetPrototype);\n\t    set.size = map ? map.size : 0;\n\t    set._map = map;\n\t    set.__ownerID = ownerID;\n\t    return set;\n\t  }\n\t\n\t  var EMPTY_ORDERED_SET;\n\t  function emptyOrderedSet() {\n\t    return EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));\n\t  }\n\t\n\t  createClass(Stack, IndexedCollection);\n\t\n\t    // @pragma Construction\n\t\n\t    function Stack(value) {\n\t      return value === null || value === undefined ? emptyStack() :\n\t        isStack(value) ? value :\n\t        emptyStack().unshiftAll(value);\n\t    }\n\t\n\t    Stack.of = function(/*...values*/) {\n\t      return this(arguments);\n\t    };\n\t\n\t    Stack.prototype.toString = function() {\n\t      return this.__toString('Stack [', ']');\n\t    };\n\t\n\t    // @pragma Access\n\t\n\t    Stack.prototype.get = function(index, notSetValue) {\n\t      var head = this._head;\n\t      index = wrapIndex(this, index);\n\t      while (head && index--) {\n\t        head = head.next;\n\t      }\n\t      return head ? head.value : notSetValue;\n\t    };\n\t\n\t    Stack.prototype.peek = function() {\n\t      return this._head && this._head.value;\n\t    };\n\t\n\t    // @pragma Modification\n\t\n\t    Stack.prototype.push = function(/*...values*/) {\n\t      if (arguments.length === 0) {\n\t        return this;\n\t      }\n\t      var newSize = this.size + arguments.length;\n\t      var head = this._head;\n\t      for (var ii = arguments.length - 1; ii >= 0; ii--) {\n\t        head = {\n\t          value: arguments[ii],\n\t          next: head\n\t        };\n\t      }\n\t      if (this.__ownerID) {\n\t        this.size = newSize;\n\t        this._head = head;\n\t        this.__hash = undefined;\n\t        this.__altered = true;\n\t        return this;\n\t      }\n\t      return makeStack(newSize, head);\n\t    };\n\t\n\t    Stack.prototype.pushAll = function(iter) {\n\t      iter = IndexedIterable(iter);\n\t      if (iter.size === 0) {\n\t        return this;\n\t      }\n\t      assertNotInfinite(iter.size);\n\t      var newSize = this.size;\n\t      var head = this._head;\n\t      iter.reverse().forEach(function(value ) {\n\t        newSize++;\n\t        head = {\n\t          value: value,\n\t          next: head\n\t        };\n\t      });\n\t      if (this.__ownerID) {\n\t        this.size = newSize;\n\t        this._head = head;\n\t        this.__hash = undefined;\n\t        this.__altered = true;\n\t        return this;\n\t      }\n\t      return makeStack(newSize, head);\n\t    };\n\t\n\t    Stack.prototype.pop = function() {\n\t      return this.slice(1);\n\t    };\n\t\n\t    Stack.prototype.unshift = function(/*...values*/) {\n\t      return this.push.apply(this, arguments);\n\t    };\n\t\n\t    Stack.prototype.unshiftAll = function(iter) {\n\t      return this.pushAll(iter);\n\t    };\n\t\n\t    Stack.prototype.shift = function() {\n\t      return this.pop.apply(this, arguments);\n\t    };\n\t\n\t    Stack.prototype.clear = function() {\n\t      if (this.size === 0) {\n\t        return this;\n\t      }\n\t      if (this.__ownerID) {\n\t        this.size = 0;\n\t        this._head = undefined;\n\t        this.__hash = undefined;\n\t        this.__altered = true;\n\t        return this;\n\t      }\n\t      return emptyStack();\n\t    };\n\t\n\t    Stack.prototype.slice = function(begin, end) {\n\t      if (wholeSlice(begin, end, this.size)) {\n\t        return this;\n\t      }\n\t      var resolvedBegin = resolveBegin(begin, this.size);\n\t      var resolvedEnd = resolveEnd(end, this.size);\n\t      if (resolvedEnd !== this.size) {\n\t        // super.slice(begin, end);\n\t        return IndexedCollection.prototype.slice.call(this, begin, end);\n\t      }\n\t      var newSize = this.size - resolvedBegin;\n\t      var head = this._head;\n\t      while (resolvedBegin--) {\n\t        head = head.next;\n\t      }\n\t      if (this.__ownerID) {\n\t        this.size = newSize;\n\t        this._head = head;\n\t        this.__hash = undefined;\n\t        this.__altered = true;\n\t        return this;\n\t      }\n\t      return makeStack(newSize, head);\n\t    };\n\t\n\t    // @pragma Mutability\n\t\n\t    Stack.prototype.__ensureOwner = function(ownerID) {\n\t      if (ownerID === this.__ownerID) {\n\t        return this;\n\t      }\n\t      if (!ownerID) {\n\t        this.__ownerID = ownerID;\n\t        this.__altered = false;\n\t        return this;\n\t      }\n\t      return makeStack(this.size, this._head, ownerID, this.__hash);\n\t    };\n\t\n\t    // @pragma Iteration\n\t\n\t    Stack.prototype.__iterate = function(fn, reverse) {\n\t      if (reverse) {\n\t        return this.reverse().__iterate(fn);\n\t      }\n\t      var iterations = 0;\n\t      var node = this._head;\n\t      while (node) {\n\t        if (fn(node.value, iterations++, this) === false) {\n\t          break;\n\t        }\n\t        node = node.next;\n\t      }\n\t      return iterations;\n\t    };\n\t\n\t    Stack.prototype.__iterator = function(type, reverse) {\n\t      if (reverse) {\n\t        return this.reverse().__iterator(type);\n\t      }\n\t      var iterations = 0;\n\t      var node = this._head;\n\t      return new Iterator(function()  {\n\t        if (node) {\n\t          var value = node.value;\n\t          node = node.next;\n\t          return iteratorValue(type, iterations++, value);\n\t        }\n\t        return iteratorDone();\n\t      });\n\t    };\n\t\n\t\n\t  function isStack(maybeStack) {\n\t    return !!(maybeStack && maybeStack[IS_STACK_SENTINEL]);\n\t  }\n\t\n\t  Stack.isStack = isStack;\n\t\n\t  var IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';\n\t\n\t  var StackPrototype = Stack.prototype;\n\t  StackPrototype[IS_STACK_SENTINEL] = true;\n\t  StackPrototype.withMutations = MapPrototype.withMutations;\n\t  StackPrototype.asMutable = MapPrototype.asMutable;\n\t  StackPrototype.asImmutable = MapPrototype.asImmutable;\n\t  StackPrototype.wasAltered = MapPrototype.wasAltered;\n\t\n\t\n\t  function makeStack(size, head, ownerID, hash) {\n\t    var map = Object.create(StackPrototype);\n\t    map.size = size;\n\t    map._head = head;\n\t    map.__ownerID = ownerID;\n\t    map.__hash = hash;\n\t    map.__altered = false;\n\t    return map;\n\t  }\n\t\n\t  var EMPTY_STACK;\n\t  function emptyStack() {\n\t    return EMPTY_STACK || (EMPTY_STACK = makeStack(0));\n\t  }\n\t\n\t  /**\n\t   * Contributes additional methods to a constructor\n\t   */\n\t  function mixin(ctor, methods) {\n\t    var keyCopier = function(key ) { ctor.prototype[key] = methods[key]; };\n\t    Object.keys(methods).forEach(keyCopier);\n\t    Object.getOwnPropertySymbols &&\n\t      Object.getOwnPropertySymbols(methods).forEach(keyCopier);\n\t    return ctor;\n\t  }\n\t\n\t  Iterable.Iterator = Iterator;\n\t\n\t  mixin(Iterable, {\n\t\n\t    // ### Conversion to other types\n\t\n\t    toArray: function() {\n\t      assertNotInfinite(this.size);\n\t      var array = new Array(this.size || 0);\n\t      this.valueSeq().__iterate(function(v, i)  { array[i] = v; });\n\t      return array;\n\t    },\n\t\n\t    toIndexedSeq: function() {\n\t      return new ToIndexedSequence(this);\n\t    },\n\t\n\t    toJS: function() {\n\t      return this.toSeq().map(\n\t        function(value ) {return value && typeof value.toJS === 'function' ? value.toJS() : value}\n\t      ).__toJS();\n\t    },\n\t\n\t    toJSON: function() {\n\t      return this.toSeq().map(\n\t        function(value ) {return value && typeof value.toJSON === 'function' ? value.toJSON() : value}\n\t      ).__toJS();\n\t    },\n\t\n\t    toKeyedSeq: function() {\n\t      return new ToKeyedSequence(this, true);\n\t    },\n\t\n\t    toMap: function() {\n\t      // Use Late Binding here to solve the circular dependency.\n\t      return Map(this.toKeyedSeq());\n\t    },\n\t\n\t    toObject: function() {\n\t      assertNotInfinite(this.size);\n\t      var object = {};\n\t      this.__iterate(function(v, k)  { object[k] = v; });\n\t      return object;\n\t    },\n\t\n\t    toOrderedMap: function() {\n\t      // Use Late Binding here to solve the circular dependency.\n\t      return OrderedMap(this.toKeyedSeq());\n\t    },\n\t\n\t    toOrderedSet: function() {\n\t      // Use Late Binding here to solve the circular dependency.\n\t      return OrderedSet(isKeyed(this) ? this.valueSeq() : this);\n\t    },\n\t\n\t    toSet: function() {\n\t      // Use Late Binding here to solve the circular dependency.\n\t      return Set(isKeyed(this) ? this.valueSeq() : this);\n\t    },\n\t\n\t    toSetSeq: function() {\n\t      return new ToSetSequence(this);\n\t    },\n\t\n\t    toSeq: function() {\n\t      return isIndexed(this) ? this.toIndexedSeq() :\n\t        isKeyed(this) ? this.toKeyedSeq() :\n\t        this.toSetSeq();\n\t    },\n\t\n\t    toStack: function() {\n\t      // Use Late Binding here to solve the circular dependency.\n\t      return Stack(isKeyed(this) ? this.valueSeq() : this);\n\t    },\n\t\n\t    toList: function() {\n\t      // Use Late Binding here to solve the circular dependency.\n\t      return List(isKeyed(this) ? this.valueSeq() : this);\n\t    },\n\t\n\t\n\t    // ### Common JavaScript methods and properties\n\t\n\t    toString: function() {\n\t      return '[Iterable]';\n\t    },\n\t\n\t    __toString: function(head, tail) {\n\t      if (this.size === 0) {\n\t        return head + tail;\n\t      }\n\t      return head + ' ' + this.toSeq().map(this.__toStringMapper).join(', ') + ' ' + tail;\n\t    },\n\t\n\t\n\t    // ### ES6 Collection methods (ES6 Array and Map)\n\t\n\t    concat: function() {var values = SLICE$0.call(arguments, 0);\n\t      return reify(this, concatFactory(this, values));\n\t    },\n\t\n\t    includes: function(searchValue) {\n\t      return this.some(function(value ) {return is(value, searchValue)});\n\t    },\n\t\n\t    entries: function() {\n\t      return this.__iterator(ITERATE_ENTRIES);\n\t    },\n\t\n\t    every: function(predicate, context) {\n\t      assertNotInfinite(this.size);\n\t      var returnValue = true;\n\t      this.__iterate(function(v, k, c)  {\n\t        if (!predicate.call(context, v, k, c)) {\n\t          returnValue = false;\n\t          return false;\n\t        }\n\t      });\n\t      return returnValue;\n\t    },\n\t\n\t    filter: function(predicate, context) {\n\t      return reify(this, filterFactory(this, predicate, context, true));\n\t    },\n\t\n\t    find: function(predicate, context, notSetValue) {\n\t      var entry = this.findEntry(predicate, context);\n\t      return entry ? entry[1] : notSetValue;\n\t    },\n\t\n\t    findEntry: function(predicate, context) {\n\t      var found;\n\t      this.__iterate(function(v, k, c)  {\n\t        if (predicate.call(context, v, k, c)) {\n\t          found = [k, v];\n\t          return false;\n\t        }\n\t      });\n\t      return found;\n\t    },\n\t\n\t    findLastEntry: function(predicate, context) {\n\t      return this.toSeq().reverse().findEntry(predicate, context);\n\t    },\n\t\n\t    forEach: function(sideEffect, context) {\n\t      assertNotInfinite(this.size);\n\t      return this.__iterate(context ? sideEffect.bind(context) : sideEffect);\n\t    },\n\t\n\t    join: function(separator) {\n\t      assertNotInfinite(this.size);\n\t      separator = separator !== undefined ? '' + separator : ',';\n\t      var joined = '';\n\t      var isFirst = true;\n\t      this.__iterate(function(v ) {\n\t        isFirst ? (isFirst = false) : (joined += separator);\n\t        joined += v !== null && v !== undefined ? v.toString() : '';\n\t      });\n\t      return joined;\n\t    },\n\t\n\t    keys: function() {\n\t      return this.__iterator(ITERATE_KEYS);\n\t    },\n\t\n\t    map: function(mapper, context) {\n\t      return reify(this, mapFactory(this, mapper, context));\n\t    },\n\t\n\t    reduce: function(reducer, initialReduction, context) {\n\t      assertNotInfinite(this.size);\n\t      var reduction;\n\t      var useFirst;\n\t      if (arguments.length < 2) {\n\t        useFirst = true;\n\t      } else {\n\t        reduction = initialReduction;\n\t      }\n\t      this.__iterate(function(v, k, c)  {\n\t        if (useFirst) {\n\t          useFirst = false;\n\t          reduction = v;\n\t        } else {\n\t          reduction = reducer.call(context, reduction, v, k, c);\n\t        }\n\t      });\n\t      return reduction;\n\t    },\n\t\n\t    reduceRight: function(reducer, initialReduction, context) {\n\t      var reversed = this.toKeyedSeq().reverse();\n\t      return reversed.reduce.apply(reversed, arguments);\n\t    },\n\t\n\t    reverse: function() {\n\t      return reify(this, reverseFactory(this, true));\n\t    },\n\t\n\t    slice: function(begin, end) {\n\t      return reify(this, sliceFactory(this, begin, end, true));\n\t    },\n\t\n\t    some: function(predicate, context) {\n\t      return !this.every(not(predicate), context);\n\t    },\n\t\n\t    sort: function(comparator) {\n\t      return reify(this, sortFactory(this, comparator));\n\t    },\n\t\n\t    values: function() {\n\t      return this.__iterator(ITERATE_VALUES);\n\t    },\n\t\n\t\n\t    // ### More sequential methods\n\t\n\t    butLast: function() {\n\t      return this.slice(0, -1);\n\t    },\n\t\n\t    isEmpty: function() {\n\t      return this.size !== undefined ? this.size === 0 : !this.some(function()  {return true});\n\t    },\n\t\n\t    count: function(predicate, context) {\n\t      return ensureSize(\n\t        predicate ? this.toSeq().filter(predicate, context) : this\n\t      );\n\t    },\n\t\n\t    countBy: function(grouper, context) {\n\t      return countByFactory(this, grouper, context);\n\t    },\n\t\n\t    equals: function(other) {\n\t      return deepEqual(this, other);\n\t    },\n\t\n\t    entrySeq: function() {\n\t      var iterable = this;\n\t      if (iterable._cache) {\n\t        // We cache as an entries array, so we can just return the cache!\n\t        return new ArraySeq(iterable._cache);\n\t      }\n\t      var entriesSequence = iterable.toSeq().map(entryMapper).toIndexedSeq();\n\t      entriesSequence.fromEntrySeq = function()  {return iterable.toSeq()};\n\t      return entriesSequence;\n\t    },\n\t\n\t    filterNot: function(predicate, context) {\n\t      return this.filter(not(predicate), context);\n\t    },\n\t\n\t    findLast: function(predicate, context, notSetValue) {\n\t      return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);\n\t    },\n\t\n\t    first: function() {\n\t      return this.find(returnTrue);\n\t    },\n\t\n\t    flatMap: function(mapper, context) {\n\t      return reify(this, flatMapFactory(this, mapper, context));\n\t    },\n\t\n\t    flatten: function(depth) {\n\t      return reify(this, flattenFactory(this, depth, true));\n\t    },\n\t\n\t    fromEntrySeq: function() {\n\t      return new FromEntriesSequence(this);\n\t    },\n\t\n\t    get: function(searchKey, notSetValue) {\n\t      return this.find(function(_, key)  {return is(key, searchKey)}, undefined, notSetValue);\n\t    },\n\t\n\t    getIn: function(searchKeyPath, notSetValue) {\n\t      var nested = this;\n\t      // Note: in an ES6 environment, we would prefer:\n\t      // for (var key of searchKeyPath) {\n\t      var iter = forceIterator(searchKeyPath);\n\t      var step;\n\t      while (!(step = iter.next()).done) {\n\t        var key = step.value;\n\t        nested = nested && nested.get ? nested.get(key, NOT_SET) : NOT_SET;\n\t        if (nested === NOT_SET) {\n\t          return notSetValue;\n\t        }\n\t      }\n\t      return nested;\n\t    },\n\t\n\t    groupBy: function(grouper, context) {\n\t      return groupByFactory(this, grouper, context);\n\t    },\n\t\n\t    has: function(searchKey) {\n\t      return this.get(searchKey, NOT_SET) !== NOT_SET;\n\t    },\n\t\n\t    hasIn: function(searchKeyPath) {\n\t      return this.getIn(searchKeyPath, NOT_SET) !== NOT_SET;\n\t    },\n\t\n\t    isSubset: function(iter) {\n\t      iter = typeof iter.includes === 'function' ? iter : Iterable(iter);\n\t      return this.every(function(value ) {return iter.includes(value)});\n\t    },\n\t\n\t    isSuperset: function(iter) {\n\t      iter = typeof iter.isSubset === 'function' ? iter : Iterable(iter);\n\t      return iter.isSubset(this);\n\t    },\n\t\n\t    keySeq: function() {\n\t      return this.toSeq().map(keyMapper).toIndexedSeq();\n\t    },\n\t\n\t    last: function() {\n\t      return this.toSeq().reverse().first();\n\t    },\n\t\n\t    max: function(comparator) {\n\t      return maxFactory(this, comparator);\n\t    },\n\t\n\t    maxBy: function(mapper, comparator) {\n\t      return maxFactory(this, comparator, mapper);\n\t    },\n\t\n\t    min: function(comparator) {\n\t      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator);\n\t    },\n\t\n\t    minBy: function(mapper, comparator) {\n\t      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator, mapper);\n\t    },\n\t\n\t    rest: function() {\n\t      return this.slice(1);\n\t    },\n\t\n\t    skip: function(amount) {\n\t      return this.slice(Math.max(0, amount));\n\t    },\n\t\n\t    skipLast: function(amount) {\n\t      return reify(this, this.toSeq().reverse().skip(amount).reverse());\n\t    },\n\t\n\t    skipWhile: function(predicate, context) {\n\t      return reify(this, skipWhileFactory(this, predicate, context, true));\n\t    },\n\t\n\t    skipUntil: function(predicate, context) {\n\t      return this.skipWhile(not(predicate), context);\n\t    },\n\t\n\t    sortBy: function(mapper, comparator) {\n\t      return reify(this, sortFactory(this, comparator, mapper));\n\t    },\n\t\n\t    take: function(amount) {\n\t      return this.slice(0, Math.max(0, amount));\n\t    },\n\t\n\t    takeLast: function(amount) {\n\t      return reify(this, this.toSeq().reverse().take(amount).reverse());\n\t    },\n\t\n\t    takeWhile: function(predicate, context) {\n\t      return reify(this, takeWhileFactory(this, predicate, context));\n\t    },\n\t\n\t    takeUntil: function(predicate, context) {\n\t      return this.takeWhile(not(predicate), context);\n\t    },\n\t\n\t    valueSeq: function() {\n\t      return this.toIndexedSeq();\n\t    },\n\t\n\t\n\t    // ### Hashable Object\n\t\n\t    hashCode: function() {\n\t      return this.__hash || (this.__hash = hashIterable(this));\n\t    }\n\t\n\t\n\t    // ### Internal\n\t\n\t    // abstract __iterate(fn, reverse)\n\t\n\t    // abstract __iterator(type, reverse)\n\t  });\n\t\n\t  // var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\n\t  // var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\n\t  // var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';\n\t  // var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\n\t\n\t  var IterablePrototype = Iterable.prototype;\n\t  IterablePrototype[IS_ITERABLE_SENTINEL] = true;\n\t  IterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.values;\n\t  IterablePrototype.__toJS = IterablePrototype.toArray;\n\t  IterablePrototype.__toStringMapper = quoteString;\n\t  IterablePrototype.inspect =\n\t  IterablePrototype.toSource = function() { return this.toString(); };\n\t  IterablePrototype.chain = IterablePrototype.flatMap;\n\t  IterablePrototype.contains = IterablePrototype.includes;\n\t\n\t  // Temporary warning about using length\n\t  (function () {\n\t    try {\n\t      Object.defineProperty(IterablePrototype, 'length', {\n\t        get: function () {\n\t          if (!Iterable.noLengthWarning) {\n\t            var stack;\n\t            try {\n\t              throw new Error();\n\t            } catch (error) {\n\t              stack = error.stack;\n\t            }\n\t            if (stack.indexOf('_wrapObject') === -1) {\n\t              console && console.warn && console.warn(\n\t                'iterable.length has been deprecated, '+\n\t                'use iterable.size or iterable.count(). '+\n\t                'This warning will become a silent error in a future version. ' +\n\t                stack\n\t              );\n\t              return this.size;\n\t            }\n\t          }\n\t        }\n\t      });\n\t    } catch (e) {}\n\t  })();\n\t\n\t\n\t\n\t  mixin(KeyedIterable, {\n\t\n\t    // ### More sequential methods\n\t\n\t    flip: function() {\n\t      return reify(this, flipFactory(this));\n\t    },\n\t\n\t    findKey: function(predicate, context) {\n\t      var entry = this.findEntry(predicate, context);\n\t      return entry && entry[0];\n\t    },\n\t\n\t    findLastKey: function(predicate, context) {\n\t      return this.toSeq().reverse().findKey(predicate, context);\n\t    },\n\t\n\t    keyOf: function(searchValue) {\n\t      return this.findKey(function(value ) {return is(value, searchValue)});\n\t    },\n\t\n\t    lastKeyOf: function(searchValue) {\n\t      return this.findLastKey(function(value ) {return is(value, searchValue)});\n\t    },\n\t\n\t    mapEntries: function(mapper, context) {var this$0 = this;\n\t      var iterations = 0;\n\t      return reify(this,\n\t        this.toSeq().map(\n\t          function(v, k)  {return mapper.call(context, [k, v], iterations++, this$0)}\n\t        ).fromEntrySeq()\n\t      );\n\t    },\n\t\n\t    mapKeys: function(mapper, context) {var this$0 = this;\n\t      return reify(this,\n\t        this.toSeq().flip().map(\n\t          function(k, v)  {return mapper.call(context, k, v, this$0)}\n\t        ).flip()\n\t      );\n\t    }\n\t\n\t  });\n\t\n\t  var KeyedIterablePrototype = KeyedIterable.prototype;\n\t  KeyedIterablePrototype[IS_KEYED_SENTINEL] = true;\n\t  KeyedIterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.entries;\n\t  KeyedIterablePrototype.__toJS = IterablePrototype.toObject;\n\t  KeyedIterablePrototype.__toStringMapper = function(v, k)  {return JSON.stringify(k) + ': ' + quoteString(v)};\n\t\n\t\n\t\n\t  mixin(IndexedIterable, {\n\t\n\t    // ### Conversion to other types\n\t\n\t    toKeyedSeq: function() {\n\t      return new ToKeyedSequence(this, false);\n\t    },\n\t\n\t\n\t    // ### ES6 Collection methods (ES6 Array and Map)\n\t\n\t    filter: function(predicate, context) {\n\t      return reify(this, filterFactory(this, predicate, context, false));\n\t    },\n\t\n\t    findIndex: function(predicate, context) {\n\t      var entry = this.findEntry(predicate, context);\n\t      return entry ? entry[0] : -1;\n\t    },\n\t\n\t    indexOf: function(searchValue) {\n\t      var key = this.toKeyedSeq().keyOf(searchValue);\n\t      return key === undefined ? -1 : key;\n\t    },\n\t\n\t    lastIndexOf: function(searchValue) {\n\t      var key = this.toKeyedSeq().reverse().keyOf(searchValue);\n\t      return key === undefined ? -1 : key;\n\t\n\t      // var index =\n\t      // return this.toSeq().reverse().indexOf(searchValue);\n\t    },\n\t\n\t    reverse: function() {\n\t      return reify(this, reverseFactory(this, false));\n\t    },\n\t\n\t    slice: function(begin, end) {\n\t      return reify(this, sliceFactory(this, begin, end, false));\n\t    },\n\t\n\t    splice: function(index, removeNum /*, ...values*/) {\n\t      var numArgs = arguments.length;\n\t      removeNum = Math.max(removeNum | 0, 0);\n\t      if (numArgs === 0 || (numArgs === 2 && !removeNum)) {\n\t        return this;\n\t      }\n\t      // If index is negative, it should resolve relative to the size of the\n\t      // collection. However size may be expensive to compute if not cached, so\n\t      // only call count() if the number is in fact negative.\n\t      index = resolveBegin(index, index < 0 ? this.count() : this.size);\n\t      var spliced = this.slice(0, index);\n\t      return reify(\n\t        this,\n\t        numArgs === 1 ?\n\t          spliced :\n\t          spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum))\n\t      );\n\t    },\n\t\n\t\n\t    // ### More collection methods\n\t\n\t    findLastIndex: function(predicate, context) {\n\t      var key = this.toKeyedSeq().findLastKey(predicate, context);\n\t      return key === undefined ? -1 : key;\n\t    },\n\t\n\t    first: function() {\n\t      return this.get(0);\n\t    },\n\t\n\t    flatten: function(depth) {\n\t      return reify(this, flattenFactory(this, depth, false));\n\t    },\n\t\n\t    get: function(index, notSetValue) {\n\t      index = wrapIndex(this, index);\n\t      return (index < 0 || (this.size === Infinity ||\n\t          (this.size !== undefined && index > this.size))) ?\n\t        notSetValue :\n\t        this.find(function(_, key)  {return key === index}, undefined, notSetValue);\n\t    },\n\t\n\t    has: function(index) {\n\t      index = wrapIndex(this, index);\n\t      return index >= 0 && (this.size !== undefined ?\n\t        this.size === Infinity || index < this.size :\n\t        this.indexOf(index) !== -1\n\t      );\n\t    },\n\t\n\t    interpose: function(separator) {\n\t      return reify(this, interposeFactory(this, separator));\n\t    },\n\t\n\t    interleave: function(/*...iterables*/) {\n\t      var iterables = [this].concat(arrCopy(arguments));\n\t      var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, iterables);\n\t      var interleaved = zipped.flatten(true);\n\t      if (zipped.size) {\n\t        interleaved.size = zipped.size * iterables.length;\n\t      }\n\t      return reify(this, interleaved);\n\t    },\n\t\n\t    last: function() {\n\t      return this.get(-1);\n\t    },\n\t\n\t    skipWhile: function(predicate, context) {\n\t      return reify(this, skipWhileFactory(this, predicate, context, false));\n\t    },\n\t\n\t    zip: function(/*, ...iterables */) {\n\t      var iterables = [this].concat(arrCopy(arguments));\n\t      return reify(this, zipWithFactory(this, defaultZipper, iterables));\n\t    },\n\t\n\t    zipWith: function(zipper/*, ...iterables */) {\n\t      var iterables = arrCopy(arguments);\n\t      iterables[0] = this;\n\t      return reify(this, zipWithFactory(this, zipper, iterables));\n\t    }\n\t\n\t  });\n\t\n\t  IndexedIterable.prototype[IS_INDEXED_SENTINEL] = true;\n\t  IndexedIterable.prototype[IS_ORDERED_SENTINEL] = true;\n\t\n\t\n\t\n\t  mixin(SetIterable, {\n\t\n\t    // ### ES6 Collection methods (ES6 Array and Map)\n\t\n\t    get: function(value, notSetValue) {\n\t      return this.has(value) ? value : notSetValue;\n\t    },\n\t\n\t    includes: function(value) {\n\t      return this.has(value);\n\t    },\n\t\n\t\n\t    // ### More sequential methods\n\t\n\t    keySeq: function() {\n\t      return this.valueSeq();\n\t    }\n\t\n\t  });\n\t\n\t  SetIterable.prototype.has = IterablePrototype.includes;\n\t\n\t\n\t  // Mixin subclasses\n\t\n\t  mixin(KeyedSeq, KeyedIterable.prototype);\n\t  mixin(IndexedSeq, IndexedIterable.prototype);\n\t  mixin(SetSeq, SetIterable.prototype);\n\t\n\t  mixin(KeyedCollection, KeyedIterable.prototype);\n\t  mixin(IndexedCollection, IndexedIterable.prototype);\n\t  mixin(SetCollection, SetIterable.prototype);\n\t\n\t\n\t  // #pragma Helper functions\n\t\n\t  function keyMapper(v, k) {\n\t    return k;\n\t  }\n\t\n\t  function entryMapper(v, k) {\n\t    return [k, v];\n\t  }\n\t\n\t  function not(predicate) {\n\t    return function() {\n\t      return !predicate.apply(this, arguments);\n\t    }\n\t  }\n\t\n\t  function neg(predicate) {\n\t    return function() {\n\t      return -predicate.apply(this, arguments);\n\t    }\n\t  }\n\t\n\t  function quoteString(value) {\n\t    return typeof value === 'string' ? JSON.stringify(value) : value;\n\t  }\n\t\n\t  function defaultZipper() {\n\t    return arrCopy(arguments);\n\t  }\n\t\n\t  function defaultNegComparator(a, b) {\n\t    return a < b ? 1 : a > b ? -1 : 0;\n\t  }\n\t\n\t  function hashIterable(iterable) {\n\t    if (iterable.size === Infinity) {\n\t      return 0;\n\t    }\n\t    var ordered = isOrdered(iterable);\n\t    var keyed = isKeyed(iterable);\n\t    var h = ordered ? 1 : 0;\n\t    var size = iterable.__iterate(\n\t      keyed ?\n\t        ordered ?\n\t          function(v, k)  { h = 31 * h + hashMerge(hash(v), hash(k)) | 0; } :\n\t          function(v, k)  { h = h + hashMerge(hash(v), hash(k)) | 0; } :\n\t        ordered ?\n\t          function(v ) { h = 31 * h + hash(v) | 0; } :\n\t          function(v ) { h = h + hash(v) | 0; }\n\t    );\n\t    return murmurHashOfSize(size, h);\n\t  }\n\t\n\t  function murmurHashOfSize(size, h) {\n\t    h = imul(h, 0xCC9E2D51);\n\t    h = imul(h << 15 | h >>> -15, 0x1B873593);\n\t    h = imul(h << 13 | h >>> -13, 5);\n\t    h = (h + 0xE6546B64 | 0) ^ size;\n\t    h = imul(h ^ h >>> 16, 0x85EBCA6B);\n\t    h = imul(h ^ h >>> 13, 0xC2B2AE35);\n\t    h = smi(h ^ h >>> 16);\n\t    return h;\n\t  }\n\t\n\t  function hashMerge(a, b) {\n\t    return a ^ b + 0x9E3779B9 + (a << 6) + (a >> 2) | 0; // int\n\t  }\n\t\n\t  var Immutable = {\n\t\n\t    Iterable: Iterable,\n\t\n\t    Seq: Seq,\n\t    Collection: Collection,\n\t    Map: Map,\n\t    OrderedMap: OrderedMap,\n\t    List: List,\n\t    Stack: Stack,\n\t    Set: Set,\n\t    OrderedSet: OrderedSet,\n\t\n\t    Record: Record,\n\t    Range: Range,\n\t    Repeat: Repeat,\n\t\n\t    is: is,\n\t    fromJS: fromJS\n\t\n\t  };\n\t\n\t  return Immutable;\n\t\n\t}));\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t(function(exports) {\n\t  // 'use strict';\n\t\n\t  var renderId = '__render_id';\n\t  var EPSILON = .5;\n\t\n\t  var attributeChanged = function(attr, prev, value) {\n\t    switch (attr) {\n\t      case 'value':\n\t      case 'min':\n\t      case 'max':\n\t        this[attr] = value;\n\t        break;\n\t    }\n\t  };\n\t\n\t  exports.EITIBar = document.registerElement('eiti-bar', {\n\t    prototype: Object.create(\n\t      HTMLElement.prototype,\n\t      {\n\t        createdCallback: {value: function() {\n\t          this.__bar = getBar(this);\n\t        }},\n\t\n\t        attachedCallback: {value: function() {\n\t          [].forEach.call(this.attributes, function(attr) {\n\t            attributeChanged.call(this, attr.name, null, attr.value);\n\t          });\n\t        }},\n\t\n\t        attributeChangedCallback: {value: attributeChanged},\n\t\n\t        min: numericProperty('min', 0),\n\t        max: numericProperty('max', 1),\n\t        value: numericProperty('value', 0),\n\t\n\t        render: {value: render}\n\t      }\n\t    )\n\t  });\n\t\n\t  function getBar(parent) {\n\t    var klass = 'eiti-bar-bar';\n\t    var bar = parent.getElementsByClassName(klass)[0];\n\t    if (!bar) {\n\t      bar = parent.appendChild(document.createElement('span'));\n\t      bar.setAttribute('class', klass);\n\t    }\n\t    return bar;\n\t  }\n\t\n\t  function render(force) {\n\t    if (force) {\n\t      _render.call(this);\n\t    } else if (!this[renderId]) {\n\t      this[renderId] = requestAnimationFrame(_render.bind(this));\n\t    }\n\t  }\n\t\n\t  function _render() {\n\t    var min = this.min;\n\t    var max = this.max;\n\t    var value = this.value;\n\t\n\t    var bar = getBar(this);\n\t    bar.classList.toggle('eiti-bar-bar_negative', value < 0);\n\t\n\t    var x = scale(value, min, max) * 100;\n\t    var zero = min < 0 ? scale(0, min, max) * 100 : 0;\n\t    var width = Math.abs(x - zero);\n\t    if (width > 0) {\n\t      bar.style.setProperty('width', (width < EPSILON\n\t                            ? EPSILON\n\t                            : width) + '%');\n\t    } else {\n\t      bar.style.setProperty('width', '0%');\n\t    }\n\t\n\t    if (min < 0) {\n\t      if (value < 0) {\n\t        bar.style.setProperty('left', (zero - width) + '%');\n\t      } else {\n\t        bar.style.setProperty('left', zero + '%');\n\t      }\n\t    } else {\n\t      bar.style.removeProperty('left');\n\t    }\n\t\n\t    delete this[renderId];\n\t  }\n\t\n\t  function scale(value, min, max) {\n\t    return (value - min) / (max - min);\n\t  }\n\t\n\t  function genericProperty(name, value, parse, change) {\n\t    var symbol = '__' + name;\n\t    if (!parse) {\n\t      parse = identity;\n\t    }\n\t    return {\n\t      get: function() {\n\t        return (symbol in this) ? this[symbol] : value;\n\t      },\n\t      set: function(value) {\n\t        if (parse) {\n\t          value = parse.call(this, value, name);\n\t        }\n\t        if (value !== this[symbol]) {\n\t          this[symbol] = value;\n\t          if (change) {\n\t            change.call(this, value, name);\n\t          }\n\t        }\n\t      }\n\t    };\n\t  }\n\t\n\t  function numericProperty(name, value, parse, change) {\n\t    if (change) {\n\t      var _change = change;\n\t      change = function() {\n\t        _change.apply(this, arguments);\n\t        render.apply(this, arguments);\n\t      };\n\t    } else {\n\t      change = render;\n\t    }\n\t    return genericProperty(name, value, parseNumber, change);\n\t  }\n\t\n\t  function parseNumber(n) {\n\t    return isNaN(n) ? 0 : Number(n);\n\t  }\n\t\n\t  function parseBoolean(value) {\n\t    return (typeof value === 'string')\n\t      ? value === 'true'\n\t      : !!value;\n\t  }\n\t\n\t  function identity(d) {\n\t    return d;\n\t  }\n\t\n\t  module.exports = exports.EITIBar;\n\t\n\t})(this);\n\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** explore.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 440a5ed496a788c4c813\n **/","(function(exports) {\n  'use strict';\n\n  // FIXME: does this export anything?\n  require('./../components/sticky-nav.js');\n\n  exports.Immutable = require('immutable');\n  exports.EITIBar = require('./../components/eiti-bar.js');\n\n})(window);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/src/explore.js\n ** module id = 0\n ** module chunks = 0\n **/","(function(exports) {\n\n  var scrollLeft,\n    scrollTop;\n\n  var findScrollPositions = function(){\n    scrollLeft = (window.pageXOffset !== undefined)\n      ? window.pageXOffset\n      : (document.documentElement\n        || document.body.parentNode\n        || document.body).scrollLeft;\n    scrollTop = (window.pageYOffset !== undefined)\n      ? window.pageYOffset\n      : (document.documentElement\n        || document.body.parentNode\n        || document.body).scrollTop;\n\n  };\n\n  var StickyNav = function() {\n\n    this.elems = {\n      sticky : document.querySelector('.sticky_nav'),\n      main: document.querySelector('main')\n    };\n\n    this.attrStickyOffset = this.elems.sticky.getAttribute('data-sticky-offset');\n    this.attrOffsetBottom = parseInt(this.elems.sticky.getAttribute('data-offset-bottom')) || 0;\n    this.maxWidth = this.elems.sticky.getAttribute('data-max-width');\n    var attrAbsolute = this.elems.sticky.getAttribute('data-absolute');\n\n    this.attrParent = this.elems.sticky.getAttribute('data-offset-parent');\n\n    this.elems.parent = this.elems.sticky.getAttribute('data-offset-parent')\n      ? this.elems.sticky.parentNode\n      : null;\n\n    this.determineScreen = function() {\n      var windowWidth = window.innerWidth || document.body.clientWidth;\n      this.wasMobile = this.isMobile;\n      this.isMobile = windowWidth < 768;\n    };\n\n    this.determineScreen();\n\n    this.isAbsolute = function() {\n\n      var isAbsolute = (attrAbsolute === 'true' && !this.isMobile)\n        ? true\n        : false;\n      return isAbsolute;\n    }\n\n\n\n\n    this.status;\n    this.lastStatus;\n    this.lastWidth;\n    this.lastWindowWidth;\n  };\n\n  StickyNav.prototype = {\n    setOffset: function () {\n      this.offset = this.attrStickyOffset\n        ? parseInt(this.attrStickyOffset)\n        : !this.elems.parent\n          ? this.elems.sticky.offsetTop\n          : ( this.attrParent === 'mobile' && this.isMobile )\n            ? this.elems.parent.offsetTop - this.elems.sticky.offsetHeight\n            : this.elems.sticky.offsetTop\n    },\n    getPositions: function () {\n\n      this.height = this.elems.sticky.clientHeight;\n\n      this.lastWidth = this.width || 'initial';\n      var windowWidth = window.innerWidth || document.body.clientWidth,\n        windowBump = windowWidth > 1044 || this.isMobile ? 0 : -20;\n      this.width = this.elems.parent\n        ? this.elems.parent.clientWidth + windowBump + 'px'\n        : this.maxWidth;\n\n      this.mainOffset = this.elems.main.offsetTop;\n      this.mainHeight = this.elems.main.clientHeight;\n\n      this.diffTop = scrollTop - this.mainOffset - this.offset;\n\n      this.diffBottom = scrollTop + this.height - this.mainHeight - this.mainOffset;\n      this.lastStatus = this.status;\n      if (this.diffTop >= 0){\n        this.status = 'fixed';\n        if (this.diffBottom >= 0){\n          this.status = 'absolute';\n        }\n      } else {\n        this.status = 'static';\n      }\n    },\n    needsUpdate: function(init) {\n      var statusChange = this.status !== this.lastStatus;\n      var sizeChange = this.width !== this.lastWidth;\n      var updateNeeded = undefined;\n      if (!statusChange && sizeChange) {\n        updateNeeded = 'size';\n      } else if (statusChange && !sizeChange) {\n        updateNeeded = 'status';\n      } else if (statusChange && sizeChange || init === 'init') {\n        updateNeeded = 'both';\n      }\n      return updateNeeded;\n    },\n    update: function(updateNeeded) {\n      if (!updateNeeded) {\n        return;\n      } else {\n        if (this.diffTop >= 0){\n          if (updateNeeded === 'status' || updateNeeded === 'both') {\n            this.elems.sticky.style.position = 'fixed';\n            this.elems.sticky.style.top = 0;\n            this.elems.sticky.classList.remove('js-transparent');\n            this.elems.sticky.classList.add('js-color');\n          }\n\n          if (updateNeeded === 'size' || updateNeeded === 'both') {\n            this.elems.sticky.style.width = this.width;\n          }\n\n          if (this.diffBottom >= 0){\n            if (updateNeeded === 'status' || updateNeeded === 'both') {\n              this.elems.sticky.style.position = 'absolute';\n\n              if ( this.attrParent === 'mobile' && this.isMobile ) {\n                this.elems.sticky.style.top = this.mainHeight - this.offset - this.height - this.attrOffsetBottom + 'px';\n              } else {\n                this.elems.sticky.style.top = this.mainHeight - this.height - this.attrOffsetBottom + 'px';\n              }\n            }\n          }\n        } else {\n          if (updateNeeded === 'status' || updateNeeded === 'both') {\n            this.elems.sticky.classList.remove('js-color');\n            this.elems.sticky.classList.add('js-transparent');\n            if (this.isAbsolute()) {\n              this.elems.sticky.style.position = 'absolute';\n            } else {\n              this.elems.sticky.style.position = 'static';\n            }\n          }\n\n          if (updateNeeded === 'size' || updateNeeded === 'both') {\n            this.elems.sticky.style.width = this.width;\n          }\n        }\n      }\n    },\n    throttle : function (fn, threshhold, scope) {\n      threshhold || (threshhold = 250);\n      var last,\n          deferTimer;\n      return function () {\n        var context = scope || this;\n\n        var now = +new Date,\n            args = arguments;\n        if (last && now < last + threshhold) {\n          // hold on to it\n          clearTimeout(deferTimer);\n          deferTimer = setTimeout(function () {\n            last = now;\n            fn.apply(context, args);\n          }, threshhold);\n        } else {\n          last = now;\n          fn.apply(context, args);\n        }\n      };\n    },\n    run: function(init) {\n      findScrollPositions();\n      if (init === 'init') {\n        this.setOffset();\n      }\n      this.getPositions();\n      this.update(this.needsUpdate(init));\n    }\n  };\n\n  var stickyNav = new StickyNav();\n\n  var loadDelay = stickyNav.elems.sticky.getAttribute('data-load-delay');\n  if (loadDelay) {\n    setTimeout(function() {\n      stickyNav.run('init');\n    }, parseInt(loadDelay));\n  } else {\n    stickyNav.run('init');\n  }\n\n\n\n  window.addEventListener('scroll', stickyNav.throttle(stickyNav.run, 130, stickyNav));\n\n  window.addEventListener('resize', stickyNav.throttle(stickyNav.run, 150, stickyNav));\n\n  // documentation: https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver\n  var observer = new MutationObserver(function () {\n    stickyNav.run();\n  });\n\n  // set up your configuration\n  // this will watch to see if you insert or remove any children\n  var config = { subtree: true, childList: true };\n\n  // start observing\n  observer.observe(stickyNav.elems.sticky, config);\n\n  // other potential elem listener\n  // http://www.backalleycoder.com/2013/03/18/cross-browser-event-based-element-resize-detection/\n\n  exports.stickyNav = stickyNav;\n\n\n})(this);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/components/sticky-nav.js\n ** module id = 1\n ** module chunks = 0 3\n **/","/**\n *  Copyright (c) 2014-2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  global.Immutable = factory();\n}(this, function () { 'use strict';var SLICE$0 = Array.prototype.slice;\n\n  function createClass(ctor, superClass) {\n    if (superClass) {\n      ctor.prototype = Object.create(superClass.prototype);\n    }\n    ctor.prototype.constructor = ctor;\n  }\n\n  function Iterable(value) {\n      return isIterable(value) ? value : Seq(value);\n    }\n\n\n  createClass(KeyedIterable, Iterable);\n    function KeyedIterable(value) {\n      return isKeyed(value) ? value : KeyedSeq(value);\n    }\n\n\n  createClass(IndexedIterable, Iterable);\n    function IndexedIterable(value) {\n      return isIndexed(value) ? value : IndexedSeq(value);\n    }\n\n\n  createClass(SetIterable, Iterable);\n    function SetIterable(value) {\n      return isIterable(value) && !isAssociative(value) ? value : SetSeq(value);\n    }\n\n\n\n  function isIterable(maybeIterable) {\n    return !!(maybeIterable && maybeIterable[IS_ITERABLE_SENTINEL]);\n  }\n\n  function isKeyed(maybeKeyed) {\n    return !!(maybeKeyed && maybeKeyed[IS_KEYED_SENTINEL]);\n  }\n\n  function isIndexed(maybeIndexed) {\n    return !!(maybeIndexed && maybeIndexed[IS_INDEXED_SENTINEL]);\n  }\n\n  function isAssociative(maybeAssociative) {\n    return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);\n  }\n\n  function isOrdered(maybeOrdered) {\n    return !!(maybeOrdered && maybeOrdered[IS_ORDERED_SENTINEL]);\n  }\n\n  Iterable.isIterable = isIterable;\n  Iterable.isKeyed = isKeyed;\n  Iterable.isIndexed = isIndexed;\n  Iterable.isAssociative = isAssociative;\n  Iterable.isOrdered = isOrdered;\n\n  Iterable.Keyed = KeyedIterable;\n  Iterable.Indexed = IndexedIterable;\n  Iterable.Set = SetIterable;\n\n\n  var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\n  var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\n  var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';\n  var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\n\n  // Used for setting prototype methods that IE8 chokes on.\n  var DELETE = 'delete';\n\n  // Constants describing the size of trie nodes.\n  var SHIFT = 5; // Resulted in best performance after ______?\n  var SIZE = 1 << SHIFT;\n  var MASK = SIZE - 1;\n\n  // A consistent shared value representing \"not set\" which equals nothing other\n  // than itself, and nothing that could be provided externally.\n  var NOT_SET = {};\n\n  // Boolean references, Rough equivalent of `bool &`.\n  var CHANGE_LENGTH = { value: false };\n  var DID_ALTER = { value: false };\n\n  function MakeRef(ref) {\n    ref.value = false;\n    return ref;\n  }\n\n  function SetRef(ref) {\n    ref && (ref.value = true);\n  }\n\n  // A function which returns a value representing an \"owner\" for transient writes\n  // to tries. The return value will only ever equal itself, and will not equal\n  // the return of any subsequent call of this function.\n  function OwnerID() {}\n\n  // http://jsperf.com/copy-array-inline\n  function arrCopy(arr, offset) {\n    offset = offset || 0;\n    var len = Math.max(0, arr.length - offset);\n    var newArr = new Array(len);\n    for (var ii = 0; ii < len; ii++) {\n      newArr[ii] = arr[ii + offset];\n    }\n    return newArr;\n  }\n\n  function ensureSize(iter) {\n    if (iter.size === undefined) {\n      iter.size = iter.__iterate(returnTrue);\n    }\n    return iter.size;\n  }\n\n  function wrapIndex(iter, index) {\n    // This implements \"is array index\" which the ECMAString spec defines as:\n    //\n    //     A String property name P is an array index if and only if\n    //     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal\n    //     to 2^32−1.\n    //\n    // http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects\n    if (typeof index !== 'number') {\n      var uint32Index = index >>> 0; // N >>> 0 is shorthand for ToUint32\n      if ('' + uint32Index !== index || uint32Index === 4294967295) {\n        return NaN;\n      }\n      index = uint32Index;\n    }\n    return index < 0 ? ensureSize(iter) + index : index;\n  }\n\n  function returnTrue() {\n    return true;\n  }\n\n  function wholeSlice(begin, end, size) {\n    return (begin === 0 || (size !== undefined && begin <= -size)) &&\n      (end === undefined || (size !== undefined && end >= size));\n  }\n\n  function resolveBegin(begin, size) {\n    return resolveIndex(begin, size, 0);\n  }\n\n  function resolveEnd(end, size) {\n    return resolveIndex(end, size, size);\n  }\n\n  function resolveIndex(index, size, defaultIndex) {\n    return index === undefined ?\n      defaultIndex :\n      index < 0 ?\n        Math.max(0, size + index) :\n        size === undefined ?\n          index :\n          Math.min(size, index);\n  }\n\n  /* global Symbol */\n\n  var ITERATE_KEYS = 0;\n  var ITERATE_VALUES = 1;\n  var ITERATE_ENTRIES = 2;\n\n  var REAL_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n  var FAUX_ITERATOR_SYMBOL = '@@iterator';\n\n  var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;\n\n\n  function Iterator(next) {\n      this.next = next;\n    }\n\n    Iterator.prototype.toString = function() {\n      return '[Iterator]';\n    };\n\n\n  Iterator.KEYS = ITERATE_KEYS;\n  Iterator.VALUES = ITERATE_VALUES;\n  Iterator.ENTRIES = ITERATE_ENTRIES;\n\n  Iterator.prototype.inspect =\n  Iterator.prototype.toSource = function () { return this.toString(); }\n  Iterator.prototype[ITERATOR_SYMBOL] = function () {\n    return this;\n  };\n\n\n  function iteratorValue(type, k, v, iteratorResult) {\n    var value = type === 0 ? k : type === 1 ? v : [k, v];\n    iteratorResult ? (iteratorResult.value = value) : (iteratorResult = {\n      value: value, done: false\n    });\n    return iteratorResult;\n  }\n\n  function iteratorDone() {\n    return { value: undefined, done: true };\n  }\n\n  function hasIterator(maybeIterable) {\n    return !!getIteratorFn(maybeIterable);\n  }\n\n  function isIterator(maybeIterator) {\n    return maybeIterator && typeof maybeIterator.next === 'function';\n  }\n\n  function getIterator(iterable) {\n    var iteratorFn = getIteratorFn(iterable);\n    return iteratorFn && iteratorFn.call(iterable);\n  }\n\n  function getIteratorFn(iterable) {\n    var iteratorFn = iterable && (\n      (REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL]) ||\n      iterable[FAUX_ITERATOR_SYMBOL]\n    );\n    if (typeof iteratorFn === 'function') {\n      return iteratorFn;\n    }\n  }\n\n  function isArrayLike(value) {\n    return value && typeof value.length === 'number';\n  }\n\n  createClass(Seq, Iterable);\n    function Seq(value) {\n      return value === null || value === undefined ? emptySequence() :\n        isIterable(value) ? value.toSeq() : seqFromValue(value);\n    }\n\n    Seq.of = function(/*...values*/) {\n      return Seq(arguments);\n    };\n\n    Seq.prototype.toSeq = function() {\n      return this;\n    };\n\n    Seq.prototype.toString = function() {\n      return this.__toString('Seq {', '}');\n    };\n\n    Seq.prototype.cacheResult = function() {\n      if (!this._cache && this.__iterateUncached) {\n        this._cache = this.entrySeq().toArray();\n        this.size = this._cache.length;\n      }\n      return this;\n    };\n\n    // abstract __iterateUncached(fn, reverse)\n\n    Seq.prototype.__iterate = function(fn, reverse) {\n      return seqIterate(this, fn, reverse, true);\n    };\n\n    // abstract __iteratorUncached(type, reverse)\n\n    Seq.prototype.__iterator = function(type, reverse) {\n      return seqIterator(this, type, reverse, true);\n    };\n\n\n\n  createClass(KeyedSeq, Seq);\n    function KeyedSeq(value) {\n      return value === null || value === undefined ?\n        emptySequence().toKeyedSeq() :\n        isIterable(value) ?\n          (isKeyed(value) ? value.toSeq() : value.fromEntrySeq()) :\n          keyedSeqFromValue(value);\n    }\n\n    KeyedSeq.prototype.toKeyedSeq = function() {\n      return this;\n    };\n\n\n\n  createClass(IndexedSeq, Seq);\n    function IndexedSeq(value) {\n      return value === null || value === undefined ? emptySequence() :\n        !isIterable(value) ? indexedSeqFromValue(value) :\n        isKeyed(value) ? value.entrySeq() : value.toIndexedSeq();\n    }\n\n    IndexedSeq.of = function(/*...values*/) {\n      return IndexedSeq(arguments);\n    };\n\n    IndexedSeq.prototype.toIndexedSeq = function() {\n      return this;\n    };\n\n    IndexedSeq.prototype.toString = function() {\n      return this.__toString('Seq [', ']');\n    };\n\n    IndexedSeq.prototype.__iterate = function(fn, reverse) {\n      return seqIterate(this, fn, reverse, false);\n    };\n\n    IndexedSeq.prototype.__iterator = function(type, reverse) {\n      return seqIterator(this, type, reverse, false);\n    };\n\n\n\n  createClass(SetSeq, Seq);\n    function SetSeq(value) {\n      return (\n        value === null || value === undefined ? emptySequence() :\n        !isIterable(value) ? indexedSeqFromValue(value) :\n        isKeyed(value) ? value.entrySeq() : value\n      ).toSetSeq();\n    }\n\n    SetSeq.of = function(/*...values*/) {\n      return SetSeq(arguments);\n    };\n\n    SetSeq.prototype.toSetSeq = function() {\n      return this;\n    };\n\n\n\n  Seq.isSeq = isSeq;\n  Seq.Keyed = KeyedSeq;\n  Seq.Set = SetSeq;\n  Seq.Indexed = IndexedSeq;\n\n  var IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';\n\n  Seq.prototype[IS_SEQ_SENTINEL] = true;\n\n\n\n  createClass(ArraySeq, IndexedSeq);\n    function ArraySeq(array) {\n      this._array = array;\n      this.size = array.length;\n    }\n\n    ArraySeq.prototype.get = function(index, notSetValue) {\n      return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;\n    };\n\n    ArraySeq.prototype.__iterate = function(fn, reverse) {\n      var array = this._array;\n      var maxIndex = array.length - 1;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        if (fn(array[reverse ? maxIndex - ii : ii], ii, this) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    };\n\n    ArraySeq.prototype.__iterator = function(type, reverse) {\n      var array = this._array;\n      var maxIndex = array.length - 1;\n      var ii = 0;\n      return new Iterator(function() \n        {return ii > maxIndex ?\n          iteratorDone() :\n          iteratorValue(type, ii, array[reverse ? maxIndex - ii++ : ii++])}\n      );\n    };\n\n\n\n  createClass(ObjectSeq, KeyedSeq);\n    function ObjectSeq(object) {\n      var keys = Object.keys(object);\n      this._object = object;\n      this._keys = keys;\n      this.size = keys.length;\n    }\n\n    ObjectSeq.prototype.get = function(key, notSetValue) {\n      if (notSetValue !== undefined && !this.has(key)) {\n        return notSetValue;\n      }\n      return this._object[key];\n    };\n\n    ObjectSeq.prototype.has = function(key) {\n      return this._object.hasOwnProperty(key);\n    };\n\n    ObjectSeq.prototype.__iterate = function(fn, reverse) {\n      var object = this._object;\n      var keys = this._keys;\n      var maxIndex = keys.length - 1;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        var key = keys[reverse ? maxIndex - ii : ii];\n        if (fn(object[key], key, this) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    };\n\n    ObjectSeq.prototype.__iterator = function(type, reverse) {\n      var object = this._object;\n      var keys = this._keys;\n      var maxIndex = keys.length - 1;\n      var ii = 0;\n      return new Iterator(function()  {\n        var key = keys[reverse ? maxIndex - ii : ii];\n        return ii++ > maxIndex ?\n          iteratorDone() :\n          iteratorValue(type, key, object[key]);\n      });\n    };\n\n  ObjectSeq.prototype[IS_ORDERED_SENTINEL] = true;\n\n\n  createClass(IterableSeq, IndexedSeq);\n    function IterableSeq(iterable) {\n      this._iterable = iterable;\n      this.size = iterable.length || iterable.size;\n    }\n\n    IterableSeq.prototype.__iterateUncached = function(fn, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var iterable = this._iterable;\n      var iterator = getIterator(iterable);\n      var iterations = 0;\n      if (isIterator(iterator)) {\n        var step;\n        while (!(step = iterator.next()).done) {\n          if (fn(step.value, iterations++, this) === false) {\n            break;\n          }\n        }\n      }\n      return iterations;\n    };\n\n    IterableSeq.prototype.__iteratorUncached = function(type, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterable = this._iterable;\n      var iterator = getIterator(iterable);\n      if (!isIterator(iterator)) {\n        return new Iterator(iteratorDone);\n      }\n      var iterations = 0;\n      return new Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step : iteratorValue(type, iterations++, step.value);\n      });\n    };\n\n\n\n  createClass(IteratorSeq, IndexedSeq);\n    function IteratorSeq(iterator) {\n      this._iterator = iterator;\n      this._iteratorCache = [];\n    }\n\n    IteratorSeq.prototype.__iterateUncached = function(fn, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var iterator = this._iterator;\n      var cache = this._iteratorCache;\n      var iterations = 0;\n      while (iterations < cache.length) {\n        if (fn(cache[iterations], iterations++, this) === false) {\n          return iterations;\n        }\n      }\n      var step;\n      while (!(step = iterator.next()).done) {\n        var val = step.value;\n        cache[iterations] = val;\n        if (fn(val, iterations++, this) === false) {\n          break;\n        }\n      }\n      return iterations;\n    };\n\n    IteratorSeq.prototype.__iteratorUncached = function(type, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterator = this._iterator;\n      var cache = this._iteratorCache;\n      var iterations = 0;\n      return new Iterator(function()  {\n        if (iterations >= cache.length) {\n          var step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n          cache[iterations] = step.value;\n        }\n        return iteratorValue(type, iterations, cache[iterations++]);\n      });\n    };\n\n\n\n\n  // # pragma Helper functions\n\n  function isSeq(maybeSeq) {\n    return !!(maybeSeq && maybeSeq[IS_SEQ_SENTINEL]);\n  }\n\n  var EMPTY_SEQ;\n\n  function emptySequence() {\n    return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));\n  }\n\n  function keyedSeqFromValue(value) {\n    var seq =\n      Array.isArray(value) ? new ArraySeq(value).fromEntrySeq() :\n      isIterator(value) ? new IteratorSeq(value).fromEntrySeq() :\n      hasIterator(value) ? new IterableSeq(value).fromEntrySeq() :\n      typeof value === 'object' ? new ObjectSeq(value) :\n      undefined;\n    if (!seq) {\n      throw new TypeError(\n        'Expected Array or iterable object of [k, v] entries, '+\n        'or keyed object: ' + value\n      );\n    }\n    return seq;\n  }\n\n  function indexedSeqFromValue(value) {\n    var seq = maybeIndexedSeqFromValue(value);\n    if (!seq) {\n      throw new TypeError(\n        'Expected Array or iterable object of values: ' + value\n      );\n    }\n    return seq;\n  }\n\n  function seqFromValue(value) {\n    var seq = maybeIndexedSeqFromValue(value) ||\n      (typeof value === 'object' && new ObjectSeq(value));\n    if (!seq) {\n      throw new TypeError(\n        'Expected Array or iterable object of values, or keyed object: ' + value\n      );\n    }\n    return seq;\n  }\n\n  function maybeIndexedSeqFromValue(value) {\n    return (\n      isArrayLike(value) ? new ArraySeq(value) :\n      isIterator(value) ? new IteratorSeq(value) :\n      hasIterator(value) ? new IterableSeq(value) :\n      undefined\n    );\n  }\n\n  function seqIterate(seq, fn, reverse, useKeys) {\n    var cache = seq._cache;\n    if (cache) {\n      var maxIndex = cache.length - 1;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        var entry = cache[reverse ? maxIndex - ii : ii];\n        if (fn(entry[1], useKeys ? entry[0] : ii, seq) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    }\n    return seq.__iterateUncached(fn, reverse);\n  }\n\n  function seqIterator(seq, type, reverse, useKeys) {\n    var cache = seq._cache;\n    if (cache) {\n      var maxIndex = cache.length - 1;\n      var ii = 0;\n      return new Iterator(function()  {\n        var entry = cache[reverse ? maxIndex - ii : ii];\n        return ii++ > maxIndex ?\n          iteratorDone() :\n          iteratorValue(type, useKeys ? entry[0] : ii - 1, entry[1]);\n      });\n    }\n    return seq.__iteratorUncached(type, reverse);\n  }\n\n  function fromJS(json, converter) {\n    return converter ?\n      fromJSWith(converter, json, '', {'': json}) :\n      fromJSDefault(json);\n  }\n\n  function fromJSWith(converter, json, key, parentJSON) {\n    if (Array.isArray(json)) {\n      return converter.call(parentJSON, key, IndexedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));\n    }\n    if (isPlainObj(json)) {\n      return converter.call(parentJSON, key, KeyedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));\n    }\n    return json;\n  }\n\n  function fromJSDefault(json) {\n    if (Array.isArray(json)) {\n      return IndexedSeq(json).map(fromJSDefault).toList();\n    }\n    if (isPlainObj(json)) {\n      return KeyedSeq(json).map(fromJSDefault).toMap();\n    }\n    return json;\n  }\n\n  function isPlainObj(value) {\n    return value && (value.constructor === Object || value.constructor === undefined);\n  }\n\n  /**\n   * An extension of the \"same-value\" algorithm as [described for use by ES6 Map\n   * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)\n   *\n   * NaN is considered the same as NaN, however -0 and 0 are considered the same\n   * value, which is different from the algorithm described by\n   * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n   *\n   * This is extended further to allow Objects to describe the values they\n   * represent, by way of `valueOf` or `equals` (and `hashCode`).\n   *\n   * Note: because of this extension, the key equality of Immutable.Map and the\n   * value equality of Immutable.Set will differ from ES6 Map and Set.\n   *\n   * ### Defining custom values\n   *\n   * The easiest way to describe the value an object represents is by implementing\n   * `valueOf`. For example, `Date` represents a value by returning a unix\n   * timestamp for `valueOf`:\n   *\n   *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...\n   *     var date2 = new Date(1234567890000);\n   *     date1.valueOf(); // 1234567890000\n   *     assert( date1 !== date2 );\n   *     assert( Immutable.is( date1, date2 ) );\n   *\n   * Note: overriding `valueOf` may have other implications if you use this object\n   * where JavaScript expects a primitive, such as implicit string coercion.\n   *\n   * For more complex types, especially collections, implementing `valueOf` may\n   * not be performant. An alternative is to implement `equals` and `hashCode`.\n   *\n   * `equals` takes another object, presumably of similar type, and returns true\n   * if the it is equal. Equality is symmetrical, so the same result should be\n   * returned if this and the argument are flipped.\n   *\n   *     assert( a.equals(b) === b.equals(a) );\n   *\n   * `hashCode` returns a 32bit integer number representing the object which will\n   * be used to determine how to store the value object in a Map or Set. You must\n   * provide both or neither methods, one must not exist without the other.\n   *\n   * Also, an important relationship between these methods must be upheld: if two\n   * values are equal, they *must* return the same hashCode. If the values are not\n   * equal, they might have the same hashCode; this is called a hash collision,\n   * and while undesirable for performance reasons, it is acceptable.\n   *\n   *     if (a.equals(b)) {\n   *       assert( a.hashCode() === b.hashCode() );\n   *     }\n   *\n   * All Immutable collections implement `equals` and `hashCode`.\n   *\n   */\n  function is(valueA, valueB) {\n    if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n      return true;\n    }\n    if (!valueA || !valueB) {\n      return false;\n    }\n    if (typeof valueA.valueOf === 'function' &&\n        typeof valueB.valueOf === 'function') {\n      valueA = valueA.valueOf();\n      valueB = valueB.valueOf();\n      if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n        return true;\n      }\n      if (!valueA || !valueB) {\n        return false;\n      }\n    }\n    if (typeof valueA.equals === 'function' &&\n        typeof valueB.equals === 'function' &&\n        valueA.equals(valueB)) {\n      return true;\n    }\n    return false;\n  }\n\n  function deepEqual(a, b) {\n    if (a === b) {\n      return true;\n    }\n\n    if (\n      !isIterable(b) ||\n      a.size !== undefined && b.size !== undefined && a.size !== b.size ||\n      a.__hash !== undefined && b.__hash !== undefined && a.__hash !== b.__hash ||\n      isKeyed(a) !== isKeyed(b) ||\n      isIndexed(a) !== isIndexed(b) ||\n      isOrdered(a) !== isOrdered(b)\n    ) {\n      return false;\n    }\n\n    if (a.size === 0 && b.size === 0) {\n      return true;\n    }\n\n    var notAssociative = !isAssociative(a);\n\n    if (isOrdered(a)) {\n      var entries = a.entries();\n      return b.every(function(v, k)  {\n        var entry = entries.next().value;\n        return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));\n      }) && entries.next().done;\n    }\n\n    var flipped = false;\n\n    if (a.size === undefined) {\n      if (b.size === undefined) {\n        if (typeof a.cacheResult === 'function') {\n          a.cacheResult();\n        }\n      } else {\n        flipped = true;\n        var _ = a;\n        a = b;\n        b = _;\n      }\n    }\n\n    var allEqual = true;\n    var bSize = b.__iterate(function(v, k)  {\n      if (notAssociative ? !a.has(v) :\n          flipped ? !is(v, a.get(k, NOT_SET)) : !is(a.get(k, NOT_SET), v)) {\n        allEqual = false;\n        return false;\n      }\n    });\n\n    return allEqual && a.size === bSize;\n  }\n\n  createClass(Repeat, IndexedSeq);\n\n    function Repeat(value, times) {\n      if (!(this instanceof Repeat)) {\n        return new Repeat(value, times);\n      }\n      this._value = value;\n      this.size = times === undefined ? Infinity : Math.max(0, times);\n      if (this.size === 0) {\n        if (EMPTY_REPEAT) {\n          return EMPTY_REPEAT;\n        }\n        EMPTY_REPEAT = this;\n      }\n    }\n\n    Repeat.prototype.toString = function() {\n      if (this.size === 0) {\n        return 'Repeat []';\n      }\n      return 'Repeat [ ' + this._value + ' ' + this.size + ' times ]';\n    };\n\n    Repeat.prototype.get = function(index, notSetValue) {\n      return this.has(index) ? this._value : notSetValue;\n    };\n\n    Repeat.prototype.includes = function(searchValue) {\n      return is(this._value, searchValue);\n    };\n\n    Repeat.prototype.slice = function(begin, end) {\n      var size = this.size;\n      return wholeSlice(begin, end, size) ? this :\n        new Repeat(this._value, resolveEnd(end, size) - resolveBegin(begin, size));\n    };\n\n    Repeat.prototype.reverse = function() {\n      return this;\n    };\n\n    Repeat.prototype.indexOf = function(searchValue) {\n      if (is(this._value, searchValue)) {\n        return 0;\n      }\n      return -1;\n    };\n\n    Repeat.prototype.lastIndexOf = function(searchValue) {\n      if (is(this._value, searchValue)) {\n        return this.size;\n      }\n      return -1;\n    };\n\n    Repeat.prototype.__iterate = function(fn, reverse) {\n      for (var ii = 0; ii < this.size; ii++) {\n        if (fn(this._value, ii, this) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    };\n\n    Repeat.prototype.__iterator = function(type, reverse) {var this$0 = this;\n      var ii = 0;\n      return new Iterator(function() \n        {return ii < this$0.size ? iteratorValue(type, ii++, this$0._value) : iteratorDone()}\n      );\n    };\n\n    Repeat.prototype.equals = function(other) {\n      return other instanceof Repeat ?\n        is(this._value, other._value) :\n        deepEqual(other);\n    };\n\n\n  var EMPTY_REPEAT;\n\n  function invariant(condition, error) {\n    if (!condition) throw new Error(error);\n  }\n\n  createClass(Range, IndexedSeq);\n\n    function Range(start, end, step) {\n      if (!(this instanceof Range)) {\n        return new Range(start, end, step);\n      }\n      invariant(step !== 0, 'Cannot step a Range by 0');\n      start = start || 0;\n      if (end === undefined) {\n        end = Infinity;\n      }\n      step = step === undefined ? 1 : Math.abs(step);\n      if (end < start) {\n        step = -step;\n      }\n      this._start = start;\n      this._end = end;\n      this._step = step;\n      this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);\n      if (this.size === 0) {\n        if (EMPTY_RANGE) {\n          return EMPTY_RANGE;\n        }\n        EMPTY_RANGE = this;\n      }\n    }\n\n    Range.prototype.toString = function() {\n      if (this.size === 0) {\n        return 'Range []';\n      }\n      return 'Range [ ' +\n        this._start + '...' + this._end +\n        (this._step > 1 ? ' by ' + this._step : '') +\n      ' ]';\n    };\n\n    Range.prototype.get = function(index, notSetValue) {\n      return this.has(index) ?\n        this._start + wrapIndex(this, index) * this._step :\n        notSetValue;\n    };\n\n    Range.prototype.includes = function(searchValue) {\n      var possibleIndex = (searchValue - this._start) / this._step;\n      return possibleIndex >= 0 &&\n        possibleIndex < this.size &&\n        possibleIndex === Math.floor(possibleIndex);\n    };\n\n    Range.prototype.slice = function(begin, end) {\n      if (wholeSlice(begin, end, this.size)) {\n        return this;\n      }\n      begin = resolveBegin(begin, this.size);\n      end = resolveEnd(end, this.size);\n      if (end <= begin) {\n        return new Range(0, 0);\n      }\n      return new Range(this.get(begin, this._end), this.get(end, this._end), this._step);\n    };\n\n    Range.prototype.indexOf = function(searchValue) {\n      var offsetValue = searchValue - this._start;\n      if (offsetValue % this._step === 0) {\n        var index = offsetValue / this._step;\n        if (index >= 0 && index < this.size) {\n          return index\n        }\n      }\n      return -1;\n    };\n\n    Range.prototype.lastIndexOf = function(searchValue) {\n      return this.indexOf(searchValue);\n    };\n\n    Range.prototype.__iterate = function(fn, reverse) {\n      var maxIndex = this.size - 1;\n      var step = this._step;\n      var value = reverse ? this._start + maxIndex * step : this._start;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        if (fn(value, ii, this) === false) {\n          return ii + 1;\n        }\n        value += reverse ? -step : step;\n      }\n      return ii;\n    };\n\n    Range.prototype.__iterator = function(type, reverse) {\n      var maxIndex = this.size - 1;\n      var step = this._step;\n      var value = reverse ? this._start + maxIndex * step : this._start;\n      var ii = 0;\n      return new Iterator(function()  {\n        var v = value;\n        value += reverse ? -step : step;\n        return ii > maxIndex ? iteratorDone() : iteratorValue(type, ii++, v);\n      });\n    };\n\n    Range.prototype.equals = function(other) {\n      return other instanceof Range ?\n        this._start === other._start &&\n        this._end === other._end &&\n        this._step === other._step :\n        deepEqual(this, other);\n    };\n\n\n  var EMPTY_RANGE;\n\n  createClass(Collection, Iterable);\n    function Collection() {\n      throw TypeError('Abstract');\n    }\n\n\n  createClass(KeyedCollection, Collection);function KeyedCollection() {}\n\n  createClass(IndexedCollection, Collection);function IndexedCollection() {}\n\n  createClass(SetCollection, Collection);function SetCollection() {}\n\n\n  Collection.Keyed = KeyedCollection;\n  Collection.Indexed = IndexedCollection;\n  Collection.Set = SetCollection;\n\n  var imul =\n    typeof Math.imul === 'function' && Math.imul(0xffffffff, 2) === -2 ?\n    Math.imul :\n    function imul(a, b) {\n      a = a | 0; // int\n      b = b | 0; // int\n      var c = a & 0xffff;\n      var d = b & 0xffff;\n      // Shift by 0 fixes the sign on the high part.\n      return (c * d) + ((((a >>> 16) * d + c * (b >>> 16)) << 16) >>> 0) | 0; // int\n    };\n\n  // v8 has an optimization for storing 31-bit signed numbers.\n  // Values which have either 00 or 11 as the high order bits qualify.\n  // This function drops the highest order bit in a signed number, maintaining\n  // the sign bit.\n  function smi(i32) {\n    return ((i32 >>> 1) & 0x40000000) | (i32 & 0xBFFFFFFF);\n  }\n\n  function hash(o) {\n    if (o === false || o === null || o === undefined) {\n      return 0;\n    }\n    if (typeof o.valueOf === 'function') {\n      o = o.valueOf();\n      if (o === false || o === null || o === undefined) {\n        return 0;\n      }\n    }\n    if (o === true) {\n      return 1;\n    }\n    var type = typeof o;\n    if (type === 'number') {\n      var h = o | 0;\n      if (h !== o) {\n        h ^= o * 0xFFFFFFFF;\n      }\n      while (o > 0xFFFFFFFF) {\n        o /= 0xFFFFFFFF;\n        h ^= o;\n      }\n      return smi(h);\n    }\n    if (type === 'string') {\n      return o.length > STRING_HASH_CACHE_MIN_STRLEN ? cachedHashString(o) : hashString(o);\n    }\n    if (typeof o.hashCode === 'function') {\n      return o.hashCode();\n    }\n    if (type === 'object') {\n      return hashJSObj(o);\n    }\n    if (typeof o.toString === 'function') {\n      return hashString(o.toString());\n    }\n    throw new Error('Value type ' + type + ' cannot be hashed.');\n  }\n\n  function cachedHashString(string) {\n    var hash = stringHashCache[string];\n    if (hash === undefined) {\n      hash = hashString(string);\n      if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {\n        STRING_HASH_CACHE_SIZE = 0;\n        stringHashCache = {};\n      }\n      STRING_HASH_CACHE_SIZE++;\n      stringHashCache[string] = hash;\n    }\n    return hash;\n  }\n\n  // http://jsperf.com/hashing-strings\n  function hashString(string) {\n    // This is the hash from JVM\n    // The hash code for a string is computed as\n    // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],\n    // where s[i] is the ith character of the string and n is the length of\n    // the string. We \"mod\" the result to make it between 0 (inclusive) and 2^31\n    // (exclusive) by dropping high bits.\n    var hash = 0;\n    for (var ii = 0; ii < string.length; ii++) {\n      hash = 31 * hash + string.charCodeAt(ii) | 0;\n    }\n    return smi(hash);\n  }\n\n  function hashJSObj(obj) {\n    var hash;\n    if (usingWeakMap) {\n      hash = weakMap.get(obj);\n      if (hash !== undefined) {\n        return hash;\n      }\n    }\n\n    hash = obj[UID_HASH_KEY];\n    if (hash !== undefined) {\n      return hash;\n    }\n\n    if (!canDefineProperty) {\n      hash = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];\n      if (hash !== undefined) {\n        return hash;\n      }\n\n      hash = getIENodeHash(obj);\n      if (hash !== undefined) {\n        return hash;\n      }\n    }\n\n    hash = ++objHashUID;\n    if (objHashUID & 0x40000000) {\n      objHashUID = 0;\n    }\n\n    if (usingWeakMap) {\n      weakMap.set(obj, hash);\n    } else if (isExtensible !== undefined && isExtensible(obj) === false) {\n      throw new Error('Non-extensible objects are not allowed as keys.');\n    } else if (canDefineProperty) {\n      Object.defineProperty(obj, UID_HASH_KEY, {\n        'enumerable': false,\n        'configurable': false,\n        'writable': false,\n        'value': hash\n      });\n    } else if (obj.propertyIsEnumerable !== undefined &&\n               obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable) {\n      // Since we can't define a non-enumerable property on the object\n      // we'll hijack one of the less-used non-enumerable properties to\n      // save our hash on it. Since this is a function it will not show up in\n      // `JSON.stringify` which is what we want.\n      obj.propertyIsEnumerable = function() {\n        return this.constructor.prototype.propertyIsEnumerable.apply(this, arguments);\n      };\n      obj.propertyIsEnumerable[UID_HASH_KEY] = hash;\n    } else if (obj.nodeType !== undefined) {\n      // At this point we couldn't get the IE `uniqueID` to use as a hash\n      // and we couldn't use a non-enumerable property to exploit the\n      // dontEnum bug so we simply add the `UID_HASH_KEY` on the node\n      // itself.\n      obj[UID_HASH_KEY] = hash;\n    } else {\n      throw new Error('Unable to set a non-enumerable property on object.');\n    }\n\n    return hash;\n  }\n\n  // Get references to ES5 object methods.\n  var isExtensible = Object.isExtensible;\n\n  // True if Object.defineProperty works as expected. IE8 fails this test.\n  var canDefineProperty = (function() {\n    try {\n      Object.defineProperty({}, '@', {});\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }());\n\n  // IE has a `uniqueID` property on DOM nodes. We can construct the hash from it\n  // and avoid memory leaks from the IE cloneNode bug.\n  function getIENodeHash(node) {\n    if (node && node.nodeType > 0) {\n      switch (node.nodeType) {\n        case 1: // Element\n          return node.uniqueID;\n        case 9: // Document\n          return node.documentElement && node.documentElement.uniqueID;\n      }\n    }\n  }\n\n  // If possible, use a WeakMap.\n  var usingWeakMap = typeof WeakMap === 'function';\n  var weakMap;\n  if (usingWeakMap) {\n    weakMap = new WeakMap();\n  }\n\n  var objHashUID = 0;\n\n  var UID_HASH_KEY = '__immutablehash__';\n  if (typeof Symbol === 'function') {\n    UID_HASH_KEY = Symbol(UID_HASH_KEY);\n  }\n\n  var STRING_HASH_CACHE_MIN_STRLEN = 16;\n  var STRING_HASH_CACHE_MAX_SIZE = 255;\n  var STRING_HASH_CACHE_SIZE = 0;\n  var stringHashCache = {};\n\n  function assertNotInfinite(size) {\n    invariant(\n      size !== Infinity,\n      'Cannot perform this action with an infinite size.'\n    );\n  }\n\n  createClass(Map, KeyedCollection);\n\n    // @pragma Construction\n\n    function Map(value) {\n      return value === null || value === undefined ? emptyMap() :\n        isMap(value) && !isOrdered(value) ? value :\n        emptyMap().withMutations(function(map ) {\n          var iter = KeyedIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v, k)  {return map.set(k, v)});\n        });\n    }\n\n    Map.prototype.toString = function() {\n      return this.__toString('Map {', '}');\n    };\n\n    // @pragma Access\n\n    Map.prototype.get = function(k, notSetValue) {\n      return this._root ?\n        this._root.get(0, undefined, k, notSetValue) :\n        notSetValue;\n    };\n\n    // @pragma Modification\n\n    Map.prototype.set = function(k, v) {\n      return updateMap(this, k, v);\n    };\n\n    Map.prototype.setIn = function(keyPath, v) {\n      return this.updateIn(keyPath, NOT_SET, function()  {return v});\n    };\n\n    Map.prototype.remove = function(k) {\n      return updateMap(this, k, NOT_SET);\n    };\n\n    Map.prototype.deleteIn = function(keyPath) {\n      return this.updateIn(keyPath, function()  {return NOT_SET});\n    };\n\n    Map.prototype.update = function(k, notSetValue, updater) {\n      return arguments.length === 1 ?\n        k(this) :\n        this.updateIn([k], notSetValue, updater);\n    };\n\n    Map.prototype.updateIn = function(keyPath, notSetValue, updater) {\n      if (!updater) {\n        updater = notSetValue;\n        notSetValue = undefined;\n      }\n      var updatedValue = updateInDeepMap(\n        this,\n        forceIterator(keyPath),\n        notSetValue,\n        updater\n      );\n      return updatedValue === NOT_SET ? undefined : updatedValue;\n    };\n\n    Map.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = 0;\n        this._root = null;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return emptyMap();\n    };\n\n    // @pragma Composition\n\n    Map.prototype.merge = function(/*...iters*/) {\n      return mergeIntoMapWith(this, undefined, arguments);\n    };\n\n    Map.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoMapWith(this, merger, iters);\n    };\n\n    Map.prototype.mergeIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);\n      return this.updateIn(\n        keyPath,\n        emptyMap(),\n        function(m ) {return typeof m.merge === 'function' ?\n          m.merge.apply(m, iters) :\n          iters[iters.length - 1]}\n      );\n    };\n\n    Map.prototype.mergeDeep = function(/*...iters*/) {\n      return mergeIntoMapWith(this, deepMerger, arguments);\n    };\n\n    Map.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoMapWith(this, deepMergerWith(merger), iters);\n    };\n\n    Map.prototype.mergeDeepIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);\n      return this.updateIn(\n        keyPath,\n        emptyMap(),\n        function(m ) {return typeof m.mergeDeep === 'function' ?\n          m.mergeDeep.apply(m, iters) :\n          iters[iters.length - 1]}\n      );\n    };\n\n    Map.prototype.sort = function(comparator) {\n      // Late binding\n      return OrderedMap(sortFactory(this, comparator));\n    };\n\n    Map.prototype.sortBy = function(mapper, comparator) {\n      // Late binding\n      return OrderedMap(sortFactory(this, comparator, mapper));\n    };\n\n    // @pragma Mutability\n\n    Map.prototype.withMutations = function(fn) {\n      var mutable = this.asMutable();\n      fn(mutable);\n      return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;\n    };\n\n    Map.prototype.asMutable = function() {\n      return this.__ownerID ? this : this.__ensureOwner(new OwnerID());\n    };\n\n    Map.prototype.asImmutable = function() {\n      return this.__ensureOwner();\n    };\n\n    Map.prototype.wasAltered = function() {\n      return this.__altered;\n    };\n\n    Map.prototype.__iterator = function(type, reverse) {\n      return new MapIterator(this, type, reverse);\n    };\n\n    Map.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      this._root && this._root.iterate(function(entry ) {\n        iterations++;\n        return fn(entry[1], entry[0], this$0);\n      }, reverse);\n      return iterations;\n    };\n\n    Map.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this.__altered = false;\n        return this;\n      }\n      return makeMap(this.size, this._root, ownerID, this.__hash);\n    };\n\n\n  function isMap(maybeMap) {\n    return !!(maybeMap && maybeMap[IS_MAP_SENTINEL]);\n  }\n\n  Map.isMap = isMap;\n\n  var IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';\n\n  var MapPrototype = Map.prototype;\n  MapPrototype[IS_MAP_SENTINEL] = true;\n  MapPrototype[DELETE] = MapPrototype.remove;\n  MapPrototype.removeIn = MapPrototype.deleteIn;\n\n\n  // #pragma Trie Nodes\n\n\n\n    function ArrayMapNode(ownerID, entries) {\n      this.ownerID = ownerID;\n      this.entries = entries;\n    }\n\n    ArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      var entries = this.entries;\n      for (var ii = 0, len = entries.length; ii < len; ii++) {\n        if (is(key, entries[ii][0])) {\n          return entries[ii][1];\n        }\n      }\n      return notSetValue;\n    };\n\n    ArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      var removed = value === NOT_SET;\n\n      var entries = this.entries;\n      var idx = 0;\n      for (var len = entries.length; idx < len; idx++) {\n        if (is(key, entries[idx][0])) {\n          break;\n        }\n      }\n      var exists = idx < len;\n\n      if (exists ? entries[idx][1] === value : removed) {\n        return this;\n      }\n\n      SetRef(didAlter);\n      (removed || !exists) && SetRef(didChangeSize);\n\n      if (removed && entries.length === 1) {\n        return; // undefined\n      }\n\n      if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {\n        return createNodes(ownerID, entries, key, value);\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newEntries = isEditable ? entries : arrCopy(entries);\n\n      if (exists) {\n        if (removed) {\n          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());\n        } else {\n          newEntries[idx] = [key, value];\n        }\n      } else {\n        newEntries.push([key, value]);\n      }\n\n      if (isEditable) {\n        this.entries = newEntries;\n        return this;\n      }\n\n      return new ArrayMapNode(ownerID, newEntries);\n    };\n\n\n\n\n    function BitmapIndexedNode(ownerID, bitmap, nodes) {\n      this.ownerID = ownerID;\n      this.bitmap = bitmap;\n      this.nodes = nodes;\n    }\n\n    BitmapIndexedNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var bit = (1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK));\n      var bitmap = this.bitmap;\n      return (bitmap & bit) === 0 ? notSetValue :\n        this.nodes[popCount(bitmap & (bit - 1))].get(shift + SHIFT, keyHash, key, notSetValue);\n    };\n\n    BitmapIndexedNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n      var bit = 1 << keyHashFrag;\n      var bitmap = this.bitmap;\n      var exists = (bitmap & bit) !== 0;\n\n      if (!exists && value === NOT_SET) {\n        return this;\n      }\n\n      var idx = popCount(bitmap & (bit - 1));\n      var nodes = this.nodes;\n      var node = exists ? nodes[idx] : undefined;\n      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);\n\n      if (newNode === node) {\n        return this;\n      }\n\n      if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {\n        return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);\n      }\n\n      if (exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1])) {\n        return nodes[idx ^ 1];\n      }\n\n      if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {\n        return newNode;\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;\n      var newNodes = exists ? newNode ?\n        setIn(nodes, idx, newNode, isEditable) :\n        spliceOut(nodes, idx, isEditable) :\n        spliceIn(nodes, idx, newNode, isEditable);\n\n      if (isEditable) {\n        this.bitmap = newBitmap;\n        this.nodes = newNodes;\n        return this;\n      }\n\n      return new BitmapIndexedNode(ownerID, newBitmap, newNodes);\n    };\n\n\n\n\n    function HashArrayMapNode(ownerID, count, nodes) {\n      this.ownerID = ownerID;\n      this.count = count;\n      this.nodes = nodes;\n    }\n\n    HashArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n      var node = this.nodes[idx];\n      return node ? node.get(shift + SHIFT, keyHash, key, notSetValue) : notSetValue;\n    };\n\n    HashArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n      var removed = value === NOT_SET;\n      var nodes = this.nodes;\n      var node = nodes[idx];\n\n      if (removed && !node) {\n        return this;\n      }\n\n      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);\n      if (newNode === node) {\n        return this;\n      }\n\n      var newCount = this.count;\n      if (!node) {\n        newCount++;\n      } else if (!newNode) {\n        newCount--;\n        if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {\n          return packNodes(ownerID, nodes, newCount, idx);\n        }\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newNodes = setIn(nodes, idx, newNode, isEditable);\n\n      if (isEditable) {\n        this.count = newCount;\n        this.nodes = newNodes;\n        return this;\n      }\n\n      return new HashArrayMapNode(ownerID, newCount, newNodes);\n    };\n\n\n\n\n    function HashCollisionNode(ownerID, keyHash, entries) {\n      this.ownerID = ownerID;\n      this.keyHash = keyHash;\n      this.entries = entries;\n    }\n\n    HashCollisionNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      var entries = this.entries;\n      for (var ii = 0, len = entries.length; ii < len; ii++) {\n        if (is(key, entries[ii][0])) {\n          return entries[ii][1];\n        }\n      }\n      return notSetValue;\n    };\n\n    HashCollisionNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n\n      var removed = value === NOT_SET;\n\n      if (keyHash !== this.keyHash) {\n        if (removed) {\n          return this;\n        }\n        SetRef(didAlter);\n        SetRef(didChangeSize);\n        return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);\n      }\n\n      var entries = this.entries;\n      var idx = 0;\n      for (var len = entries.length; idx < len; idx++) {\n        if (is(key, entries[idx][0])) {\n          break;\n        }\n      }\n      var exists = idx < len;\n\n      if (exists ? entries[idx][1] === value : removed) {\n        return this;\n      }\n\n      SetRef(didAlter);\n      (removed || !exists) && SetRef(didChangeSize);\n\n      if (removed && len === 2) {\n        return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newEntries = isEditable ? entries : arrCopy(entries);\n\n      if (exists) {\n        if (removed) {\n          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());\n        } else {\n          newEntries[idx] = [key, value];\n        }\n      } else {\n        newEntries.push([key, value]);\n      }\n\n      if (isEditable) {\n        this.entries = newEntries;\n        return this;\n      }\n\n      return new HashCollisionNode(ownerID, this.keyHash, newEntries);\n    };\n\n\n\n\n    function ValueNode(ownerID, keyHash, entry) {\n      this.ownerID = ownerID;\n      this.keyHash = keyHash;\n      this.entry = entry;\n    }\n\n    ValueNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      return is(key, this.entry[0]) ? this.entry[1] : notSetValue;\n    };\n\n    ValueNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      var removed = value === NOT_SET;\n      var keyMatch = is(key, this.entry[0]);\n      if (keyMatch ? value === this.entry[1] : removed) {\n        return this;\n      }\n\n      SetRef(didAlter);\n\n      if (removed) {\n        SetRef(didChangeSize);\n        return; // undefined\n      }\n\n      if (keyMatch) {\n        if (ownerID && ownerID === this.ownerID) {\n          this.entry[1] = value;\n          return this;\n        }\n        return new ValueNode(ownerID, this.keyHash, [key, value]);\n      }\n\n      SetRef(didChangeSize);\n      return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);\n    };\n\n\n\n  // #pragma Iterators\n\n  ArrayMapNode.prototype.iterate =\n  HashCollisionNode.prototype.iterate = function (fn, reverse) {\n    var entries = this.entries;\n    for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {\n      if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {\n        return false;\n      }\n    }\n  }\n\n  BitmapIndexedNode.prototype.iterate =\n  HashArrayMapNode.prototype.iterate = function (fn, reverse) {\n    var nodes = this.nodes;\n    for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {\n      var node = nodes[reverse ? maxIndex - ii : ii];\n      if (node && node.iterate(fn, reverse) === false) {\n        return false;\n      }\n    }\n  }\n\n  ValueNode.prototype.iterate = function (fn, reverse) {\n    return fn(this.entry);\n  }\n\n  createClass(MapIterator, Iterator);\n\n    function MapIterator(map, type, reverse) {\n      this._type = type;\n      this._reverse = reverse;\n      this._stack = map._root && mapIteratorFrame(map._root);\n    }\n\n    MapIterator.prototype.next = function() {\n      var type = this._type;\n      var stack = this._stack;\n      while (stack) {\n        var node = stack.node;\n        var index = stack.index++;\n        var maxIndex;\n        if (node.entry) {\n          if (index === 0) {\n            return mapIteratorValue(type, node.entry);\n          }\n        } else if (node.entries) {\n          maxIndex = node.entries.length - 1;\n          if (index <= maxIndex) {\n            return mapIteratorValue(type, node.entries[this._reverse ? maxIndex - index : index]);\n          }\n        } else {\n          maxIndex = node.nodes.length - 1;\n          if (index <= maxIndex) {\n            var subNode = node.nodes[this._reverse ? maxIndex - index : index];\n            if (subNode) {\n              if (subNode.entry) {\n                return mapIteratorValue(type, subNode.entry);\n              }\n              stack = this._stack = mapIteratorFrame(subNode, stack);\n            }\n            continue;\n          }\n        }\n        stack = this._stack = this._stack.__prev;\n      }\n      return iteratorDone();\n    };\n\n\n  function mapIteratorValue(type, entry) {\n    return iteratorValue(type, entry[0], entry[1]);\n  }\n\n  function mapIteratorFrame(node, prev) {\n    return {\n      node: node,\n      index: 0,\n      __prev: prev\n    };\n  }\n\n  function makeMap(size, root, ownerID, hash) {\n    var map = Object.create(MapPrototype);\n    map.size = size;\n    map._root = root;\n    map.__ownerID = ownerID;\n    map.__hash = hash;\n    map.__altered = false;\n    return map;\n  }\n\n  var EMPTY_MAP;\n  function emptyMap() {\n    return EMPTY_MAP || (EMPTY_MAP = makeMap(0));\n  }\n\n  function updateMap(map, k, v) {\n    var newRoot;\n    var newSize;\n    if (!map._root) {\n      if (v === NOT_SET) {\n        return map;\n      }\n      newSize = 1;\n      newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);\n    } else {\n      var didChangeSize = MakeRef(CHANGE_LENGTH);\n      var didAlter = MakeRef(DID_ALTER);\n      newRoot = updateNode(map._root, map.__ownerID, 0, undefined, k, v, didChangeSize, didAlter);\n      if (!didAlter.value) {\n        return map;\n      }\n      newSize = map.size + (didChangeSize.value ? v === NOT_SET ? -1 : 1 : 0);\n    }\n    if (map.__ownerID) {\n      map.size = newSize;\n      map._root = newRoot;\n      map.__hash = undefined;\n      map.__altered = true;\n      return map;\n    }\n    return newRoot ? makeMap(newSize, newRoot) : emptyMap();\n  }\n\n  function updateNode(node, ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n    if (!node) {\n      if (value === NOT_SET) {\n        return node;\n      }\n      SetRef(didAlter);\n      SetRef(didChangeSize);\n      return new ValueNode(ownerID, keyHash, [key, value]);\n    }\n    return node.update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter);\n  }\n\n  function isLeafNode(node) {\n    return node.constructor === ValueNode || node.constructor === HashCollisionNode;\n  }\n\n  function mergeIntoNode(node, ownerID, shift, keyHash, entry) {\n    if (node.keyHash === keyHash) {\n      return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);\n    }\n\n    var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;\n    var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\n    var newNode;\n    var nodes = idx1 === idx2 ?\n      [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)] :\n      ((newNode = new ValueNode(ownerID, keyHash, entry)), idx1 < idx2 ? [node, newNode] : [newNode, node]);\n\n    return new BitmapIndexedNode(ownerID, (1 << idx1) | (1 << idx2), nodes);\n  }\n\n  function createNodes(ownerID, entries, key, value) {\n    if (!ownerID) {\n      ownerID = new OwnerID();\n    }\n    var node = new ValueNode(ownerID, hash(key), [key, value]);\n    for (var ii = 0; ii < entries.length; ii++) {\n      var entry = entries[ii];\n      node = node.update(ownerID, 0, undefined, entry[0], entry[1]);\n    }\n    return node;\n  }\n\n  function packNodes(ownerID, nodes, count, excluding) {\n    var bitmap = 0;\n    var packedII = 0;\n    var packedNodes = new Array(count);\n    for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {\n      var node = nodes[ii];\n      if (node !== undefined && ii !== excluding) {\n        bitmap |= bit;\n        packedNodes[packedII++] = node;\n      }\n    }\n    return new BitmapIndexedNode(ownerID, bitmap, packedNodes);\n  }\n\n  function expandNodes(ownerID, nodes, bitmap, including, node) {\n    var count = 0;\n    var expandedNodes = new Array(SIZE);\n    for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {\n      expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;\n    }\n    expandedNodes[including] = node;\n    return new HashArrayMapNode(ownerID, count + 1, expandedNodes);\n  }\n\n  function mergeIntoMapWith(map, merger, iterables) {\n    var iters = [];\n    for (var ii = 0; ii < iterables.length; ii++) {\n      var value = iterables[ii];\n      var iter = KeyedIterable(value);\n      if (!isIterable(value)) {\n        iter = iter.map(function(v ) {return fromJS(v)});\n      }\n      iters.push(iter);\n    }\n    return mergeIntoCollectionWith(map, merger, iters);\n  }\n\n  function deepMerger(existing, value, key) {\n    return existing && existing.mergeDeep && isIterable(value) ?\n      existing.mergeDeep(value) :\n      is(existing, value) ? existing : value;\n  }\n\n  function deepMergerWith(merger) {\n    return function(existing, value, key)  {\n      if (existing && existing.mergeDeepWith && isIterable(value)) {\n        return existing.mergeDeepWith(merger, value);\n      }\n      var nextValue = merger(existing, value, key);\n      return is(existing, nextValue) ? existing : nextValue;\n    };\n  }\n\n  function mergeIntoCollectionWith(collection, merger, iters) {\n    iters = iters.filter(function(x ) {return x.size !== 0});\n    if (iters.length === 0) {\n      return collection;\n    }\n    if (collection.size === 0 && !collection.__ownerID && iters.length === 1) {\n      return collection.constructor(iters[0]);\n    }\n    return collection.withMutations(function(collection ) {\n      var mergeIntoMap = merger ?\n        function(value, key)  {\n          collection.update(key, NOT_SET, function(existing )\n            {return existing === NOT_SET ? value : merger(existing, value, key)}\n          );\n        } :\n        function(value, key)  {\n          collection.set(key, value);\n        }\n      for (var ii = 0; ii < iters.length; ii++) {\n        iters[ii].forEach(mergeIntoMap);\n      }\n    });\n  }\n\n  function updateInDeepMap(existing, keyPathIter, notSetValue, updater) {\n    var isNotSet = existing === NOT_SET;\n    var step = keyPathIter.next();\n    if (step.done) {\n      var existingValue = isNotSet ? notSetValue : existing;\n      var newValue = updater(existingValue);\n      return newValue === existingValue ? existing : newValue;\n    }\n    invariant(\n      isNotSet || (existing && existing.set),\n      'invalid keyPath'\n    );\n    var key = step.value;\n    var nextExisting = isNotSet ? NOT_SET : existing.get(key, NOT_SET);\n    var nextUpdated = updateInDeepMap(\n      nextExisting,\n      keyPathIter,\n      notSetValue,\n      updater\n    );\n    return nextUpdated === nextExisting ? existing :\n      nextUpdated === NOT_SET ? existing.remove(key) :\n      (isNotSet ? emptyMap() : existing).set(key, nextUpdated);\n  }\n\n  function popCount(x) {\n    x = x - ((x >> 1) & 0x55555555);\n    x = (x & 0x33333333) + ((x >> 2) & 0x33333333);\n    x = (x + (x >> 4)) & 0x0f0f0f0f;\n    x = x + (x >> 8);\n    x = x + (x >> 16);\n    return x & 0x7f;\n  }\n\n  function setIn(array, idx, val, canEdit) {\n    var newArray = canEdit ? array : arrCopy(array);\n    newArray[idx] = val;\n    return newArray;\n  }\n\n  function spliceIn(array, idx, val, canEdit) {\n    var newLen = array.length + 1;\n    if (canEdit && idx + 1 === newLen) {\n      array[idx] = val;\n      return array;\n    }\n    var newArray = new Array(newLen);\n    var after = 0;\n    for (var ii = 0; ii < newLen; ii++) {\n      if (ii === idx) {\n        newArray[ii] = val;\n        after = -1;\n      } else {\n        newArray[ii] = array[ii + after];\n      }\n    }\n    return newArray;\n  }\n\n  function spliceOut(array, idx, canEdit) {\n    var newLen = array.length - 1;\n    if (canEdit && idx === newLen) {\n      array.pop();\n      return array;\n    }\n    var newArray = new Array(newLen);\n    var after = 0;\n    for (var ii = 0; ii < newLen; ii++) {\n      if (ii === idx) {\n        after = 1;\n      }\n      newArray[ii] = array[ii + after];\n    }\n    return newArray;\n  }\n\n  var MAX_ARRAY_MAP_SIZE = SIZE / 4;\n  var MAX_BITMAP_INDEXED_SIZE = SIZE / 2;\n  var MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;\n\n  createClass(List, IndexedCollection);\n\n    // @pragma Construction\n\n    function List(value) {\n      var empty = emptyList();\n      if (value === null || value === undefined) {\n        return empty;\n      }\n      if (isList(value)) {\n        return value;\n      }\n      var iter = IndexedIterable(value);\n      var size = iter.size;\n      if (size === 0) {\n        return empty;\n      }\n      assertNotInfinite(size);\n      if (size > 0 && size < SIZE) {\n        return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));\n      }\n      return empty.withMutations(function(list ) {\n        list.setSize(size);\n        iter.forEach(function(v, i)  {return list.set(i, v)});\n      });\n    }\n\n    List.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    List.prototype.toString = function() {\n      return this.__toString('List [', ']');\n    };\n\n    // @pragma Access\n\n    List.prototype.get = function(index, notSetValue) {\n      index = wrapIndex(this, index);\n      if (index >= 0 && index < this.size) {\n        index += this._origin;\n        var node = listNodeFor(this, index);\n        return node && node.array[index & MASK];\n      }\n      return notSetValue;\n    };\n\n    // @pragma Modification\n\n    List.prototype.set = function(index, value) {\n      return updateList(this, index, value);\n    };\n\n    List.prototype.remove = function(index) {\n      return !this.has(index) ? this :\n        index === 0 ? this.shift() :\n        index === this.size - 1 ? this.pop() :\n        this.splice(index, 1);\n    };\n\n    List.prototype.insert = function(index, value) {\n      return this.splice(index, 0, value);\n    };\n\n    List.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = this._origin = this._capacity = 0;\n        this._level = SHIFT;\n        this._root = this._tail = null;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return emptyList();\n    };\n\n    List.prototype.push = function(/*...values*/) {\n      var values = arguments;\n      var oldSize = this.size;\n      return this.withMutations(function(list ) {\n        setListBounds(list, 0, oldSize + values.length);\n        for (var ii = 0; ii < values.length; ii++) {\n          list.set(oldSize + ii, values[ii]);\n        }\n      });\n    };\n\n    List.prototype.pop = function() {\n      return setListBounds(this, 0, -1);\n    };\n\n    List.prototype.unshift = function(/*...values*/) {\n      var values = arguments;\n      return this.withMutations(function(list ) {\n        setListBounds(list, -values.length);\n        for (var ii = 0; ii < values.length; ii++) {\n          list.set(ii, values[ii]);\n        }\n      });\n    };\n\n    List.prototype.shift = function() {\n      return setListBounds(this, 1);\n    };\n\n    // @pragma Composition\n\n    List.prototype.merge = function(/*...iters*/) {\n      return mergeIntoListWith(this, undefined, arguments);\n    };\n\n    List.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoListWith(this, merger, iters);\n    };\n\n    List.prototype.mergeDeep = function(/*...iters*/) {\n      return mergeIntoListWith(this, deepMerger, arguments);\n    };\n\n    List.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoListWith(this, deepMergerWith(merger), iters);\n    };\n\n    List.prototype.setSize = function(size) {\n      return setListBounds(this, 0, size);\n    };\n\n    // @pragma Iteration\n\n    List.prototype.slice = function(begin, end) {\n      var size = this.size;\n      if (wholeSlice(begin, end, size)) {\n        return this;\n      }\n      return setListBounds(\n        this,\n        resolveBegin(begin, size),\n        resolveEnd(end, size)\n      );\n    };\n\n    List.prototype.__iterator = function(type, reverse) {\n      var index = 0;\n      var values = iterateList(this, reverse);\n      return new Iterator(function()  {\n        var value = values();\n        return value === DONE ?\n          iteratorDone() :\n          iteratorValue(type, index++, value);\n      });\n    };\n\n    List.prototype.__iterate = function(fn, reverse) {\n      var index = 0;\n      var values = iterateList(this, reverse);\n      var value;\n      while ((value = values()) !== DONE) {\n        if (fn(value, index++, this) === false) {\n          break;\n        }\n      }\n      return index;\n    };\n\n    List.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        return this;\n      }\n      return makeList(this._origin, this._capacity, this._level, this._root, this._tail, ownerID, this.__hash);\n    };\n\n\n  function isList(maybeList) {\n    return !!(maybeList && maybeList[IS_LIST_SENTINEL]);\n  }\n\n  List.isList = isList;\n\n  var IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';\n\n  var ListPrototype = List.prototype;\n  ListPrototype[IS_LIST_SENTINEL] = true;\n  ListPrototype[DELETE] = ListPrototype.remove;\n  ListPrototype.setIn = MapPrototype.setIn;\n  ListPrototype.deleteIn =\n  ListPrototype.removeIn = MapPrototype.removeIn;\n  ListPrototype.update = MapPrototype.update;\n  ListPrototype.updateIn = MapPrototype.updateIn;\n  ListPrototype.mergeIn = MapPrototype.mergeIn;\n  ListPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;\n  ListPrototype.withMutations = MapPrototype.withMutations;\n  ListPrototype.asMutable = MapPrototype.asMutable;\n  ListPrototype.asImmutable = MapPrototype.asImmutable;\n  ListPrototype.wasAltered = MapPrototype.wasAltered;\n\n\n\n    function VNode(array, ownerID) {\n      this.array = array;\n      this.ownerID = ownerID;\n    }\n\n    // TODO: seems like these methods are very similar\n\n    VNode.prototype.removeBefore = function(ownerID, level, index) {\n      if (index === level ? 1 << level : 0 || this.array.length === 0) {\n        return this;\n      }\n      var originIndex = (index >>> level) & MASK;\n      if (originIndex >= this.array.length) {\n        return new VNode([], ownerID);\n      }\n      var removingFirst = originIndex === 0;\n      var newChild;\n      if (level > 0) {\n        var oldChild = this.array[originIndex];\n        newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);\n        if (newChild === oldChild && removingFirst) {\n          return this;\n        }\n      }\n      if (removingFirst && !newChild) {\n        return this;\n      }\n      var editable = editableVNode(this, ownerID);\n      if (!removingFirst) {\n        for (var ii = 0; ii < originIndex; ii++) {\n          editable.array[ii] = undefined;\n        }\n      }\n      if (newChild) {\n        editable.array[originIndex] = newChild;\n      }\n      return editable;\n    };\n\n    VNode.prototype.removeAfter = function(ownerID, level, index) {\n      if (index === (level ? 1 << level : 0) || this.array.length === 0) {\n        return this;\n      }\n      var sizeIndex = ((index - 1) >>> level) & MASK;\n      if (sizeIndex >= this.array.length) {\n        return this;\n      }\n\n      var newChild;\n      if (level > 0) {\n        var oldChild = this.array[sizeIndex];\n        newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);\n        if (newChild === oldChild && sizeIndex === this.array.length - 1) {\n          return this;\n        }\n      }\n\n      var editable = editableVNode(this, ownerID);\n      editable.array.splice(sizeIndex + 1);\n      if (newChild) {\n        editable.array[sizeIndex] = newChild;\n      }\n      return editable;\n    };\n\n\n\n  var DONE = {};\n\n  function iterateList(list, reverse) {\n    var left = list._origin;\n    var right = list._capacity;\n    var tailPos = getTailOffset(right);\n    var tail = list._tail;\n\n    return iterateNodeOrLeaf(list._root, list._level, 0);\n\n    function iterateNodeOrLeaf(node, level, offset) {\n      return level === 0 ?\n        iterateLeaf(node, offset) :\n        iterateNode(node, level, offset);\n    }\n\n    function iterateLeaf(node, offset) {\n      var array = offset === tailPos ? tail && tail.array : node && node.array;\n      var from = offset > left ? 0 : left - offset;\n      var to = right - offset;\n      if (to > SIZE) {\n        to = SIZE;\n      }\n      return function()  {\n        if (from === to) {\n          return DONE;\n        }\n        var idx = reverse ? --to : from++;\n        return array && array[idx];\n      };\n    }\n\n    function iterateNode(node, level, offset) {\n      var values;\n      var array = node && node.array;\n      var from = offset > left ? 0 : (left - offset) >> level;\n      var to = ((right - offset) >> level) + 1;\n      if (to > SIZE) {\n        to = SIZE;\n      }\n      return function()  {\n        do {\n          if (values) {\n            var value = values();\n            if (value !== DONE) {\n              return value;\n            }\n            values = null;\n          }\n          if (from === to) {\n            return DONE;\n          }\n          var idx = reverse ? --to : from++;\n          values = iterateNodeOrLeaf(\n            array && array[idx], level - SHIFT, offset + (idx << level)\n          );\n        } while (true);\n      };\n    }\n  }\n\n  function makeList(origin, capacity, level, root, tail, ownerID, hash) {\n    var list = Object.create(ListPrototype);\n    list.size = capacity - origin;\n    list._origin = origin;\n    list._capacity = capacity;\n    list._level = level;\n    list._root = root;\n    list._tail = tail;\n    list.__ownerID = ownerID;\n    list.__hash = hash;\n    list.__altered = false;\n    return list;\n  }\n\n  var EMPTY_LIST;\n  function emptyList() {\n    return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));\n  }\n\n  function updateList(list, index, value) {\n    index = wrapIndex(list, index);\n\n    if (index !== index) {\n      return list;\n    }\n\n    if (index >= list.size || index < 0) {\n      return list.withMutations(function(list ) {\n        index < 0 ?\n          setListBounds(list, index).set(0, value) :\n          setListBounds(list, 0, index + 1).set(index, value)\n      });\n    }\n\n    index += list._origin;\n\n    var newTail = list._tail;\n    var newRoot = list._root;\n    var didAlter = MakeRef(DID_ALTER);\n    if (index >= getTailOffset(list._capacity)) {\n      newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);\n    } else {\n      newRoot = updateVNode(newRoot, list.__ownerID, list._level, index, value, didAlter);\n    }\n\n    if (!didAlter.value) {\n      return list;\n    }\n\n    if (list.__ownerID) {\n      list._root = newRoot;\n      list._tail = newTail;\n      list.__hash = undefined;\n      list.__altered = true;\n      return list;\n    }\n    return makeList(list._origin, list._capacity, list._level, newRoot, newTail);\n  }\n\n  function updateVNode(node, ownerID, level, index, value, didAlter) {\n    var idx = (index >>> level) & MASK;\n    var nodeHas = node && idx < node.array.length;\n    if (!nodeHas && value === undefined) {\n      return node;\n    }\n\n    var newNode;\n\n    if (level > 0) {\n      var lowerNode = node && node.array[idx];\n      var newLowerNode = updateVNode(lowerNode, ownerID, level - SHIFT, index, value, didAlter);\n      if (newLowerNode === lowerNode) {\n        return node;\n      }\n      newNode = editableVNode(node, ownerID);\n      newNode.array[idx] = newLowerNode;\n      return newNode;\n    }\n\n    if (nodeHas && node.array[idx] === value) {\n      return node;\n    }\n\n    SetRef(didAlter);\n\n    newNode = editableVNode(node, ownerID);\n    if (value === undefined && idx === newNode.array.length - 1) {\n      newNode.array.pop();\n    } else {\n      newNode.array[idx] = value;\n    }\n    return newNode;\n  }\n\n  function editableVNode(node, ownerID) {\n    if (ownerID && node && ownerID === node.ownerID) {\n      return node;\n    }\n    return new VNode(node ? node.array.slice() : [], ownerID);\n  }\n\n  function listNodeFor(list, rawIndex) {\n    if (rawIndex >= getTailOffset(list._capacity)) {\n      return list._tail;\n    }\n    if (rawIndex < 1 << (list._level + SHIFT)) {\n      var node = list._root;\n      var level = list._level;\n      while (node && level > 0) {\n        node = node.array[(rawIndex >>> level) & MASK];\n        level -= SHIFT;\n      }\n      return node;\n    }\n  }\n\n  function setListBounds(list, begin, end) {\n    // Sanitize begin & end using this shorthand for ToInt32(argument)\n    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n    if (begin !== undefined) {\n      begin = begin | 0;\n    }\n    if (end !== undefined) {\n      end = end | 0;\n    }\n    var owner = list.__ownerID || new OwnerID();\n    var oldOrigin = list._origin;\n    var oldCapacity = list._capacity;\n    var newOrigin = oldOrigin + begin;\n    var newCapacity = end === undefined ? oldCapacity : end < 0 ? oldCapacity + end : oldOrigin + end;\n    if (newOrigin === oldOrigin && newCapacity === oldCapacity) {\n      return list;\n    }\n\n    // If it's going to end after it starts, it's empty.\n    if (newOrigin >= newCapacity) {\n      return list.clear();\n    }\n\n    var newLevel = list._level;\n    var newRoot = list._root;\n\n    // New origin might need creating a higher root.\n    var offsetShift = 0;\n    while (newOrigin + offsetShift < 0) {\n      newRoot = new VNode(newRoot && newRoot.array.length ? [undefined, newRoot] : [], owner);\n      newLevel += SHIFT;\n      offsetShift += 1 << newLevel;\n    }\n    if (offsetShift) {\n      newOrigin += offsetShift;\n      oldOrigin += offsetShift;\n      newCapacity += offsetShift;\n      oldCapacity += offsetShift;\n    }\n\n    var oldTailOffset = getTailOffset(oldCapacity);\n    var newTailOffset = getTailOffset(newCapacity);\n\n    // New size might need creating a higher root.\n    while (newTailOffset >= 1 << (newLevel + SHIFT)) {\n      newRoot = new VNode(newRoot && newRoot.array.length ? [newRoot] : [], owner);\n      newLevel += SHIFT;\n    }\n\n    // Locate or create the new tail.\n    var oldTail = list._tail;\n    var newTail = newTailOffset < oldTailOffset ?\n      listNodeFor(list, newCapacity - 1) :\n      newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;\n\n    // Merge Tail into tree.\n    if (oldTail && newTailOffset > oldTailOffset && newOrigin < oldCapacity && oldTail.array.length) {\n      newRoot = editableVNode(newRoot, owner);\n      var node = newRoot;\n      for (var level = newLevel; level > SHIFT; level -= SHIFT) {\n        var idx = (oldTailOffset >>> level) & MASK;\n        node = node.array[idx] = editableVNode(node.array[idx], owner);\n      }\n      node.array[(oldTailOffset >>> SHIFT) & MASK] = oldTail;\n    }\n\n    // If the size has been reduced, there's a chance the tail needs to be trimmed.\n    if (newCapacity < oldCapacity) {\n      newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);\n    }\n\n    // If the new origin is within the tail, then we do not need a root.\n    if (newOrigin >= newTailOffset) {\n      newOrigin -= newTailOffset;\n      newCapacity -= newTailOffset;\n      newLevel = SHIFT;\n      newRoot = null;\n      newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);\n\n    // Otherwise, if the root has been trimmed, garbage collect.\n    } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {\n      offsetShift = 0;\n\n      // Identify the new top root node of the subtree of the old root.\n      while (newRoot) {\n        var beginIndex = (newOrigin >>> newLevel) & MASK;\n        if (beginIndex !== (newTailOffset >>> newLevel) & MASK) {\n          break;\n        }\n        if (beginIndex) {\n          offsetShift += (1 << newLevel) * beginIndex;\n        }\n        newLevel -= SHIFT;\n        newRoot = newRoot.array[beginIndex];\n      }\n\n      // Trim the new sides of the new root.\n      if (newRoot && newOrigin > oldOrigin) {\n        newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);\n      }\n      if (newRoot && newTailOffset < oldTailOffset) {\n        newRoot = newRoot.removeAfter(owner, newLevel, newTailOffset - offsetShift);\n      }\n      if (offsetShift) {\n        newOrigin -= offsetShift;\n        newCapacity -= offsetShift;\n      }\n    }\n\n    if (list.__ownerID) {\n      list.size = newCapacity - newOrigin;\n      list._origin = newOrigin;\n      list._capacity = newCapacity;\n      list._level = newLevel;\n      list._root = newRoot;\n      list._tail = newTail;\n      list.__hash = undefined;\n      list.__altered = true;\n      return list;\n    }\n    return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);\n  }\n\n  function mergeIntoListWith(list, merger, iterables) {\n    var iters = [];\n    var maxSize = 0;\n    for (var ii = 0; ii < iterables.length; ii++) {\n      var value = iterables[ii];\n      var iter = IndexedIterable(value);\n      if (iter.size > maxSize) {\n        maxSize = iter.size;\n      }\n      if (!isIterable(value)) {\n        iter = iter.map(function(v ) {return fromJS(v)});\n      }\n      iters.push(iter);\n    }\n    if (maxSize > list.size) {\n      list = list.setSize(maxSize);\n    }\n    return mergeIntoCollectionWith(list, merger, iters);\n  }\n\n  function getTailOffset(size) {\n    return size < SIZE ? 0 : (((size - 1) >>> SHIFT) << SHIFT);\n  }\n\n  createClass(OrderedMap, Map);\n\n    // @pragma Construction\n\n    function OrderedMap(value) {\n      return value === null || value === undefined ? emptyOrderedMap() :\n        isOrderedMap(value) ? value :\n        emptyOrderedMap().withMutations(function(map ) {\n          var iter = KeyedIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v, k)  {return map.set(k, v)});\n        });\n    }\n\n    OrderedMap.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    OrderedMap.prototype.toString = function() {\n      return this.__toString('OrderedMap {', '}');\n    };\n\n    // @pragma Access\n\n    OrderedMap.prototype.get = function(k, notSetValue) {\n      var index = this._map.get(k);\n      return index !== undefined ? this._list.get(index)[1] : notSetValue;\n    };\n\n    // @pragma Modification\n\n    OrderedMap.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = 0;\n        this._map.clear();\n        this._list.clear();\n        return this;\n      }\n      return emptyOrderedMap();\n    };\n\n    OrderedMap.prototype.set = function(k, v) {\n      return updateOrderedMap(this, k, v);\n    };\n\n    OrderedMap.prototype.remove = function(k) {\n      return updateOrderedMap(this, k, NOT_SET);\n    };\n\n    OrderedMap.prototype.wasAltered = function() {\n      return this._map.wasAltered() || this._list.wasAltered();\n    };\n\n    OrderedMap.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._list.__iterate(\n        function(entry ) {return entry && fn(entry[1], entry[0], this$0)},\n        reverse\n      );\n    };\n\n    OrderedMap.prototype.__iterator = function(type, reverse) {\n      return this._list.fromEntrySeq().__iterator(type, reverse);\n    };\n\n    OrderedMap.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      var newMap = this._map.__ensureOwner(ownerID);\n      var newList = this._list.__ensureOwner(ownerID);\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this._map = newMap;\n        this._list = newList;\n        return this;\n      }\n      return makeOrderedMap(newMap, newList, ownerID, this.__hash);\n    };\n\n\n  function isOrderedMap(maybeOrderedMap) {\n    return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);\n  }\n\n  OrderedMap.isOrderedMap = isOrderedMap;\n\n  OrderedMap.prototype[IS_ORDERED_SENTINEL] = true;\n  OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;\n\n\n\n  function makeOrderedMap(map, list, ownerID, hash) {\n    var omap = Object.create(OrderedMap.prototype);\n    omap.size = map ? map.size : 0;\n    omap._map = map;\n    omap._list = list;\n    omap.__ownerID = ownerID;\n    omap.__hash = hash;\n    return omap;\n  }\n\n  var EMPTY_ORDERED_MAP;\n  function emptyOrderedMap() {\n    return EMPTY_ORDERED_MAP || (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()));\n  }\n\n  function updateOrderedMap(omap, k, v) {\n    var map = omap._map;\n    var list = omap._list;\n    var i = map.get(k);\n    var has = i !== undefined;\n    var newMap;\n    var newList;\n    if (v === NOT_SET) { // removed\n      if (!has) {\n        return omap;\n      }\n      if (list.size >= SIZE && list.size >= map.size * 2) {\n        newList = list.filter(function(entry, idx)  {return entry !== undefined && i !== idx});\n        newMap = newList.toKeyedSeq().map(function(entry ) {return entry[0]}).flip().toMap();\n        if (omap.__ownerID) {\n          newMap.__ownerID = newList.__ownerID = omap.__ownerID;\n        }\n      } else {\n        newMap = map.remove(k);\n        newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);\n      }\n    } else {\n      if (has) {\n        if (v === list.get(i)[1]) {\n          return omap;\n        }\n        newMap = map;\n        newList = list.set(i, [k, v]);\n      } else {\n        newMap = map.set(k, list.size);\n        newList = list.set(list.size, [k, v]);\n      }\n    }\n    if (omap.__ownerID) {\n      omap.size = newMap.size;\n      omap._map = newMap;\n      omap._list = newList;\n      omap.__hash = undefined;\n      return omap;\n    }\n    return makeOrderedMap(newMap, newList);\n  }\n\n  createClass(ToKeyedSequence, KeyedSeq);\n    function ToKeyedSequence(indexed, useKeys) {\n      this._iter = indexed;\n      this._useKeys = useKeys;\n      this.size = indexed.size;\n    }\n\n    ToKeyedSequence.prototype.get = function(key, notSetValue) {\n      return this._iter.get(key, notSetValue);\n    };\n\n    ToKeyedSequence.prototype.has = function(key) {\n      return this._iter.has(key);\n    };\n\n    ToKeyedSequence.prototype.valueSeq = function() {\n      return this._iter.valueSeq();\n    };\n\n    ToKeyedSequence.prototype.reverse = function() {var this$0 = this;\n      var reversedSequence = reverseFactory(this, true);\n      if (!this._useKeys) {\n        reversedSequence.valueSeq = function()  {return this$0._iter.toSeq().reverse()};\n      }\n      return reversedSequence;\n    };\n\n    ToKeyedSequence.prototype.map = function(mapper, context) {var this$0 = this;\n      var mappedSequence = mapFactory(this, mapper, context);\n      if (!this._useKeys) {\n        mappedSequence.valueSeq = function()  {return this$0._iter.toSeq().map(mapper, context)};\n      }\n      return mappedSequence;\n    };\n\n    ToKeyedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      var ii;\n      return this._iter.__iterate(\n        this._useKeys ?\n          function(v, k)  {return fn(v, k, this$0)} :\n          ((ii = reverse ? resolveSize(this) : 0),\n            function(v ) {return fn(v, reverse ? --ii : ii++, this$0)}),\n        reverse\n      );\n    };\n\n    ToKeyedSequence.prototype.__iterator = function(type, reverse) {\n      if (this._useKeys) {\n        return this._iter.__iterator(type, reverse);\n      }\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      var ii = reverse ? resolveSize(this) : 0;\n      return new Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step :\n          iteratorValue(type, reverse ? --ii : ii++, step.value, step);\n      });\n    };\n\n  ToKeyedSequence.prototype[IS_ORDERED_SENTINEL] = true;\n\n\n  createClass(ToIndexedSequence, IndexedSeq);\n    function ToIndexedSequence(iter) {\n      this._iter = iter;\n      this.size = iter.size;\n    }\n\n    ToIndexedSequence.prototype.includes = function(value) {\n      return this._iter.includes(value);\n    };\n\n    ToIndexedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      return this._iter.__iterate(function(v ) {return fn(v, iterations++, this$0)}, reverse);\n    };\n\n    ToIndexedSequence.prototype.__iterator = function(type, reverse) {\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      var iterations = 0;\n      return new Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step :\n          iteratorValue(type, iterations++, step.value, step)\n      });\n    };\n\n\n\n  createClass(ToSetSequence, SetSeq);\n    function ToSetSequence(iter) {\n      this._iter = iter;\n      this.size = iter.size;\n    }\n\n    ToSetSequence.prototype.has = function(key) {\n      return this._iter.includes(key);\n    };\n\n    ToSetSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._iter.__iterate(function(v ) {return fn(v, v, this$0)}, reverse);\n    };\n\n    ToSetSequence.prototype.__iterator = function(type, reverse) {\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      return new Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step :\n          iteratorValue(type, step.value, step.value, step);\n      });\n    };\n\n\n\n  createClass(FromEntriesSequence, KeyedSeq);\n    function FromEntriesSequence(entries) {\n      this._iter = entries;\n      this.size = entries.size;\n    }\n\n    FromEntriesSequence.prototype.entrySeq = function() {\n      return this._iter.toSeq();\n    };\n\n    FromEntriesSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._iter.__iterate(function(entry ) {\n        // Check if entry exists first so array access doesn't throw for holes\n        // in the parent iteration.\n        if (entry) {\n          validateEntry(entry);\n          var indexedIterable = isIterable(entry);\n          return fn(\n            indexedIterable ? entry.get(1) : entry[1],\n            indexedIterable ? entry.get(0) : entry[0],\n            this$0\n          );\n        }\n      }, reverse);\n    };\n\n    FromEntriesSequence.prototype.__iterator = function(type, reverse) {\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      return new Iterator(function()  {\n        while (true) {\n          var step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n          var entry = step.value;\n          // Check if entry exists first so array access doesn't throw for holes\n          // in the parent iteration.\n          if (entry) {\n            validateEntry(entry);\n            var indexedIterable = isIterable(entry);\n            return iteratorValue(\n              type,\n              indexedIterable ? entry.get(0) : entry[0],\n              indexedIterable ? entry.get(1) : entry[1],\n              step\n            );\n          }\n        }\n      });\n    };\n\n\n  ToIndexedSequence.prototype.cacheResult =\n  ToKeyedSequence.prototype.cacheResult =\n  ToSetSequence.prototype.cacheResult =\n  FromEntriesSequence.prototype.cacheResult =\n    cacheResultThrough;\n\n\n  function flipFactory(iterable) {\n    var flipSequence = makeSequence(iterable);\n    flipSequence._iter = iterable;\n    flipSequence.size = iterable.size;\n    flipSequence.flip = function()  {return iterable};\n    flipSequence.reverse = function () {\n      var reversedSequence = iterable.reverse.apply(this); // super.reverse()\n      reversedSequence.flip = function()  {return iterable.reverse()};\n      return reversedSequence;\n    };\n    flipSequence.has = function(key ) {return iterable.includes(key)};\n    flipSequence.includes = function(key ) {return iterable.has(key)};\n    flipSequence.cacheResult = cacheResultThrough;\n    flipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      return iterable.__iterate(function(v, k)  {return fn(k, v, this$0) !== false}, reverse);\n    }\n    flipSequence.__iteratorUncached = function(type, reverse) {\n      if (type === ITERATE_ENTRIES) {\n        var iterator = iterable.__iterator(type, reverse);\n        return new Iterator(function()  {\n          var step = iterator.next();\n          if (!step.done) {\n            var k = step.value[0];\n            step.value[0] = step.value[1];\n            step.value[1] = k;\n          }\n          return step;\n        });\n      }\n      return iterable.__iterator(\n        type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,\n        reverse\n      );\n    }\n    return flipSequence;\n  }\n\n\n  function mapFactory(iterable, mapper, context) {\n    var mappedSequence = makeSequence(iterable);\n    mappedSequence.size = iterable.size;\n    mappedSequence.has = function(key ) {return iterable.has(key)};\n    mappedSequence.get = function(key, notSetValue)  {\n      var v = iterable.get(key, NOT_SET);\n      return v === NOT_SET ?\n        notSetValue :\n        mapper.call(context, v, key, iterable);\n    };\n    mappedSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      return iterable.__iterate(\n        function(v, k, c)  {return fn(mapper.call(context, v, k, c), k, this$0) !== false},\n        reverse\n      );\n    }\n    mappedSequence.__iteratorUncached = function (type, reverse) {\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      return new Iterator(function()  {\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        var entry = step.value;\n        var key = entry[0];\n        return iteratorValue(\n          type,\n          key,\n          mapper.call(context, entry[1], key, iterable),\n          step\n        );\n      });\n    }\n    return mappedSequence;\n  }\n\n\n  function reverseFactory(iterable, useKeys) {\n    var reversedSequence = makeSequence(iterable);\n    reversedSequence._iter = iterable;\n    reversedSequence.size = iterable.size;\n    reversedSequence.reverse = function()  {return iterable};\n    if (iterable.flip) {\n      reversedSequence.flip = function () {\n        var flipSequence = flipFactory(iterable);\n        flipSequence.reverse = function()  {return iterable.flip()};\n        return flipSequence;\n      };\n    }\n    reversedSequence.get = function(key, notSetValue) \n      {return iterable.get(useKeys ? key : -1 - key, notSetValue)};\n    reversedSequence.has = function(key )\n      {return iterable.has(useKeys ? key : -1 - key)};\n    reversedSequence.includes = function(value ) {return iterable.includes(value)};\n    reversedSequence.cacheResult = cacheResultThrough;\n    reversedSequence.__iterate = function (fn, reverse) {var this$0 = this;\n      return iterable.__iterate(function(v, k)  {return fn(v, k, this$0)}, !reverse);\n    };\n    reversedSequence.__iterator =\n      function(type, reverse)  {return iterable.__iterator(type, !reverse)};\n    return reversedSequence;\n  }\n\n\n  function filterFactory(iterable, predicate, context, useKeys) {\n    var filterSequence = makeSequence(iterable);\n    if (useKeys) {\n      filterSequence.has = function(key ) {\n        var v = iterable.get(key, NOT_SET);\n        return v !== NOT_SET && !!predicate.call(context, v, key, iterable);\n      };\n      filterSequence.get = function(key, notSetValue)  {\n        var v = iterable.get(key, NOT_SET);\n        return v !== NOT_SET && predicate.call(context, v, key, iterable) ?\n          v : notSetValue;\n      };\n    }\n    filterSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      iterable.__iterate(function(v, k, c)  {\n        if (predicate.call(context, v, k, c)) {\n          iterations++;\n          return fn(v, useKeys ? k : iterations - 1, this$0);\n        }\n      }, reverse);\n      return iterations;\n    };\n    filterSequence.__iteratorUncached = function (type, reverse) {\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      var iterations = 0;\n      return new Iterator(function()  {\n        while (true) {\n          var step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n          var entry = step.value;\n          var key = entry[0];\n          var value = entry[1];\n          if (predicate.call(context, value, key, iterable)) {\n            return iteratorValue(type, useKeys ? key : iterations++, value, step);\n          }\n        }\n      });\n    }\n    return filterSequence;\n  }\n\n\n  function countByFactory(iterable, grouper, context) {\n    var groups = Map().asMutable();\n    iterable.__iterate(function(v, k)  {\n      groups.update(\n        grouper.call(context, v, k, iterable),\n        0,\n        function(a ) {return a + 1}\n      );\n    });\n    return groups.asImmutable();\n  }\n\n\n  function groupByFactory(iterable, grouper, context) {\n    var isKeyedIter = isKeyed(iterable);\n    var groups = (isOrdered(iterable) ? OrderedMap() : Map()).asMutable();\n    iterable.__iterate(function(v, k)  {\n      groups.update(\n        grouper.call(context, v, k, iterable),\n        function(a ) {return (a = a || [], a.push(isKeyedIter ? [k, v] : v), a)}\n      );\n    });\n    var coerce = iterableClass(iterable);\n    return groups.map(function(arr ) {return reify(iterable, coerce(arr))});\n  }\n\n\n  function sliceFactory(iterable, begin, end, useKeys) {\n    var originalSize = iterable.size;\n\n    // Sanitize begin & end using this shorthand for ToInt32(argument)\n    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n    if (begin !== undefined) {\n      begin = begin | 0;\n    }\n    if (end !== undefined) {\n      end = end | 0;\n    }\n\n    if (wholeSlice(begin, end, originalSize)) {\n      return iterable;\n    }\n\n    var resolvedBegin = resolveBegin(begin, originalSize);\n    var resolvedEnd = resolveEnd(end, originalSize);\n\n    // begin or end will be NaN if they were provided as negative numbers and\n    // this iterable's size is unknown. In that case, cache first so there is\n    // a known size and these do not resolve to NaN.\n    if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {\n      return sliceFactory(iterable.toSeq().cacheResult(), begin, end, useKeys);\n    }\n\n    // Note: resolvedEnd is undefined when the original sequence's length is\n    // unknown and this slice did not supply an end and should contain all\n    // elements after resolvedBegin.\n    // In that case, resolvedSize will be NaN and sliceSize will remain undefined.\n    var resolvedSize = resolvedEnd - resolvedBegin;\n    var sliceSize;\n    if (resolvedSize === resolvedSize) {\n      sliceSize = resolvedSize < 0 ? 0 : resolvedSize;\n    }\n\n    var sliceSeq = makeSequence(iterable);\n\n    // If iterable.size is undefined, the size of the realized sliceSeq is\n    // unknown at this point unless the number of items to slice is 0\n    sliceSeq.size = sliceSize === 0 ? sliceSize : iterable.size && sliceSize || undefined;\n\n    if (!useKeys && isSeq(iterable) && sliceSize >= 0) {\n      sliceSeq.get = function (index, notSetValue) {\n        index = wrapIndex(this, index);\n        return index >= 0 && index < sliceSize ?\n          iterable.get(index + resolvedBegin, notSetValue) :\n          notSetValue;\n      }\n    }\n\n    sliceSeq.__iterateUncached = function(fn, reverse) {var this$0 = this;\n      if (sliceSize === 0) {\n        return 0;\n      }\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var skipped = 0;\n      var isSkipping = true;\n      var iterations = 0;\n      iterable.__iterate(function(v, k)  {\n        if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {\n          iterations++;\n          return fn(v, useKeys ? k : iterations - 1, this$0) !== false &&\n                 iterations !== sliceSize;\n        }\n      });\n      return iterations;\n    };\n\n    sliceSeq.__iteratorUncached = function(type, reverse) {\n      if (sliceSize !== 0 && reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      // Don't bother instantiating parent iterator if taking 0.\n      var iterator = sliceSize !== 0 && iterable.__iterator(type, reverse);\n      var skipped = 0;\n      var iterations = 0;\n      return new Iterator(function()  {\n        while (skipped++ < resolvedBegin) {\n          iterator.next();\n        }\n        if (++iterations > sliceSize) {\n          return iteratorDone();\n        }\n        var step = iterator.next();\n        if (useKeys || type === ITERATE_VALUES) {\n          return step;\n        } else if (type === ITERATE_KEYS) {\n          return iteratorValue(type, iterations - 1, undefined, step);\n        } else {\n          return iteratorValue(type, iterations - 1, step.value[1], step);\n        }\n      });\n    }\n\n    return sliceSeq;\n  }\n\n\n  function takeWhileFactory(iterable, predicate, context) {\n    var takeSequence = makeSequence(iterable);\n    takeSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var iterations = 0;\n      iterable.__iterate(function(v, k, c) \n        {return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$0)}\n      );\n      return iterations;\n    };\n    takeSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      var iterating = true;\n      return new Iterator(function()  {\n        if (!iterating) {\n          return iteratorDone();\n        }\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        var entry = step.value;\n        var k = entry[0];\n        var v = entry[1];\n        if (!predicate.call(context, v, k, this$0)) {\n          iterating = false;\n          return iteratorDone();\n        }\n        return type === ITERATE_ENTRIES ? step :\n          iteratorValue(type, k, v, step);\n      });\n    };\n    return takeSequence;\n  }\n\n\n  function skipWhileFactory(iterable, predicate, context, useKeys) {\n    var skipSequence = makeSequence(iterable);\n    skipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var isSkipping = true;\n      var iterations = 0;\n      iterable.__iterate(function(v, k, c)  {\n        if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {\n          iterations++;\n          return fn(v, useKeys ? k : iterations - 1, this$0);\n        }\n      });\n      return iterations;\n    };\n    skipSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      var skipping = true;\n      var iterations = 0;\n      return new Iterator(function()  {\n        var step, k, v;\n        do {\n          step = iterator.next();\n          if (step.done) {\n            if (useKeys || type === ITERATE_VALUES) {\n              return step;\n            } else if (type === ITERATE_KEYS) {\n              return iteratorValue(type, iterations++, undefined, step);\n            } else {\n              return iteratorValue(type, iterations++, step.value[1], step);\n            }\n          }\n          var entry = step.value;\n          k = entry[0];\n          v = entry[1];\n          skipping && (skipping = predicate.call(context, v, k, this$0));\n        } while (skipping);\n        return type === ITERATE_ENTRIES ? step :\n          iteratorValue(type, k, v, step);\n      });\n    };\n    return skipSequence;\n  }\n\n\n  function concatFactory(iterable, values) {\n    var isKeyedIterable = isKeyed(iterable);\n    var iters = [iterable].concat(values).map(function(v ) {\n      if (!isIterable(v)) {\n        v = isKeyedIterable ?\n          keyedSeqFromValue(v) :\n          indexedSeqFromValue(Array.isArray(v) ? v : [v]);\n      } else if (isKeyedIterable) {\n        v = KeyedIterable(v);\n      }\n      return v;\n    }).filter(function(v ) {return v.size !== 0});\n\n    if (iters.length === 0) {\n      return iterable;\n    }\n\n    if (iters.length === 1) {\n      var singleton = iters[0];\n      if (singleton === iterable ||\n          isKeyedIterable && isKeyed(singleton) ||\n          isIndexed(iterable) && isIndexed(singleton)) {\n        return singleton;\n      }\n    }\n\n    var concatSeq = new ArraySeq(iters);\n    if (isKeyedIterable) {\n      concatSeq = concatSeq.toKeyedSeq();\n    } else if (!isIndexed(iterable)) {\n      concatSeq = concatSeq.toSetSeq();\n    }\n    concatSeq = concatSeq.flatten(true);\n    concatSeq.size = iters.reduce(\n      function(sum, seq)  {\n        if (sum !== undefined) {\n          var size = seq.size;\n          if (size !== undefined) {\n            return sum + size;\n          }\n        }\n      },\n      0\n    );\n    return concatSeq;\n  }\n\n\n  function flattenFactory(iterable, depth, useKeys) {\n    var flatSequence = makeSequence(iterable);\n    flatSequence.__iterateUncached = function(fn, reverse) {\n      var iterations = 0;\n      var stopped = false;\n      function flatDeep(iter, currentDepth) {var this$0 = this;\n        iter.__iterate(function(v, k)  {\n          if ((!depth || currentDepth < depth) && isIterable(v)) {\n            flatDeep(v, currentDepth + 1);\n          } else if (fn(v, useKeys ? k : iterations++, this$0) === false) {\n            stopped = true;\n          }\n          return !stopped;\n        }, reverse);\n      }\n      flatDeep(iterable, 0);\n      return iterations;\n    }\n    flatSequence.__iteratorUncached = function(type, reverse) {\n      var iterator = iterable.__iterator(type, reverse);\n      var stack = [];\n      var iterations = 0;\n      return new Iterator(function()  {\n        while (iterator) {\n          var step = iterator.next();\n          if (step.done !== false) {\n            iterator = stack.pop();\n            continue;\n          }\n          var v = step.value;\n          if (type === ITERATE_ENTRIES) {\n            v = v[1];\n          }\n          if ((!depth || stack.length < depth) && isIterable(v)) {\n            stack.push(iterator);\n            iterator = v.__iterator(type, reverse);\n          } else {\n            return useKeys ? step : iteratorValue(type, iterations++, v, step);\n          }\n        }\n        return iteratorDone();\n      });\n    }\n    return flatSequence;\n  }\n\n\n  function flatMapFactory(iterable, mapper, context) {\n    var coerce = iterableClass(iterable);\n    return iterable.toSeq().map(\n      function(v, k)  {return coerce(mapper.call(context, v, k, iterable))}\n    ).flatten(true);\n  }\n\n\n  function interposeFactory(iterable, separator) {\n    var interposedSequence = makeSequence(iterable);\n    interposedSequence.size = iterable.size && iterable.size * 2 -1;\n    interposedSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      iterable.__iterate(function(v, k) \n        {return (!iterations || fn(separator, iterations++, this$0) !== false) &&\n        fn(v, iterations++, this$0) !== false},\n        reverse\n      );\n      return iterations;\n    };\n    interposedSequence.__iteratorUncached = function(type, reverse) {\n      var iterator = iterable.__iterator(ITERATE_VALUES, reverse);\n      var iterations = 0;\n      var step;\n      return new Iterator(function()  {\n        if (!step || iterations % 2) {\n          step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n        }\n        return iterations % 2 ?\n          iteratorValue(type, iterations++, separator) :\n          iteratorValue(type, iterations++, step.value, step);\n      });\n    };\n    return interposedSequence;\n  }\n\n\n  function sortFactory(iterable, comparator, mapper) {\n    if (!comparator) {\n      comparator = defaultComparator;\n    }\n    var isKeyedIterable = isKeyed(iterable);\n    var index = 0;\n    var entries = iterable.toSeq().map(\n      function(v, k)  {return [k, v, index++, mapper ? mapper(v, k, iterable) : v]}\n    ).toArray();\n    entries.sort(function(a, b)  {return comparator(a[3], b[3]) || a[2] - b[2]}).forEach(\n      isKeyedIterable ?\n      function(v, i)  { entries[i].length = 2; } :\n      function(v, i)  { entries[i] = v[1]; }\n    );\n    return isKeyedIterable ? KeyedSeq(entries) :\n      isIndexed(iterable) ? IndexedSeq(entries) :\n      SetSeq(entries);\n  }\n\n\n  function maxFactory(iterable, comparator, mapper) {\n    if (!comparator) {\n      comparator = defaultComparator;\n    }\n    if (mapper) {\n      var entry = iterable.toSeq()\n        .map(function(v, k)  {return [v, mapper(v, k, iterable)]})\n        .reduce(function(a, b)  {return maxCompare(comparator, a[1], b[1]) ? b : a});\n      return entry && entry[0];\n    } else {\n      return iterable.reduce(function(a, b)  {return maxCompare(comparator, a, b) ? b : a});\n    }\n  }\n\n  function maxCompare(comparator, a, b) {\n    var comp = comparator(b, a);\n    // b is considered the new max if the comparator declares them equal, but\n    // they are not equal and b is in fact a nullish value.\n    return (comp === 0 && b !== a && (b === undefined || b === null || b !== b)) || comp > 0;\n  }\n\n\n  function zipWithFactory(keyIter, zipper, iters) {\n    var zipSequence = makeSequence(keyIter);\n    zipSequence.size = new ArraySeq(iters).map(function(i ) {return i.size}).min();\n    // Note: this a generic base implementation of __iterate in terms of\n    // __iterator which may be more generically useful in the future.\n    zipSequence.__iterate = function(fn, reverse) {\n      /* generic:\n      var iterator = this.__iterator(ITERATE_ENTRIES, reverse);\n      var step;\n      var iterations = 0;\n      while (!(step = iterator.next()).done) {\n        iterations++;\n        if (fn(step.value[1], step.value[0], this) === false) {\n          break;\n        }\n      }\n      return iterations;\n      */\n      // indexed:\n      var iterator = this.__iterator(ITERATE_VALUES, reverse);\n      var step;\n      var iterations = 0;\n      while (!(step = iterator.next()).done) {\n        if (fn(step.value, iterations++, this) === false) {\n          break;\n        }\n      }\n      return iterations;\n    };\n    zipSequence.__iteratorUncached = function(type, reverse) {\n      var iterators = iters.map(function(i )\n        {return (i = Iterable(i), getIterator(reverse ? i.reverse() : i))}\n      );\n      var iterations = 0;\n      var isDone = false;\n      return new Iterator(function()  {\n        var steps;\n        if (!isDone) {\n          steps = iterators.map(function(i ) {return i.next()});\n          isDone = steps.some(function(s ) {return s.done});\n        }\n        if (isDone) {\n          return iteratorDone();\n        }\n        return iteratorValue(\n          type,\n          iterations++,\n          zipper.apply(null, steps.map(function(s ) {return s.value}))\n        );\n      });\n    };\n    return zipSequence\n  }\n\n\n  // #pragma Helper Functions\n\n  function reify(iter, seq) {\n    return isSeq(iter) ? seq : iter.constructor(seq);\n  }\n\n  function validateEntry(entry) {\n    if (entry !== Object(entry)) {\n      throw new TypeError('Expected [K, V] tuple: ' + entry);\n    }\n  }\n\n  function resolveSize(iter) {\n    assertNotInfinite(iter.size);\n    return ensureSize(iter);\n  }\n\n  function iterableClass(iterable) {\n    return isKeyed(iterable) ? KeyedIterable :\n      isIndexed(iterable) ? IndexedIterable :\n      SetIterable;\n  }\n\n  function makeSequence(iterable) {\n    return Object.create(\n      (\n        isKeyed(iterable) ? KeyedSeq :\n        isIndexed(iterable) ? IndexedSeq :\n        SetSeq\n      ).prototype\n    );\n  }\n\n  function cacheResultThrough() {\n    if (this._iter.cacheResult) {\n      this._iter.cacheResult();\n      this.size = this._iter.size;\n      return this;\n    } else {\n      return Seq.prototype.cacheResult.call(this);\n    }\n  }\n\n  function defaultComparator(a, b) {\n    return a > b ? 1 : a < b ? -1 : 0;\n  }\n\n  function forceIterator(keyPath) {\n    var iter = getIterator(keyPath);\n    if (!iter) {\n      // Array might not be iterable in this environment, so we need a fallback\n      // to our wrapped type.\n      if (!isArrayLike(keyPath)) {\n        throw new TypeError('Expected iterable or array-like: ' + keyPath);\n      }\n      iter = getIterator(Iterable(keyPath));\n    }\n    return iter;\n  }\n\n  createClass(Record, KeyedCollection);\n\n    function Record(defaultValues, name) {\n      var hasInitialized;\n\n      var RecordType = function Record(values) {\n        if (values instanceof RecordType) {\n          return values;\n        }\n        if (!(this instanceof RecordType)) {\n          return new RecordType(values);\n        }\n        if (!hasInitialized) {\n          hasInitialized = true;\n          var keys = Object.keys(defaultValues);\n          setProps(RecordTypePrototype, keys);\n          RecordTypePrototype.size = keys.length;\n          RecordTypePrototype._name = name;\n          RecordTypePrototype._keys = keys;\n          RecordTypePrototype._defaultValues = defaultValues;\n        }\n        this._map = Map(values);\n      };\n\n      var RecordTypePrototype = RecordType.prototype = Object.create(RecordPrototype);\n      RecordTypePrototype.constructor = RecordType;\n\n      return RecordType;\n    }\n\n    Record.prototype.toString = function() {\n      return this.__toString(recordName(this) + ' {', '}');\n    };\n\n    // @pragma Access\n\n    Record.prototype.has = function(k) {\n      return this._defaultValues.hasOwnProperty(k);\n    };\n\n    Record.prototype.get = function(k, notSetValue) {\n      if (!this.has(k)) {\n        return notSetValue;\n      }\n      var defaultVal = this._defaultValues[k];\n      return this._map ? this._map.get(k, defaultVal) : defaultVal;\n    };\n\n    // @pragma Modification\n\n    Record.prototype.clear = function() {\n      if (this.__ownerID) {\n        this._map && this._map.clear();\n        return this;\n      }\n      var RecordType = this.constructor;\n      return RecordType._empty || (RecordType._empty = makeRecord(this, emptyMap()));\n    };\n\n    Record.prototype.set = function(k, v) {\n      if (!this.has(k)) {\n        throw new Error('Cannot set unknown key \"' + k + '\" on ' + recordName(this));\n      }\n      var newMap = this._map && this._map.set(k, v);\n      if (this.__ownerID || newMap === this._map) {\n        return this;\n      }\n      return makeRecord(this, newMap);\n    };\n\n    Record.prototype.remove = function(k) {\n      if (!this.has(k)) {\n        return this;\n      }\n      var newMap = this._map && this._map.remove(k);\n      if (this.__ownerID || newMap === this._map) {\n        return this;\n      }\n      return makeRecord(this, newMap);\n    };\n\n    Record.prototype.wasAltered = function() {\n      return this._map.wasAltered();\n    };\n\n    Record.prototype.__iterator = function(type, reverse) {var this$0 = this;\n      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterator(type, reverse);\n    };\n\n    Record.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterate(fn, reverse);\n    };\n\n    Record.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      var newMap = this._map && this._map.__ensureOwner(ownerID);\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this._map = newMap;\n        return this;\n      }\n      return makeRecord(this, newMap, ownerID);\n    };\n\n\n  var RecordPrototype = Record.prototype;\n  RecordPrototype[DELETE] = RecordPrototype.remove;\n  RecordPrototype.deleteIn =\n  RecordPrototype.removeIn = MapPrototype.removeIn;\n  RecordPrototype.merge = MapPrototype.merge;\n  RecordPrototype.mergeWith = MapPrototype.mergeWith;\n  RecordPrototype.mergeIn = MapPrototype.mergeIn;\n  RecordPrototype.mergeDeep = MapPrototype.mergeDeep;\n  RecordPrototype.mergeDeepWith = MapPrototype.mergeDeepWith;\n  RecordPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;\n  RecordPrototype.setIn = MapPrototype.setIn;\n  RecordPrototype.update = MapPrototype.update;\n  RecordPrototype.updateIn = MapPrototype.updateIn;\n  RecordPrototype.withMutations = MapPrototype.withMutations;\n  RecordPrototype.asMutable = MapPrototype.asMutable;\n  RecordPrototype.asImmutable = MapPrototype.asImmutable;\n\n\n  function makeRecord(likeRecord, map, ownerID) {\n    var record = Object.create(Object.getPrototypeOf(likeRecord));\n    record._map = map;\n    record.__ownerID = ownerID;\n    return record;\n  }\n\n  function recordName(record) {\n    return record._name || record.constructor.name || 'Record';\n  }\n\n  function setProps(prototype, names) {\n    try {\n      names.forEach(setProp.bind(undefined, prototype));\n    } catch (error) {\n      // Object.defineProperty failed. Probably IE8.\n    }\n  }\n\n  function setProp(prototype, name) {\n    Object.defineProperty(prototype, name, {\n      get: function() {\n        return this.get(name);\n      },\n      set: function(value) {\n        invariant(this.__ownerID, 'Cannot set on an immutable record.');\n        this.set(name, value);\n      }\n    });\n  }\n\n  createClass(Set, SetCollection);\n\n    // @pragma Construction\n\n    function Set(value) {\n      return value === null || value === undefined ? emptySet() :\n        isSet(value) && !isOrdered(value) ? value :\n        emptySet().withMutations(function(set ) {\n          var iter = SetIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v ) {return set.add(v)});\n        });\n    }\n\n    Set.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    Set.fromKeys = function(value) {\n      return this(KeyedIterable(value).keySeq());\n    };\n\n    Set.prototype.toString = function() {\n      return this.__toString('Set {', '}');\n    };\n\n    // @pragma Access\n\n    Set.prototype.has = function(value) {\n      return this._map.has(value);\n    };\n\n    // @pragma Modification\n\n    Set.prototype.add = function(value) {\n      return updateSet(this, this._map.set(value, true));\n    };\n\n    Set.prototype.remove = function(value) {\n      return updateSet(this, this._map.remove(value));\n    };\n\n    Set.prototype.clear = function() {\n      return updateSet(this, this._map.clear());\n    };\n\n    // @pragma Composition\n\n    Set.prototype.union = function() {var iters = SLICE$0.call(arguments, 0);\n      iters = iters.filter(function(x ) {return x.size !== 0});\n      if (iters.length === 0) {\n        return this;\n      }\n      if (this.size === 0 && !this.__ownerID && iters.length === 1) {\n        return this.constructor(iters[0]);\n      }\n      return this.withMutations(function(set ) {\n        for (var ii = 0; ii < iters.length; ii++) {\n          SetIterable(iters[ii]).forEach(function(value ) {return set.add(value)});\n        }\n      });\n    };\n\n    Set.prototype.intersect = function() {var iters = SLICE$0.call(arguments, 0);\n      if (iters.length === 0) {\n        return this;\n      }\n      iters = iters.map(function(iter ) {return SetIterable(iter)});\n      var originalSet = this;\n      return this.withMutations(function(set ) {\n        originalSet.forEach(function(value ) {\n          if (!iters.every(function(iter ) {return iter.includes(value)})) {\n            set.remove(value);\n          }\n        });\n      });\n    };\n\n    Set.prototype.subtract = function() {var iters = SLICE$0.call(arguments, 0);\n      if (iters.length === 0) {\n        return this;\n      }\n      iters = iters.map(function(iter ) {return SetIterable(iter)});\n      var originalSet = this;\n      return this.withMutations(function(set ) {\n        originalSet.forEach(function(value ) {\n          if (iters.some(function(iter ) {return iter.includes(value)})) {\n            set.remove(value);\n          }\n        });\n      });\n    };\n\n    Set.prototype.merge = function() {\n      return this.union.apply(this, arguments);\n    };\n\n    Set.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return this.union.apply(this, iters);\n    };\n\n    Set.prototype.sort = function(comparator) {\n      // Late binding\n      return OrderedSet(sortFactory(this, comparator));\n    };\n\n    Set.prototype.sortBy = function(mapper, comparator) {\n      // Late binding\n      return OrderedSet(sortFactory(this, comparator, mapper));\n    };\n\n    Set.prototype.wasAltered = function() {\n      return this._map.wasAltered();\n    };\n\n    Set.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._map.__iterate(function(_, k)  {return fn(k, k, this$0)}, reverse);\n    };\n\n    Set.prototype.__iterator = function(type, reverse) {\n      return this._map.map(function(_, k)  {return k}).__iterator(type, reverse);\n    };\n\n    Set.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      var newMap = this._map.__ensureOwner(ownerID);\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this._map = newMap;\n        return this;\n      }\n      return this.__make(newMap, ownerID);\n    };\n\n\n  function isSet(maybeSet) {\n    return !!(maybeSet && maybeSet[IS_SET_SENTINEL]);\n  }\n\n  Set.isSet = isSet;\n\n  var IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';\n\n  var SetPrototype = Set.prototype;\n  SetPrototype[IS_SET_SENTINEL] = true;\n  SetPrototype[DELETE] = SetPrototype.remove;\n  SetPrototype.mergeDeep = SetPrototype.merge;\n  SetPrototype.mergeDeepWith = SetPrototype.mergeWith;\n  SetPrototype.withMutations = MapPrototype.withMutations;\n  SetPrototype.asMutable = MapPrototype.asMutable;\n  SetPrototype.asImmutable = MapPrototype.asImmutable;\n\n  SetPrototype.__empty = emptySet;\n  SetPrototype.__make = makeSet;\n\n  function updateSet(set, newMap) {\n    if (set.__ownerID) {\n      set.size = newMap.size;\n      set._map = newMap;\n      return set;\n    }\n    return newMap === set._map ? set :\n      newMap.size === 0 ? set.__empty() :\n      set.__make(newMap);\n  }\n\n  function makeSet(map, ownerID) {\n    var set = Object.create(SetPrototype);\n    set.size = map ? map.size : 0;\n    set._map = map;\n    set.__ownerID = ownerID;\n    return set;\n  }\n\n  var EMPTY_SET;\n  function emptySet() {\n    return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));\n  }\n\n  createClass(OrderedSet, Set);\n\n    // @pragma Construction\n\n    function OrderedSet(value) {\n      return value === null || value === undefined ? emptyOrderedSet() :\n        isOrderedSet(value) ? value :\n        emptyOrderedSet().withMutations(function(set ) {\n          var iter = SetIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v ) {return set.add(v)});\n        });\n    }\n\n    OrderedSet.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    OrderedSet.fromKeys = function(value) {\n      return this(KeyedIterable(value).keySeq());\n    };\n\n    OrderedSet.prototype.toString = function() {\n      return this.__toString('OrderedSet {', '}');\n    };\n\n\n  function isOrderedSet(maybeOrderedSet) {\n    return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);\n  }\n\n  OrderedSet.isOrderedSet = isOrderedSet;\n\n  var OrderedSetPrototype = OrderedSet.prototype;\n  OrderedSetPrototype[IS_ORDERED_SENTINEL] = true;\n\n  OrderedSetPrototype.__empty = emptyOrderedSet;\n  OrderedSetPrototype.__make = makeOrderedSet;\n\n  function makeOrderedSet(map, ownerID) {\n    var set = Object.create(OrderedSetPrototype);\n    set.size = map ? map.size : 0;\n    set._map = map;\n    set.__ownerID = ownerID;\n    return set;\n  }\n\n  var EMPTY_ORDERED_SET;\n  function emptyOrderedSet() {\n    return EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));\n  }\n\n  createClass(Stack, IndexedCollection);\n\n    // @pragma Construction\n\n    function Stack(value) {\n      return value === null || value === undefined ? emptyStack() :\n        isStack(value) ? value :\n        emptyStack().unshiftAll(value);\n    }\n\n    Stack.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    Stack.prototype.toString = function() {\n      return this.__toString('Stack [', ']');\n    };\n\n    // @pragma Access\n\n    Stack.prototype.get = function(index, notSetValue) {\n      var head = this._head;\n      index = wrapIndex(this, index);\n      while (head && index--) {\n        head = head.next;\n      }\n      return head ? head.value : notSetValue;\n    };\n\n    Stack.prototype.peek = function() {\n      return this._head && this._head.value;\n    };\n\n    // @pragma Modification\n\n    Stack.prototype.push = function(/*...values*/) {\n      if (arguments.length === 0) {\n        return this;\n      }\n      var newSize = this.size + arguments.length;\n      var head = this._head;\n      for (var ii = arguments.length - 1; ii >= 0; ii--) {\n        head = {\n          value: arguments[ii],\n          next: head\n        };\n      }\n      if (this.__ownerID) {\n        this.size = newSize;\n        this._head = head;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return makeStack(newSize, head);\n    };\n\n    Stack.prototype.pushAll = function(iter) {\n      iter = IndexedIterable(iter);\n      if (iter.size === 0) {\n        return this;\n      }\n      assertNotInfinite(iter.size);\n      var newSize = this.size;\n      var head = this._head;\n      iter.reverse().forEach(function(value ) {\n        newSize++;\n        head = {\n          value: value,\n          next: head\n        };\n      });\n      if (this.__ownerID) {\n        this.size = newSize;\n        this._head = head;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return makeStack(newSize, head);\n    };\n\n    Stack.prototype.pop = function() {\n      return this.slice(1);\n    };\n\n    Stack.prototype.unshift = function(/*...values*/) {\n      return this.push.apply(this, arguments);\n    };\n\n    Stack.prototype.unshiftAll = function(iter) {\n      return this.pushAll(iter);\n    };\n\n    Stack.prototype.shift = function() {\n      return this.pop.apply(this, arguments);\n    };\n\n    Stack.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = 0;\n        this._head = undefined;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return emptyStack();\n    };\n\n    Stack.prototype.slice = function(begin, end) {\n      if (wholeSlice(begin, end, this.size)) {\n        return this;\n      }\n      var resolvedBegin = resolveBegin(begin, this.size);\n      var resolvedEnd = resolveEnd(end, this.size);\n      if (resolvedEnd !== this.size) {\n        // super.slice(begin, end);\n        return IndexedCollection.prototype.slice.call(this, begin, end);\n      }\n      var newSize = this.size - resolvedBegin;\n      var head = this._head;\n      while (resolvedBegin--) {\n        head = head.next;\n      }\n      if (this.__ownerID) {\n        this.size = newSize;\n        this._head = head;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return makeStack(newSize, head);\n    };\n\n    // @pragma Mutability\n\n    Stack.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this.__altered = false;\n        return this;\n      }\n      return makeStack(this.size, this._head, ownerID, this.__hash);\n    };\n\n    // @pragma Iteration\n\n    Stack.prototype.__iterate = function(fn, reverse) {\n      if (reverse) {\n        return this.reverse().__iterate(fn);\n      }\n      var iterations = 0;\n      var node = this._head;\n      while (node) {\n        if (fn(node.value, iterations++, this) === false) {\n          break;\n        }\n        node = node.next;\n      }\n      return iterations;\n    };\n\n    Stack.prototype.__iterator = function(type, reverse) {\n      if (reverse) {\n        return this.reverse().__iterator(type);\n      }\n      var iterations = 0;\n      var node = this._head;\n      return new Iterator(function()  {\n        if (node) {\n          var value = node.value;\n          node = node.next;\n          return iteratorValue(type, iterations++, value);\n        }\n        return iteratorDone();\n      });\n    };\n\n\n  function isStack(maybeStack) {\n    return !!(maybeStack && maybeStack[IS_STACK_SENTINEL]);\n  }\n\n  Stack.isStack = isStack;\n\n  var IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';\n\n  var StackPrototype = Stack.prototype;\n  StackPrototype[IS_STACK_SENTINEL] = true;\n  StackPrototype.withMutations = MapPrototype.withMutations;\n  StackPrototype.asMutable = MapPrototype.asMutable;\n  StackPrototype.asImmutable = MapPrototype.asImmutable;\n  StackPrototype.wasAltered = MapPrototype.wasAltered;\n\n\n  function makeStack(size, head, ownerID, hash) {\n    var map = Object.create(StackPrototype);\n    map.size = size;\n    map._head = head;\n    map.__ownerID = ownerID;\n    map.__hash = hash;\n    map.__altered = false;\n    return map;\n  }\n\n  var EMPTY_STACK;\n  function emptyStack() {\n    return EMPTY_STACK || (EMPTY_STACK = makeStack(0));\n  }\n\n  /**\n   * Contributes additional methods to a constructor\n   */\n  function mixin(ctor, methods) {\n    var keyCopier = function(key ) { ctor.prototype[key] = methods[key]; };\n    Object.keys(methods).forEach(keyCopier);\n    Object.getOwnPropertySymbols &&\n      Object.getOwnPropertySymbols(methods).forEach(keyCopier);\n    return ctor;\n  }\n\n  Iterable.Iterator = Iterator;\n\n  mixin(Iterable, {\n\n    // ### Conversion to other types\n\n    toArray: function() {\n      assertNotInfinite(this.size);\n      var array = new Array(this.size || 0);\n      this.valueSeq().__iterate(function(v, i)  { array[i] = v; });\n      return array;\n    },\n\n    toIndexedSeq: function() {\n      return new ToIndexedSequence(this);\n    },\n\n    toJS: function() {\n      return this.toSeq().map(\n        function(value ) {return value && typeof value.toJS === 'function' ? value.toJS() : value}\n      ).__toJS();\n    },\n\n    toJSON: function() {\n      return this.toSeq().map(\n        function(value ) {return value && typeof value.toJSON === 'function' ? value.toJSON() : value}\n      ).__toJS();\n    },\n\n    toKeyedSeq: function() {\n      return new ToKeyedSequence(this, true);\n    },\n\n    toMap: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return Map(this.toKeyedSeq());\n    },\n\n    toObject: function() {\n      assertNotInfinite(this.size);\n      var object = {};\n      this.__iterate(function(v, k)  { object[k] = v; });\n      return object;\n    },\n\n    toOrderedMap: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return OrderedMap(this.toKeyedSeq());\n    },\n\n    toOrderedSet: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return OrderedSet(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n    toSet: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return Set(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n    toSetSeq: function() {\n      return new ToSetSequence(this);\n    },\n\n    toSeq: function() {\n      return isIndexed(this) ? this.toIndexedSeq() :\n        isKeyed(this) ? this.toKeyedSeq() :\n        this.toSetSeq();\n    },\n\n    toStack: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return Stack(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n    toList: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return List(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n\n    // ### Common JavaScript methods and properties\n\n    toString: function() {\n      return '[Iterable]';\n    },\n\n    __toString: function(head, tail) {\n      if (this.size === 0) {\n        return head + tail;\n      }\n      return head + ' ' + this.toSeq().map(this.__toStringMapper).join(', ') + ' ' + tail;\n    },\n\n\n    // ### ES6 Collection methods (ES6 Array and Map)\n\n    concat: function() {var values = SLICE$0.call(arguments, 0);\n      return reify(this, concatFactory(this, values));\n    },\n\n    includes: function(searchValue) {\n      return this.some(function(value ) {return is(value, searchValue)});\n    },\n\n    entries: function() {\n      return this.__iterator(ITERATE_ENTRIES);\n    },\n\n    every: function(predicate, context) {\n      assertNotInfinite(this.size);\n      var returnValue = true;\n      this.__iterate(function(v, k, c)  {\n        if (!predicate.call(context, v, k, c)) {\n          returnValue = false;\n          return false;\n        }\n      });\n      return returnValue;\n    },\n\n    filter: function(predicate, context) {\n      return reify(this, filterFactory(this, predicate, context, true));\n    },\n\n    find: function(predicate, context, notSetValue) {\n      var entry = this.findEntry(predicate, context);\n      return entry ? entry[1] : notSetValue;\n    },\n\n    findEntry: function(predicate, context) {\n      var found;\n      this.__iterate(function(v, k, c)  {\n        if (predicate.call(context, v, k, c)) {\n          found = [k, v];\n          return false;\n        }\n      });\n      return found;\n    },\n\n    findLastEntry: function(predicate, context) {\n      return this.toSeq().reverse().findEntry(predicate, context);\n    },\n\n    forEach: function(sideEffect, context) {\n      assertNotInfinite(this.size);\n      return this.__iterate(context ? sideEffect.bind(context) : sideEffect);\n    },\n\n    join: function(separator) {\n      assertNotInfinite(this.size);\n      separator = separator !== undefined ? '' + separator : ',';\n      var joined = '';\n      var isFirst = true;\n      this.__iterate(function(v ) {\n        isFirst ? (isFirst = false) : (joined += separator);\n        joined += v !== null && v !== undefined ? v.toString() : '';\n      });\n      return joined;\n    },\n\n    keys: function() {\n      return this.__iterator(ITERATE_KEYS);\n    },\n\n    map: function(mapper, context) {\n      return reify(this, mapFactory(this, mapper, context));\n    },\n\n    reduce: function(reducer, initialReduction, context) {\n      assertNotInfinite(this.size);\n      var reduction;\n      var useFirst;\n      if (arguments.length < 2) {\n        useFirst = true;\n      } else {\n        reduction = initialReduction;\n      }\n      this.__iterate(function(v, k, c)  {\n        if (useFirst) {\n          useFirst = false;\n          reduction = v;\n        } else {\n          reduction = reducer.call(context, reduction, v, k, c);\n        }\n      });\n      return reduction;\n    },\n\n    reduceRight: function(reducer, initialReduction, context) {\n      var reversed = this.toKeyedSeq().reverse();\n      return reversed.reduce.apply(reversed, arguments);\n    },\n\n    reverse: function() {\n      return reify(this, reverseFactory(this, true));\n    },\n\n    slice: function(begin, end) {\n      return reify(this, sliceFactory(this, begin, end, true));\n    },\n\n    some: function(predicate, context) {\n      return !this.every(not(predicate), context);\n    },\n\n    sort: function(comparator) {\n      return reify(this, sortFactory(this, comparator));\n    },\n\n    values: function() {\n      return this.__iterator(ITERATE_VALUES);\n    },\n\n\n    // ### More sequential methods\n\n    butLast: function() {\n      return this.slice(0, -1);\n    },\n\n    isEmpty: function() {\n      return this.size !== undefined ? this.size === 0 : !this.some(function()  {return true});\n    },\n\n    count: function(predicate, context) {\n      return ensureSize(\n        predicate ? this.toSeq().filter(predicate, context) : this\n      );\n    },\n\n    countBy: function(grouper, context) {\n      return countByFactory(this, grouper, context);\n    },\n\n    equals: function(other) {\n      return deepEqual(this, other);\n    },\n\n    entrySeq: function() {\n      var iterable = this;\n      if (iterable._cache) {\n        // We cache as an entries array, so we can just return the cache!\n        return new ArraySeq(iterable._cache);\n      }\n      var entriesSequence = iterable.toSeq().map(entryMapper).toIndexedSeq();\n      entriesSequence.fromEntrySeq = function()  {return iterable.toSeq()};\n      return entriesSequence;\n    },\n\n    filterNot: function(predicate, context) {\n      return this.filter(not(predicate), context);\n    },\n\n    findLast: function(predicate, context, notSetValue) {\n      return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);\n    },\n\n    first: function() {\n      return this.find(returnTrue);\n    },\n\n    flatMap: function(mapper, context) {\n      return reify(this, flatMapFactory(this, mapper, context));\n    },\n\n    flatten: function(depth) {\n      return reify(this, flattenFactory(this, depth, true));\n    },\n\n    fromEntrySeq: function() {\n      return new FromEntriesSequence(this);\n    },\n\n    get: function(searchKey, notSetValue) {\n      return this.find(function(_, key)  {return is(key, searchKey)}, undefined, notSetValue);\n    },\n\n    getIn: function(searchKeyPath, notSetValue) {\n      var nested = this;\n      // Note: in an ES6 environment, we would prefer:\n      // for (var key of searchKeyPath) {\n      var iter = forceIterator(searchKeyPath);\n      var step;\n      while (!(step = iter.next()).done) {\n        var key = step.value;\n        nested = nested && nested.get ? nested.get(key, NOT_SET) : NOT_SET;\n        if (nested === NOT_SET) {\n          return notSetValue;\n        }\n      }\n      return nested;\n    },\n\n    groupBy: function(grouper, context) {\n      return groupByFactory(this, grouper, context);\n    },\n\n    has: function(searchKey) {\n      return this.get(searchKey, NOT_SET) !== NOT_SET;\n    },\n\n    hasIn: function(searchKeyPath) {\n      return this.getIn(searchKeyPath, NOT_SET) !== NOT_SET;\n    },\n\n    isSubset: function(iter) {\n      iter = typeof iter.includes === 'function' ? iter : Iterable(iter);\n      return this.every(function(value ) {return iter.includes(value)});\n    },\n\n    isSuperset: function(iter) {\n      iter = typeof iter.isSubset === 'function' ? iter : Iterable(iter);\n      return iter.isSubset(this);\n    },\n\n    keySeq: function() {\n      return this.toSeq().map(keyMapper).toIndexedSeq();\n    },\n\n    last: function() {\n      return this.toSeq().reverse().first();\n    },\n\n    max: function(comparator) {\n      return maxFactory(this, comparator);\n    },\n\n    maxBy: function(mapper, comparator) {\n      return maxFactory(this, comparator, mapper);\n    },\n\n    min: function(comparator) {\n      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator);\n    },\n\n    minBy: function(mapper, comparator) {\n      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator, mapper);\n    },\n\n    rest: function() {\n      return this.slice(1);\n    },\n\n    skip: function(amount) {\n      return this.slice(Math.max(0, amount));\n    },\n\n    skipLast: function(amount) {\n      return reify(this, this.toSeq().reverse().skip(amount).reverse());\n    },\n\n    skipWhile: function(predicate, context) {\n      return reify(this, skipWhileFactory(this, predicate, context, true));\n    },\n\n    skipUntil: function(predicate, context) {\n      return this.skipWhile(not(predicate), context);\n    },\n\n    sortBy: function(mapper, comparator) {\n      return reify(this, sortFactory(this, comparator, mapper));\n    },\n\n    take: function(amount) {\n      return this.slice(0, Math.max(0, amount));\n    },\n\n    takeLast: function(amount) {\n      return reify(this, this.toSeq().reverse().take(amount).reverse());\n    },\n\n    takeWhile: function(predicate, context) {\n      return reify(this, takeWhileFactory(this, predicate, context));\n    },\n\n    takeUntil: function(predicate, context) {\n      return this.takeWhile(not(predicate), context);\n    },\n\n    valueSeq: function() {\n      return this.toIndexedSeq();\n    },\n\n\n    // ### Hashable Object\n\n    hashCode: function() {\n      return this.__hash || (this.__hash = hashIterable(this));\n    }\n\n\n    // ### Internal\n\n    // abstract __iterate(fn, reverse)\n\n    // abstract __iterator(type, reverse)\n  });\n\n  // var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\n  // var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\n  // var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';\n  // var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\n\n  var IterablePrototype = Iterable.prototype;\n  IterablePrototype[IS_ITERABLE_SENTINEL] = true;\n  IterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.values;\n  IterablePrototype.__toJS = IterablePrototype.toArray;\n  IterablePrototype.__toStringMapper = quoteString;\n  IterablePrototype.inspect =\n  IterablePrototype.toSource = function() { return this.toString(); };\n  IterablePrototype.chain = IterablePrototype.flatMap;\n  IterablePrototype.contains = IterablePrototype.includes;\n\n  // Temporary warning about using length\n  (function () {\n    try {\n      Object.defineProperty(IterablePrototype, 'length', {\n        get: function () {\n          if (!Iterable.noLengthWarning) {\n            var stack;\n            try {\n              throw new Error();\n            } catch (error) {\n              stack = error.stack;\n            }\n            if (stack.indexOf('_wrapObject') === -1) {\n              console && console.warn && console.warn(\n                'iterable.length has been deprecated, '+\n                'use iterable.size or iterable.count(). '+\n                'This warning will become a silent error in a future version. ' +\n                stack\n              );\n              return this.size;\n            }\n          }\n        }\n      });\n    } catch (e) {}\n  })();\n\n\n\n  mixin(KeyedIterable, {\n\n    // ### More sequential methods\n\n    flip: function() {\n      return reify(this, flipFactory(this));\n    },\n\n    findKey: function(predicate, context) {\n      var entry = this.findEntry(predicate, context);\n      return entry && entry[0];\n    },\n\n    findLastKey: function(predicate, context) {\n      return this.toSeq().reverse().findKey(predicate, context);\n    },\n\n    keyOf: function(searchValue) {\n      return this.findKey(function(value ) {return is(value, searchValue)});\n    },\n\n    lastKeyOf: function(searchValue) {\n      return this.findLastKey(function(value ) {return is(value, searchValue)});\n    },\n\n    mapEntries: function(mapper, context) {var this$0 = this;\n      var iterations = 0;\n      return reify(this,\n        this.toSeq().map(\n          function(v, k)  {return mapper.call(context, [k, v], iterations++, this$0)}\n        ).fromEntrySeq()\n      );\n    },\n\n    mapKeys: function(mapper, context) {var this$0 = this;\n      return reify(this,\n        this.toSeq().flip().map(\n          function(k, v)  {return mapper.call(context, k, v, this$0)}\n        ).flip()\n      );\n    }\n\n  });\n\n  var KeyedIterablePrototype = KeyedIterable.prototype;\n  KeyedIterablePrototype[IS_KEYED_SENTINEL] = true;\n  KeyedIterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.entries;\n  KeyedIterablePrototype.__toJS = IterablePrototype.toObject;\n  KeyedIterablePrototype.__toStringMapper = function(v, k)  {return JSON.stringify(k) + ': ' + quoteString(v)};\n\n\n\n  mixin(IndexedIterable, {\n\n    // ### Conversion to other types\n\n    toKeyedSeq: function() {\n      return new ToKeyedSequence(this, false);\n    },\n\n\n    // ### ES6 Collection methods (ES6 Array and Map)\n\n    filter: function(predicate, context) {\n      return reify(this, filterFactory(this, predicate, context, false));\n    },\n\n    findIndex: function(predicate, context) {\n      var entry = this.findEntry(predicate, context);\n      return entry ? entry[0] : -1;\n    },\n\n    indexOf: function(searchValue) {\n      var key = this.toKeyedSeq().keyOf(searchValue);\n      return key === undefined ? -1 : key;\n    },\n\n    lastIndexOf: function(searchValue) {\n      var key = this.toKeyedSeq().reverse().keyOf(searchValue);\n      return key === undefined ? -1 : key;\n\n      // var index =\n      // return this.toSeq().reverse().indexOf(searchValue);\n    },\n\n    reverse: function() {\n      return reify(this, reverseFactory(this, false));\n    },\n\n    slice: function(begin, end) {\n      return reify(this, sliceFactory(this, begin, end, false));\n    },\n\n    splice: function(index, removeNum /*, ...values*/) {\n      var numArgs = arguments.length;\n      removeNum = Math.max(removeNum | 0, 0);\n      if (numArgs === 0 || (numArgs === 2 && !removeNum)) {\n        return this;\n      }\n      // If index is negative, it should resolve relative to the size of the\n      // collection. However size may be expensive to compute if not cached, so\n      // only call count() if the number is in fact negative.\n      index = resolveBegin(index, index < 0 ? this.count() : this.size);\n      var spliced = this.slice(0, index);\n      return reify(\n        this,\n        numArgs === 1 ?\n          spliced :\n          spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum))\n      );\n    },\n\n\n    // ### More collection methods\n\n    findLastIndex: function(predicate, context) {\n      var key = this.toKeyedSeq().findLastKey(predicate, context);\n      return key === undefined ? -1 : key;\n    },\n\n    first: function() {\n      return this.get(0);\n    },\n\n    flatten: function(depth) {\n      return reify(this, flattenFactory(this, depth, false));\n    },\n\n    get: function(index, notSetValue) {\n      index = wrapIndex(this, index);\n      return (index < 0 || (this.size === Infinity ||\n          (this.size !== undefined && index > this.size))) ?\n        notSetValue :\n        this.find(function(_, key)  {return key === index}, undefined, notSetValue);\n    },\n\n    has: function(index) {\n      index = wrapIndex(this, index);\n      return index >= 0 && (this.size !== undefined ?\n        this.size === Infinity || index < this.size :\n        this.indexOf(index) !== -1\n      );\n    },\n\n    interpose: function(separator) {\n      return reify(this, interposeFactory(this, separator));\n    },\n\n    interleave: function(/*...iterables*/) {\n      var iterables = [this].concat(arrCopy(arguments));\n      var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, iterables);\n      var interleaved = zipped.flatten(true);\n      if (zipped.size) {\n        interleaved.size = zipped.size * iterables.length;\n      }\n      return reify(this, interleaved);\n    },\n\n    last: function() {\n      return this.get(-1);\n    },\n\n    skipWhile: function(predicate, context) {\n      return reify(this, skipWhileFactory(this, predicate, context, false));\n    },\n\n    zip: function(/*, ...iterables */) {\n      var iterables = [this].concat(arrCopy(arguments));\n      return reify(this, zipWithFactory(this, defaultZipper, iterables));\n    },\n\n    zipWith: function(zipper/*, ...iterables */) {\n      var iterables = arrCopy(arguments);\n      iterables[0] = this;\n      return reify(this, zipWithFactory(this, zipper, iterables));\n    }\n\n  });\n\n  IndexedIterable.prototype[IS_INDEXED_SENTINEL] = true;\n  IndexedIterable.prototype[IS_ORDERED_SENTINEL] = true;\n\n\n\n  mixin(SetIterable, {\n\n    // ### ES6 Collection methods (ES6 Array and Map)\n\n    get: function(value, notSetValue) {\n      return this.has(value) ? value : notSetValue;\n    },\n\n    includes: function(value) {\n      return this.has(value);\n    },\n\n\n    // ### More sequential methods\n\n    keySeq: function() {\n      return this.valueSeq();\n    }\n\n  });\n\n  SetIterable.prototype.has = IterablePrototype.includes;\n\n\n  // Mixin subclasses\n\n  mixin(KeyedSeq, KeyedIterable.prototype);\n  mixin(IndexedSeq, IndexedIterable.prototype);\n  mixin(SetSeq, SetIterable.prototype);\n\n  mixin(KeyedCollection, KeyedIterable.prototype);\n  mixin(IndexedCollection, IndexedIterable.prototype);\n  mixin(SetCollection, SetIterable.prototype);\n\n\n  // #pragma Helper functions\n\n  function keyMapper(v, k) {\n    return k;\n  }\n\n  function entryMapper(v, k) {\n    return [k, v];\n  }\n\n  function not(predicate) {\n    return function() {\n      return !predicate.apply(this, arguments);\n    }\n  }\n\n  function neg(predicate) {\n    return function() {\n      return -predicate.apply(this, arguments);\n    }\n  }\n\n  function quoteString(value) {\n    return typeof value === 'string' ? JSON.stringify(value) : value;\n  }\n\n  function defaultZipper() {\n    return arrCopy(arguments);\n  }\n\n  function defaultNegComparator(a, b) {\n    return a < b ? 1 : a > b ? -1 : 0;\n  }\n\n  function hashIterable(iterable) {\n    if (iterable.size === Infinity) {\n      return 0;\n    }\n    var ordered = isOrdered(iterable);\n    var keyed = isKeyed(iterable);\n    var h = ordered ? 1 : 0;\n    var size = iterable.__iterate(\n      keyed ?\n        ordered ?\n          function(v, k)  { h = 31 * h + hashMerge(hash(v), hash(k)) | 0; } :\n          function(v, k)  { h = h + hashMerge(hash(v), hash(k)) | 0; } :\n        ordered ?\n          function(v ) { h = 31 * h + hash(v) | 0; } :\n          function(v ) { h = h + hash(v) | 0; }\n    );\n    return murmurHashOfSize(size, h);\n  }\n\n  function murmurHashOfSize(size, h) {\n    h = imul(h, 0xCC9E2D51);\n    h = imul(h << 15 | h >>> -15, 0x1B873593);\n    h = imul(h << 13 | h >>> -13, 5);\n    h = (h + 0xE6546B64 | 0) ^ size;\n    h = imul(h ^ h >>> 16, 0x85EBCA6B);\n    h = imul(h ^ h >>> 13, 0xC2B2AE35);\n    h = smi(h ^ h >>> 16);\n    return h;\n  }\n\n  function hashMerge(a, b) {\n    return a ^ b + 0x9E3779B9 + (a << 6) + (a >> 2) | 0; // int\n  }\n\n  var Immutable = {\n\n    Iterable: Iterable,\n\n    Seq: Seq,\n    Collection: Collection,\n    Map: Map,\n    OrderedMap: OrderedMap,\n    List: List,\n    Stack: Stack,\n    Set: Set,\n    OrderedSet: OrderedSet,\n\n    Record: Record,\n    Range: Range,\n    Repeat: Repeat,\n\n    is: is,\n    fromJS: fromJS\n\n  };\n\n  return Immutable;\n\n}));\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/immutable/dist/immutable.js\n ** module id = 2\n ** module chunks = 0\n **/","(function(exports) {\n  // 'use strict';\n\n  var renderId = '__render_id';\n  var EPSILON = .5;\n\n  var attributeChanged = function(attr, prev, value) {\n    switch (attr) {\n      case 'value':\n      case 'min':\n      case 'max':\n        this[attr] = value;\n        break;\n    }\n  };\n\n  exports.EITIBar = document.registerElement('eiti-bar', {\n    prototype: Object.create(\n      HTMLElement.prototype,\n      {\n        createdCallback: {value: function() {\n          this.__bar = getBar(this);\n        }},\n\n        attachedCallback: {value: function() {\n          [].forEach.call(this.attributes, function(attr) {\n            attributeChanged.call(this, attr.name, null, attr.value);\n          });\n        }},\n\n        attributeChangedCallback: {value: attributeChanged},\n\n        min: numericProperty('min', 0),\n        max: numericProperty('max', 1),\n        value: numericProperty('value', 0),\n\n        render: {value: render}\n      }\n    )\n  });\n\n  function getBar(parent) {\n    var klass = 'eiti-bar-bar';\n    var bar = parent.getElementsByClassName(klass)[0];\n    if (!bar) {\n      bar = parent.appendChild(document.createElement('span'));\n      bar.setAttribute('class', klass);\n    }\n    return bar;\n  }\n\n  function render(force) {\n    if (force) {\n      _render.call(this);\n    } else if (!this[renderId]) {\n      this[renderId] = requestAnimationFrame(_render.bind(this));\n    }\n  }\n\n  function _render() {\n    var min = this.min;\n    var max = this.max;\n    var value = this.value;\n\n    var bar = getBar(this);\n    bar.classList.toggle('eiti-bar-bar_negative', value < 0);\n\n    var x = scale(value, min, max) * 100;\n    var zero = min < 0 ? scale(0, min, max) * 100 : 0;\n    var width = Math.abs(x - zero);\n    if (width > 0) {\n      bar.style.setProperty('width', (width < EPSILON\n                            ? EPSILON\n                            : width) + '%');\n    } else {\n      bar.style.setProperty('width', '0%');\n    }\n\n    if (min < 0) {\n      if (value < 0) {\n        bar.style.setProperty('left', (zero - width) + '%');\n      } else {\n        bar.style.setProperty('left', zero + '%');\n      }\n    } else {\n      bar.style.removeProperty('left');\n    }\n\n    delete this[renderId];\n  }\n\n  function scale(value, min, max) {\n    return (value - min) / (max - min);\n  }\n\n  function genericProperty(name, value, parse, change) {\n    var symbol = '__' + name;\n    if (!parse) {\n      parse = identity;\n    }\n    return {\n      get: function() {\n        return (symbol in this) ? this[symbol] : value;\n      },\n      set: function(value) {\n        if (parse) {\n          value = parse.call(this, value, name);\n        }\n        if (value !== this[symbol]) {\n          this[symbol] = value;\n          if (change) {\n            change.call(this, value, name);\n          }\n        }\n      }\n    };\n  }\n\n  function numericProperty(name, value, parse, change) {\n    if (change) {\n      var _change = change;\n      change = function() {\n        _change.apply(this, arguments);\n        render.apply(this, arguments);\n      };\n    } else {\n      change = render;\n    }\n    return genericProperty(name, value, parseNumber, change);\n  }\n\n  function parseNumber(n) {\n    return isNaN(n) ? 0 : Number(n);\n  }\n\n  function parseBoolean(value) {\n    return (typeof value === 'string')\n      ? value === 'true'\n      : !!value;\n  }\n\n  function identity(d) {\n    return d;\n  }\n\n  module.exports = exports.EITIBar;\n\n})(this);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/components/eiti-bar.js\n ** module id = 3\n ** module chunks = 0\n **/"],"sourceRoot":""}