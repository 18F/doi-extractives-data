/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	(function(exports) {
	  'use strict';

	  // require('./../components/search-results.js');
	  __webpack_require__(26);

	})(window);


/***/ },

/***/ 26:
/***/ function(module, exports) {

	(function() {
	  function displaySearchResults(results, store) {
	    // console.log(results, store)
	    var searchResults = document.querySelector('.search-results-container .search-results-container');
	    searchResults.innerHTML = ''

	    if (results.length) { // Are there any results?
	      var appendString = '';

	      for (var i = 0; i < results.length; i++) {  // Iterate over the results
	        var item = store[results[i].ref];

	        var tags = (item.tag || [])
	          .map(function(tag) {
	            return (
	              '<span class="search-result-list-tag">&nbsp;' +
	                '<a href="' + "/search-results/?query=" + encodeURIComponent(tag) + '" title="Search for ' + tag + '">' +
	                  tag +
	                '</a>&nbsp;' +
	              '</span>'
	            );
	          });
	        appendString += '<article class="search-result-list">' +
	                          '<h1><a href="' + item.url + '" target="_blank">' +
	                            item.title +
	                          '</a></h1>' +
	                          '<p>' + item.description + '</p>' +
	                          '<p>Tagged&nbsp;/' + tags.join('') + '</p>' +
	                        '</article>'
	      }
	      searchResults.innerHTML = appendString;
	    } else {
	      $('.search-no-results').show();
	      $('.search-header').hide();
	    }
	  }

	  function updateContext(results, searchTerm) {
	    var resultsLength = results.length || 0;
	    var searchTerm = searchTerm || '';
	    console.log(results.length)
	    $('.search-results-count').val(resultsLength);
	    document.querySelector('.search-results-count').innerHTML = resultsLength;
	    document.querySelector('.search-string').innerHTML = searchTerm;
	    $('.search-box').val(searchTerm);
	  }

	  function getQueryVariable(variable) {
	    var query = window.location.search.substring(1);
	    var vars = query.split('&');

	    for (var i = 0; i < vars.length; i++) {
	      var pair = vars[i].split('=');

	      if (pair[0] === variable) {
	        return decodeURIComponent(pair[1].replace(/\+/g, '%20'));
	      }
	    }
	  }

	  function updateQueryStringParameter(uri, key, value) {
	    var re = new RegExp("([?&])" + key + "=.*?(&|$)", "i");
	    var separator = uri.indexOf('?') !== -1 ? "&" : "?";
	    if (uri.match(re)) {
	      return uri.replace(re, '$1' + key + "=" + value + '$2');
	    }
	    else {
	      return uri + separator + key + "=" + value;
	    }
	  }

	  window.updateQueryStringParameter = updateQueryStringParameter;

	  // Initalize lunr with the fields it will be searching on. I've given title
	  // a boost of 10 to indicate matches on this field are more important.
	  var idx = lunr(function () {
	    this.field('id');
	    this.field('title', { boost: 10 });
	    this.field('description');
	    this.field('tag', { boost: 10 });
	  });

	  for (var key in window.store) { // Add the data to lunr
	    idx.add({
	      'id': key,
	      'title': window.store[key].title,
	      'description': window.store[key].description,
	      'tag': window.store[key].tag,
	    });

	    window.idx = idx
	    var results = idx.search(searchTerm); // Get lunr to perform a search
	  }

	  displaySearchResults(results, window.store); // We'll write this in the next section


	  function searchIndex(searchTerm) {
	    $('.search-no-results').hide();
	    $('.search-header').show();
	    var results = idx.search(searchTerm);
	    displaySearchResults(results, window.store);
	    updateContext(results, searchTerm);
	  }


	  var searchTerm = getQueryVariable('query') || document.querySelector('.search-box').value;


	  if (searchTerm.length > 0) {
	    searchIndex(searchTerm);
	  } else {
	    updateContext(results, searchTerm);
	  }


	  $('.search-box').on('keyup', function() {
	    var searchValue = this.value;
	    console.log(searchValue)
	    searchIndex(searchValue);
	    // $('.search-string').val(searchValue);
	  })
	})();


/***/ }

/******/ });