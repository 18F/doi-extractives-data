/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	(function(exports) {
	  'use strict';

	  __webpack_require__(7);
	  __webpack_require__(8);

	})(window);




/***/ },

/***/ 7:
/***/ function(module, exports) {

	$( document ).ready(function() {
	// ARIA Tab Interface
	// Thanks to Practical ARIA Examples
	// http://heydonworks.com/practical_aria_examples/#tab-interface

	// The class for the container div

	var $container = '.tab-interface';

	// The setup

	$($container +' ul').attr('role','tablist');
	$($container +' [role="tablist"] li').attr('role','presentation');
	$('[role="tablist"] a').attr({
	    'role' : 'tab',
	    'tabindex' : '-1'
	});

	// Make each aria-controls correspond id of targeted section (re href)

	$('[role="tablist"] a').each(function() {
	  $(this).attr(
	    'aria-controls', $(this).attr('href').substring(1)
	  );
	});

	// Make the first tab selected by default and allow it focus

	$('[role="tablist"] li:first-child a').attr({
	    'aria-selected' : 'true',
	    'tabindex' : '0'
	});

	// Make each section focusable and give it the tabpanel role

	$($container +' section').attr({
	  'role' : 'tabpanel'
	});

	// Make first child of each panel focusable programmatically

	$($container +' section > *:first-child').attr({
	    'tabindex' : '0'
	});

	// Make all but the first section hidden (ARIA state and display CSS)

	$('[role="tabpanel"]:not(:first-of-type)').attr({
	  'aria-hidden' : 'true'
	});

	// Change focus between tabs with arrow keys

	$('[role="tab"]').on('keydown', function(e) {

	  // define current, previous and next (possible) tabs

	  var $original = $(this);
	  var $prev = $(this).parents('li').prev().children('[role="tab"]');
	  var $next = $(this).parents('li').next().children('[role="tab"]');
	  var $target;

	  // find the direction (prev or next)

	  switch (e.keyCode) {
	    case 37:
	      $target = $prev;
	      break;
	    case 39:
	      $target = $next;
	      break;
	    default:
	      $target = false
	      break;
	  }

	  if ($target.length) {
	      $original.attr({
	        'tabindex' : '-1',
	        'aria-selected' : null
	      });
	      $target.attr({
	        'tabindex' : '0',
	        'aria-selected' : true
	      }).focus();
	  }

	  // Hide panels

	  $($container +' [role="tabpanel"]')
	    .attr('aria-hidden', 'true');

	  // Show panel which corresponds to target

	  $('#' + $(document.activeElement).attr('href').substring(1))
	    .attr('aria-hidden', null);

	});

	// Handle click on tab to show + focus tabpanel

	$('[role="tab"]').on('click', function(e) {

	  e.preventDefault();

	  // remove focusability [sic] and aria-selected

	  $('[role="tab"]').attr({
	    'tabindex': '-1',
	    'aria-selected' : null
	    });

	  // replace above on clicked tab

	  $(this).attr({
	    'aria-selected' : true,
	    'tabindex' : '0'
	  });

	  // Hide panels

	  $($container +' [role="tabpanel"]').attr('aria-hidden', 'true');

	  // show corresponding panel

	  $('#' + $(this).attr('href').substring(1))
	    .attr('aria-hidden', null);

	});

	});


/***/ },

/***/ 8:
/***/ function(module, exports) {

	(function(exports) {

	  var findParentSVG = function (childObj) {
	    var obj = childObj.parentNode;
	    while(obj.tagName !== 'svg') {
	      obj = obj.parentNode;
	    }
	    return obj;
	  };

	  var depixelize = function(value) {
	    if (value.indexOf('px') > -1) {
	      return +value.substr(0, value.length - 2);
	    } else {
	      return value;
	    }
	  };

	  var pixelize = function(value) {
	    return value + 'px';
	  };

	  var hideTooltip = function (tooltip) {
	    tooltip.attr('aria-hidden', true);
	  };

	  var attached = function() {
	    var root = d3.select(this);
	    var svg = d3.select(findParentSVG(this));
	    var svgParent = d3.select(findParentSVG(this).parentElement);
	    var parent = d3.select(this.parentElement).select('use');

	    var tooltip,
	      tooltipText;

	    var init = function(initialize) {
	      tooltip = svgParent.select('.eiti-tooltip');

	      if (tooltip.empty()) {
	        svgParent.append('div')
	          .classed('eiti-tooltip', true);
	      }

	      tooltip.attr('aria-label', function(){
	          return self.attr('alt');
	        })
	        .attr('aria-hidden', false);

	      tooltipText = tooltip.select('p');

	      if (tooltipText.empty()) {
	        tooltipText = tooltip.append('p');
	      }

	      // clear <title> text
	      // if no javascript runs, <title> will serve as the tooltip
	      self.text('');

	      if (initialize) {
	        hideTooltip(tooltip);
	      }
	    };

	    var update = function() {

	      init();

	      tooltipText.text(function(){
	        return self.attr('desc');
	      });

	      tooltip
	        .style('left', function() {
	          var tooltipWidth = depixelize(tooltip.style('width'));
	          var svgWidth = depixelize(svg.style('width'));

	          if (svgWidth <= tooltipWidth + event.layerX) {
	            return pixelize(event.layerX - tooltipWidth);
	          } else {
	            return pixelize(event.layerX);
	          }
	        })
	        .style('top', function() {
	          var tooltipHeight = depixelize(tooltip.style('height'));
	          var svgHeight = depixelize(svg.style('height'));

	          if (svgHeight <= tooltipHeight + event.layerY) {
	            return pixelize(event.layerY - tooltipHeight);
	          } else {
	            return pixelize(event.layerY);
	          }
	        });
	    };

	    var hide = function () {
	      if (event.fromElement.nodeName === 'svg') {
	        var tooltip = svgParent.select('.eiti-tooltip');
	        hideTooltip(tooltip);
	      }
	    };

	    init(this);

	    parent.on('mouseover', update);
	    svg.on('mouseout', hide);
	  };

	  var detached = function() {
	  };

	  exports.EITITooltip = document.registerElement('eiti-tooltip', {
	    extends: 'title',
	    prototype: Object.create(
	      SVGElement.prototype,
	      {
	        attachedCallback: {value: attached},
	        detachdCallback: {value: detached}
	      }
	    )
	  });

	})(this);



/***/ }

/******/ });